# Code generated by:
# python -m pwiz -H /var/opt/gitlab/postgresql -p 5432 -u gitlab-psql -e postgresql -i -o gitlabhq_production
# Date: November 22, 2021 06:16PM
# Database: gitlabhq_production
# Peewee version: 2.9.2

from peewee import *
from playhouse.postgres_ext import *

database = PostgresqlDatabase('gitlabhq_production', **{'host': '/var/opt/gitlab/postgresql', 'port': 5432, 'user': 'gitlab-psql'})

class UnknownField(object):
    def __init__(self, *_, **__): pass

class BaseModel(Model):
    class Meta:
        database = database

class AbuseReports(BaseModel):
    reporter = IntegerField(db_column='reporter_id', null=True)
    user = IntegerField(db_column='user_id', index=True, null=True)
    message = TextField(null=True)
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    message_html = TextField(null=True)
    cached_markdown_version = IntegerField(null=True)

    class Meta:
        db_table = 'abuse_reports'

class ApplicationSettingTerms(BaseModel):
    cached_markdown_version = IntegerField(null=True)
    terms = TextField()
    terms_html = TextField(null=True)

    class Meta:
        db_table = 'application_setting_terms'

# Possible reference cycle: namespaces
class Users(BaseModel):
    email = CharField(index=True)
    encrypted_password = CharField()
    reset_password_token = CharField(null=True, unique=True)
    reset_password_sent_at = DateTimeField(null=True)
    remember_created_at = DateTimeField(null=True)
    sign_in_count = IntegerField(null=True)
    current_sign_in_at = DateTimeField(null=True)
    last_sign_in_at = DateTimeField(null=True)
    current_sign_in_ip = CharField(null=True)
    last_sign_in_ip = CharField(null=True)
    created_at = DateTimeField(index=True, null=True)
    updated_at = DateTimeField(null=True)
    name = CharField(index=True, null=True)
    admin = BooleanField(index=True)
    projects_limit = IntegerField()
    skype = CharField()
    linkedin = CharField()
    twitter = CharField()
    failed_attempts = IntegerField(null=True)
    locked_at = DateTimeField(null=True)
    username = CharField(index=True, null=True)
    can_create_group = BooleanField()
    can_create_team = BooleanField()
    state = CharField(index=True, null=True)
    color_scheme = IntegerField(db_column='color_scheme_id')
    password_expires_at = DateTimeField(null=True)
    created_by = IntegerField(db_column='created_by_id', null=True)
    last_credential_check_at = DateTimeField(null=True)
    avatar = CharField(null=True)
    confirmation_token = CharField(null=True, unique=True)
    confirmed_at = DateTimeField(null=True)
    confirmation_sent_at = DateTimeField(null=True)
    unconfirmed_email = CharField(index=True, null=True)
    hide_no_ssh_key = BooleanField(null=True)
    website_url = CharField()
    admin_email_unsubscribed_at = DateTimeField(null=True)
    notification_email = CharField(null=True)
    hide_no_password = BooleanField(null=True)
    password_automatically_set = BooleanField(null=True)
    location = CharField(null=True)
    encrypted_otp_secret = CharField(null=True)
    encrypted_otp_secret_iv = CharField(null=True)
    encrypted_otp_secret_salt = CharField(null=True)
    otp_required_for_login = BooleanField()
    otp_backup_codes = TextField(null=True)
    public_email = CharField(index=True)
    dashboard = IntegerField(null=True)
    project_view = IntegerField(null=True)
    consumed_timestep = IntegerField(null=True)
    layout = IntegerField(null=True)
    hide_project_limit = BooleanField(null=True)
    note = TextField(null=True)
    unlock_token = CharField(null=True, unique=True)
    otp_grace_period_started_at = DateTimeField(null=True)
    external = BooleanField(null=True)
    incoming_email_token = CharField(index=True, null=True)
    organization = CharField(null=True)
    auditor = BooleanField()
    require_two_factor_authentication_from_group = BooleanField(index=True)
    two_factor_grace_period = IntegerField()
    last_activity_on = DateField(null=True)
    notified_of_own_activity = BooleanField(null=True)
    preferred_language = CharField(null=True)
    email_opted_in = BooleanField(null=True)
    email_opted_in_ip = CharField(null=True)
    email_opted_in_source = IntegerField(db_column='email_opted_in_source_id', null=True)
    email_opted_in_at = DateTimeField(null=True)
    theme = IntegerField(db_column='theme_id', null=True)
    accepted_term = ForeignKeyField(db_column='accepted_term_id', null=True, rel_model=ApplicationSettingTerms, to_field='id')
    feed_token = CharField(index=True, null=True)
    private_profile = BooleanField()
    roadmap_layout = IntegerField(null=True)
    include_private_contributions = BooleanField(null=True)
    commit_email = CharField(null=True)
    group_view = IntegerField(index=True, null=True)
    managing_group = ForeignKeyField(db_column='managing_group_id', null=True, rel_model=Namespaces, to_field='id')
    first_name = CharField(null=True)
    last_name = CharField(null=True)
    static_object_token = CharField(null=True, unique=True)
    role = IntegerField(null=True)
    user_type = IntegerField(index=True, null=True)

    class Meta:
        db_table = 'users'
        indexes = (
            (('id', 'last_activity_on'), False),
            (('state', 'user_type'), False),
        )

class Shards(BaseModel):
    name = CharField(unique=True)

    class Meta:
        db_table = 'shards'

# Possible reference cycle: projects
class PoolRepositories(BaseModel):
    id = BigIntegerField(primary_key=True)
    shard = ForeignKeyField(db_column='shard_id', rel_model=Shards, to_field='id')
    disk_path = CharField(null=True, unique=True)
    state = CharField(null=True)
    source_project = ForeignKeyField(db_column='source_project_id', null=True, rel_model=Projects, to_field='id')

    class Meta:
        db_table = 'pool_repositories'
        indexes = (
            (('shard', 'source_project'), True),
        )

# Possible reference cycle: namespaces
# Possible reference cycle: namespaces
class Projects(BaseModel):
    name = CharField(index=True, null=True)
    path = CharField(index=True, null=True)
    description = TextField(index=True, null=True)
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    creator = IntegerField(db_column='creator_id', null=True)
    namespace = ForeignKeyField(db_column='namespace_id', rel_model=Namespaces, to_field='id')
    last_activity_at = DateTimeField(null=True)
    import_url = CharField(null=True)
    visibility_level = IntegerField()
    archived = BooleanField()
    avatar = CharField(null=True)
    merge_requests_template = TextField(null=True)
    star_count = IntegerField(index=True)
    merge_requests_rebase_enabled = BooleanField(null=True)
    import_type = CharField(null=True)
    import_source = CharField(null=True)
    approvals_before_merge = IntegerField()
    reset_approvals_on_push = BooleanField(null=True)
    merge_requests_ff_only_enabled = BooleanField(null=True)
    issues_template = TextField(null=True)
    mirror = BooleanField()
    mirror_last_update_at = DateTimeField(null=True)
    mirror_last_successful_update_at = DateTimeField(index=True, null=True)
    mirror_user = IntegerField(db_column='mirror_user_id', index=True, null=True)
    shared_runners_enabled = BooleanField()
    runners_token = CharField(index=True, null=True)
    build_coverage_regex = CharField(null=True)
    build_allow_git_fetch = BooleanField()
    build_timeout = IntegerField()
    mirror_trigger_builds = BooleanField()
    pending_delete = BooleanField(index=True, null=True)
    public_builds = BooleanField()
    last_repository_check_failed = BooleanField(index=True, null=True)
    last_repository_check_at = DateTimeField(index=True, null=True)
    only_allow_merge_if_pipeline_succeeds = BooleanField()
    has_external_issue_tracker = BooleanField(null=True)
    repository_storage = CharField(index=True)
    repository_read_only = BooleanField(null=True)
    request_access_enabled = BooleanField()
    has_external_wiki = BooleanField(null=True)
    ci_config_path = CharField(null=True)
    lfs_enabled = BooleanField(null=True)
    description_html = TextField(null=True)
    only_allow_merge_if_all_discussions_are_resolved = BooleanField(null=True)
    repository_size_limit = BigIntegerField(null=True)
    printing_merge_request_link_enabled = BooleanField()
    auto_cancel_pending_pipelines = IntegerField()
    service_desk_enabled = BooleanField(null=True)
    cached_markdown_version = IntegerField(null=True)
    delete_error = TextField(null=True)
    last_repository_updated_at = DateTimeField(index=True, null=True)
    disable_overriding_approvers_per_merge_request = BooleanField(null=True)
    storage_version = IntegerField(null=True)
    resolve_outdated_diff_discussions = BooleanField(null=True)
    remote_mirror_available_overridden = BooleanField(null=True)
    only_mirror_protected_branches = BooleanField(null=True)
    pull_mirror_available_overridden = BooleanField(null=True)
    jobs_cache_index = IntegerField(null=True)
    external_authorization_classification_label = CharField(null=True)
    mirror_overwrites_diverged_branches = BooleanField(null=True)
    pages_https_only = BooleanField(null=True)
    external_webhook_token = CharField(null=True)
    packages_enabled = BooleanField(null=True)
    merge_requests_author_approval = BooleanField(null=True)
    pool_repository = ForeignKeyField(db_column='pool_repository_id', null=True, rel_model=PoolRepositories, to_field='id')
    runners_token_encrypted = CharField(index=True, null=True)
    bfg_object_map = CharField(null=True)
    detected_repository_languages = BooleanField(null=True)
    merge_requests_disable_committers_approval = BooleanField(null=True)
    require_password_to_approve = BooleanField(null=True)
    emails_disabled = BooleanField(null=True)
    max_pages_size = IntegerField(null=True)
    max_artifacts_size = IntegerField(null=True)
    pull_mirror_branch_prefix = CharField(null=True)
    remove_source_branch_after_merge = BooleanField(null=True)
    marked_for_deletion_at = DateField(index=True, null=True)
    marked_for_deletion_by_user = ForeignKeyField(db_column='marked_for_deletion_by_user_id', null=True, rel_model=Users, to_field='id')
    autoclose_referenced_issues = BooleanField(null=True)
    suggestion_commit_message = CharField(null=True)
    project_namespace = ForeignKeyField(db_column='project_namespace_id', null=True, rel_model=Namespaces, related_name='namespaces_project_namespace_set', to_field='id', unique=True)

    class Meta:
        db_table = 'projects'
        indexes = (
            (('created_at', 'creator'), False),
            (('created_at', 'id'), False),
            (('created_at', 'id'), False),
            (('created_at', 'id'), False),
            (('created_at', 'import_type', 'creator'), False),
            (('creator', 'id', 'created_at'), False),
            (('id', 'created_at'), False),
            (('id', 'created_at'), False),
            (('id', 'created_at'), False),
            (('id', 'created_at'), False),
            (('id', 'created_at'), False),
            (('id', 'created_at', 'creator'), False),
            (('id', 'creator'), False),
            (('id', 'last_activity_at'), False),
            (('id', 'last_activity_at'), False),
            (('id', 'last_activity_at'), False),
            (('id', 'name'), False),
            (('id', 'path'), False),
            (('id', 'updated_at'), False),
            (('id', 'updated_at'), False),
            (('id', 'updated_at'), False),
            (('import_type', 'creator', 'created_at'), False),
            (('last_repository_updated_at', 'id', 'repository_storage'), False),
            (('name', 'id'), False),
            (('name', 'id'), False),
            (('namespace', 'id'), False),
            (('path', 'id'), False),
            (('path', 'id'), False),
            (('repository_storage', 'created_at'), False),
        )

class PushRules(BaseModel):
    force_push_regex = CharField(null=True)
    delete_branch_regex = CharField(null=True)
    commit_message_regex = CharField(null=True)
    deny_delete_tag = BooleanField(null=True)
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    author_email_regex = CharField(null=True)
    member_check = BooleanField()
    file_name_regex = CharField(null=True)
    is_sample = BooleanField(index=True, null=True)
    max_file_size = IntegerField()
    prevent_secrets = BooleanField()
    branch_name_regex = CharField(null=True)
    reject_unsigned_commits = BooleanField(null=True)
    commit_committer_check = BooleanField(null=True)
    regexp_uses_re2 = BooleanField(null=True)
    commit_message_negative_regex = CharField(null=True)

    class Meta:
        db_table = 'push_rules'

class Namespaces(BaseModel):
    name = CharField(index=True)
    path = CharField(index=True)
    owner = IntegerField(db_column='owner_id', index=True, null=True)
    created_at = DateTimeField(index=True, null=True)
    updated_at = DateTimeField(null=True)
    type = CharField(null=True)
    description = CharField()
    avatar = CharField(null=True)
    membership_lock = BooleanField(null=True)
    share_with_group_lock = BooleanField(null=True)
    visibility_level = IntegerField()
    request_access_enabled = BooleanField()
    ldap_sync_status = CharField()
    ldap_sync_error = CharField(null=True)
    ldap_sync_last_update_at = DateTimeField(index=True, null=True)
    ldap_sync_last_successful_update_at = DateTimeField(index=True, null=True)
    ldap_sync_last_sync_at = DateTimeField(null=True)
    description_html = TextField(null=True)
    lfs_enabled = BooleanField(null=True)
    parent = IntegerField(db_column='parent_id', null=True)
    shared_runners_minutes_limit = IntegerField(null=True)
    repository_size_limit = BigIntegerField(null=True)
    require_two_factor_authentication = BooleanField(index=True)
    two_factor_grace_period = IntegerField()
    cached_markdown_version = IntegerField(null=True)
    project_creation_level = IntegerField(null=True)
    runners_token = CharField(null=True, unique=True)
    file_template_project = ForeignKeyField(db_column='file_template_project_id', null=True, rel_model=Projects, to_field='id')
    saml_discovery_token = CharField(null=True)
    runners_token_encrypted = CharField(null=True, unique=True)
    custom_project_templates_group = ForeignKeyField(db_column='custom_project_templates_group_id', null=True, rel_model='self', to_field='id')
    auto_devops_enabled = BooleanField(null=True)
    extra_shared_runners_minutes_limit = IntegerField(null=True)
    last_ci_minutes_notification_at = DateTimeField(null=True)
    last_ci_minutes_usage_notification_level = IntegerField(null=True)
    subgroup_creation_level = IntegerField(null=True)
    emails_disabled = BooleanField(null=True)
    max_pages_size = IntegerField(null=True)
    max_artifacts_size = IntegerField(null=True)
    mentions_disabled = BooleanField(null=True)
    default_branch_protection = IntegerField(null=True)
    unlock_membership_to_ldap = BooleanField(null=True)
    max_personal_access_token_lifetime = IntegerField(null=True)
    push_rule = ForeignKeyField(db_column='push_rule_id', null=True, rel_model=PushRules, to_field='id', unique=True)
    shared_runners_enabled = BooleanField()
    allow_descendants_override_disabled_shared_runners = BooleanField()
    traversal_ids = UnknownField(index=True)  # ARRAY

    class Meta:
        db_table = 'namespaces'
        indexes = (
            (('id', 'name'), False),
            (('id', 'parent'), True),
            (('name', 'type', 'parent'), True),
            (('shared_runners_minutes_limit', 'extra_shared_runners_minutes_limit'), False),
            (('type', 'custom_project_templates_group'), False),
            (('type', 'id'), False),
        )

class ClusterAgents(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    name = TextField()
    created_by_user = ForeignKeyField(db_column='created_by_user_id', null=True, rel_model=Users, to_field='id')

    class Meta:
        db_table = 'cluster_agents'
        indexes = (
            (('project', 'name'), True),
        )

class AgentGroupAuthorizations(BaseModel):
    id = BigIntegerField(primary_key=True)
    group = ForeignKeyField(db_column='group_id', rel_model=Namespaces, to_field='id')
    agent = ForeignKeyField(db_column='agent_id', rel_model=ClusterAgents, to_field='id')
    config = JSONField()

    class Meta:
        db_table = 'agent_group_authorizations'
        indexes = (
            (('group', 'agent'), True),
        )

class AgentProjectAuthorizations(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    agent = ForeignKeyField(db_column='agent_id', rel_model=ClusterAgents, to_field='id')
    config = JSONField()

    class Meta:
        db_table = 'agent_project_authorizations'
        indexes = (
            (('project', 'agent'), True),
        )

class IterationsCadences(BaseModel):
    id = BigIntegerField(primary_key=True)
    group = ForeignKeyField(db_column='group_id', rel_model=Namespaces, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    start_date = DateField()
    last_run_date = DateField(null=True)
    duration_in_weeks = IntegerField(null=True)
    iterations_in_advance = IntegerField(null=True)
    active = BooleanField()
    automatic = BooleanField()
    title = TextField()
    roll_over = BooleanField()
    description = TextField(null=True)

    class Meta:
        db_table = 'iterations_cadences'
        indexes = (
            (('duration_in_weeks', 'automatic'), False),
        )

class Sprints(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    start_date = DateField(null=True)
    due_date = DateField(index=True, null=True)
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    group = ForeignKeyField(db_column='group_id', null=True, rel_model=Namespaces, to_field='id')
    iid = IntegerField()
    cached_markdown_version = IntegerField(null=True)
    title = TextField(index=True)
    title_html = TextField(null=True)
    description = TextField(index=True, null=True)
    description_html = TextField(null=True)
    state_enum = IntegerField()
    iterations_cadence = ForeignKeyField(db_column='iterations_cadence_id', null=True, rel_model=IterationsCadences, to_field='id')

    class Meta:
        db_table = 'sprints'
        indexes = (
            (('iid', 'project'), True),
            (('title', 'iterations_cadence'), True),
            (('title', 'project'), True),
        )

class Milestones(BaseModel):
    title = CharField(index=True)
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    description = TextField(index=True, null=True)
    due_date = DateField(index=True, null=True)
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    state = CharField(null=True)
    iid = IntegerField(null=True)
    title_html = TextField(null=True)
    description_html = TextField(null=True)
    start_date = DateField(null=True)
    cached_markdown_version = IntegerField(null=True)
    group = ForeignKeyField(db_column='group_id', null=True, rel_model=Namespaces, to_field='id')

    class Meta:
        db_table = 'milestones'
        indexes = (
            (('project', 'iid'), True),
        )

class WorkItemTypes(BaseModel):
    id = BigIntegerField(primary_key=True)
    base_type = IntegerField()
    cached_markdown_version = IntegerField(null=True)
    name = TextField()
    description = TextField(null=True)
    description_html = TextField(null=True)
    icon_name = TextField(null=True)
    namespace = ForeignKeyField(db_column='namespace_id', null=True, rel_model=Namespaces, to_field='id', unique=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'work_item_types'

class Epics(BaseModel):
    group = ForeignKeyField(db_column='group_id', rel_model=Namespaces, to_field='id')
    author = ForeignKeyField(db_column='author_id', rel_model=Users, related_name='users_author_set', to_field='id')
    assignee = ForeignKeyField(db_column='assignee_id', null=True, rel_model=Users, to_field='id')
    iid = IntegerField(index=True)
    cached_markdown_version = IntegerField(null=True)
    updated_by = IntegerField(db_column='updated_by_id', null=True)
    last_edited_by = IntegerField(db_column='last_edited_by_id', index=True, null=True)
    lock_version = IntegerField(null=True)
    start_date = DateField(index=True, null=True)
    end_date = DateField(index=True, null=True)
    last_edited_at = DateTimeField(null=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    title = CharField()
    title_html = CharField()
    description = TextField(null=True)
    description_html = TextField(null=True)
    start_date_sourcing_milestone = ForeignKeyField(db_column='start_date_sourcing_milestone_id', null=True, rel_model=Milestones, related_name='milestones_start_date_sourcing_milestone_set', to_field='id')
    due_date_sourcing_milestone = ForeignKeyField(db_column='due_date_sourcing_milestone_id', null=True, rel_model=Milestones, to_field='id')
    start_date_fixed = DateField(null=True)
    due_date_fixed = DateField(null=True)
    start_date_is_fixed = BooleanField(null=True)
    due_date_is_fixed = BooleanField(null=True)
    closed_by = ForeignKeyField(db_column='closed_by_id', null=True, rel_model=Users, related_name='users_closed_by_set', to_field='id')
    closed_at = DateTimeField(null=True)
    parent = ForeignKeyField(db_column='parent_id', null=True, rel_model='self', related_name='epics_parent_set', to_field='id')
    relative_position = IntegerField(null=True)
    state = IntegerField(db_column='state_id')
    start_date_sourcing_epic = ForeignKeyField(db_column='start_date_sourcing_epic_id', null=True, rel_model='self', related_name='epics_start_date_sourcing_epic_set', to_field='id')
    due_date_sourcing_epic = ForeignKeyField(db_column='due_date_sourcing_epic_id', null=True, rel_model='self', to_field='id')
    confidential = BooleanField(index=True)
    external_key = CharField(null=True)

    class Meta:
        db_table = 'epics'
        indexes = (
            (('external_key', 'group'), True),
            (('iid', 'group'), True),
        )

class Issues(BaseModel):
    title = CharField(index=True, null=True)
    author = ForeignKeyField(db_column='author_id', null=True, rel_model=Users, to_field='id')
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(index=True, null=True)
    description = TextField(index=True, null=True)
    milestone = ForeignKeyField(db_column='milestone_id', null=True, rel_model=Milestones, to_field='id')
    iid = IntegerField(null=True)
    updated_by = ForeignKeyField(db_column='updated_by_id', null=True, rel_model=Users, related_name='users_updated_by_set', to_field='id')
    weight = IntegerField(null=True)
    confidential = BooleanField(index=True)
    due_date = DateField(null=True)
    moved_to = ForeignKeyField(db_column='moved_to_id', null=True, rel_model='self', related_name='issues_moved_to_set', to_field='id')
    lock_version = IntegerField(null=True)
    title_html = TextField(null=True)
    description_html = TextField(null=True)
    time_estimate = IntegerField(null=True)
    relative_position = IntegerField(null=True)
    service_desk_reply_to = CharField(null=True)
    cached_markdown_version = IntegerField(null=True)
    last_edited_at = DateTimeField(null=True)
    last_edited_by = IntegerField(db_column='last_edited_by_id', index=True, null=True)
    discussion_locked = BooleanField(null=True)
    closed_at = DateTimeField(null=True)
    closed_by = ForeignKeyField(db_column='closed_by_id', null=True, rel_model=Users, related_name='users_closed_by_set', to_field='id')
    state = IntegerField(db_column='state_id', index=True)
    duplicated_to = ForeignKeyField(db_column='duplicated_to_id', null=True, rel_model='self', to_field='id')
    promoted_to_epic = ForeignKeyField(db_column='promoted_to_epic_id', null=True, rel_model=Epics, to_field='id')
    health_status = IntegerField(index=True, null=True)
    external_key = CharField(null=True)
    sprint = ForeignKeyField(db_column='sprint_id', null=True, rel_model=Sprints, to_field='id')
    issue_type = IntegerField(index=True)
    blocking_issues_count = IntegerField()
    upvotes_count = IntegerField()
    work_item_type = ForeignKeyField(db_column='work_item_type_id', null=True, rel_model=WorkItemTypes, to_field='id')

    class Meta:
        db_table = 'issues'
        indexes = (
            (('blocking_issues_count', 'project', 'state'), False),
            (('closed_at', 'project'), False),
            (('created_at', 'project'), False),
            (('id', 'created_at', 'author'), False),
            (('id', 'project', 'created_at', 'state'), False),
            (('id', 'project', 'due_date', 'state'), False),
            (('id', 'project', 'relative_position', 'state'), False),
            (('project', 'external_key'), True),
            (('project', 'id', 'created_at', 'state'), False),
            (('project', 'iid'), True),
            (('project', 'upvotes_count'), False),
            (('state', 'id', 'project', 'updated_at'), False),
        )

class Environments(BaseModel):
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    name = CharField(index=True)
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    external_url = CharField(null=True)
    environment_type = CharField(null=True)
    state = CharField()
    slug = CharField()
    auto_stop_at = DateTimeField(index=True, null=True)
    auto_delete_at = DateTimeField(index=True, null=True)
    tier = IntegerField(null=True)

    class Meta:
        db_table = 'environments'
        indexes = (
            (('project', 'environment_type', 'state'), False),
            (('project', 'name'), True),
            (('project', 'tier'), False),
            (('slug', 'project'), True),
            (('state', 'auto_stop_at'), False),
        )

class PrometheusMetrics(BaseModel):
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    title = CharField()
    query = CharField()
    y_label = CharField()
    unit = CharField()
    legend = CharField(null=True)
    group = IntegerField(index=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    common = BooleanField(index=True)
    identifier = CharField(null=True, unique=True)
    dashboard_path = TextField(null=True)

    class Meta:
        db_table = 'prometheus_metrics'
        indexes = (
            (('project', 'identifier'), True),
        )

class PrometheusAlerts(BaseModel):
    created_at = DateTimeField()
    updated_at = DateTimeField()
    threshold = FloatField()
    operator = IntegerField()
    environment = ForeignKeyField(db_column='environment_id', rel_model=Environments, to_field='id')
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    prometheus_metric = ForeignKeyField(db_column='prometheus_metric_id', rel_model=PrometheusMetrics, to_field='id')
    runbook_url = TextField(null=True)

    class Meta:
        db_table = 'prometheus_alerts'
        indexes = (
            (('environment', 'project', 'prometheus_metric'), True),
        )

class AlertManagementAlerts(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    started_at = DateTimeField()
    ended_at = DateTimeField(null=True)
    events = IntegerField()
    iid = IntegerField()
    severity = IntegerField()
    status = IntegerField()
    fingerprint = BlobField(null=True)
    issue = ForeignKeyField(db_column='issue_id', null=True, rel_model=Issues, to_field='id')
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    title = TextField()
    description = TextField(null=True)
    service = TextField(null=True)
    monitoring_tool = TextField(null=True)
    hosts = UnknownField()  # ARRAY
    payload = JSONField()
    prometheus_alert = ForeignKeyField(db_column='prometheus_alert_id', null=True, rel_model=PrometheusAlerts, to_field='id')
    environment = ForeignKeyField(db_column='environment_id', null=True, rel_model=Environments, to_field='id')
    domain = IntegerField(index=True, null=True)

    class Meta:
        db_table = 'alert_management_alerts'
        indexes = (
            (('iid', 'project'), True),
            (('project', 'fingerprint'), True),
        )

class AlertManagementAlertAssignees(BaseModel):
    id = BigIntegerField(primary_key=True)
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')
    alert = ForeignKeyField(db_column='alert_id', rel_model=AlertManagementAlerts, to_field='id')

    class Meta:
        db_table = 'alert_management_alert_assignees'
        indexes = (
            (('user', 'alert'), True),
        )

# Possible reference cycle: merge_requests
class MergeRequestDiffs(BaseModel):
    state = CharField(null=True)
    merge_request = ForeignKeyField(db_column='merge_request_id', rel_model=MergeRequests, to_field='id', unique=True)
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    base_commit_sha = CharField(null=True)
    real_size = CharField(null=True)
    head_commit_sha = CharField(null=True)
    start_commit_sha = CharField(null=True)
    commits_count = IntegerField(null=True)
    external_diff = CharField(null=True)
    external_diff_store = IntegerField(index=True, null=True)
    stored_externally = BooleanField(null=True)
    files_count = IntegerField(null=True)
    sorted = BooleanField()
    diff_type = IntegerField()

    class Meta:
        db_table = 'merge_request_diffs'
        indexes = (
            (('id', 'merge_request'), False),
        )

class ExternalPullRequests(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    pull_request_iid = IntegerField()
    status = IntegerField()
    source_branch = CharField()
    target_branch = CharField()
    source_repository = CharField()
    target_repository = CharField()
    source_sha = BlobField()
    target_sha = BlobField()

    class Meta:
        db_table = 'external_pull_requests'
        indexes = (
            (('project', 'source_branch', 'target_branch'), True),
        )

class CiPipelineSchedules(BaseModel):
    description = CharField(null=True)
    ref = CharField(null=True)
    cron = CharField(null=True)
    cron_timezone = CharField(null=True)
    next_run_at = DateTimeField(null=True)
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    owner = ForeignKeyField(db_column='owner_id', null=True, rel_model=Users, to_field='id')
    active = BooleanField(null=True)
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'ci_pipeline_schedules'
        indexes = (
            (('id', 'owner'), False),
            (('next_run_at', 'active'), False),
        )

# Possible reference cycle: merge_requests
class CiRefs(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    lock_version = IntegerField()
    status = IntegerField()
    ref_path = TextField()

    class Meta:
        db_table = 'ci_refs'
        indexes = (
            (('project', 'ref_path'), True),
        )

class CiPipelines(BaseModel):
    ref = CharField(null=True)
    sha = CharField(null=True)
    before_sha = CharField(null=True)
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    tag = BooleanField(null=True)
    yaml_errors = TextField(null=True)
    committed_at = DateTimeField(null=True)
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    status = CharField(null=True)
    started_at = DateTimeField(null=True)
    finished_at = DateTimeField(null=True)
    duration = IntegerField(null=True)
    user = IntegerField(db_column='user_id', null=True)
    lock_version = IntegerField(null=True)
    auto_canceled_by = ForeignKeyField(db_column='auto_canceled_by_id', null=True, rel_model='self', to_field='id')
    pipeline_schedule = ForeignKeyField(db_column='pipeline_schedule_id', null=True, rel_model=CiPipelineSchedules, to_field='id')
    source = IntegerField(null=True)
    config_source = IntegerField(null=True)
    protected = BooleanField(null=True)
    failure_reason = IntegerField(null=True)
    iid = IntegerField(null=True)
    merge_request = ForeignKeyField(db_column='merge_request_id', null=True, rel_model=MergeRequests, to_field='id')
    source_sha = BlobField(null=True)
    target_sha = BlobField(null=True)
    external_pull_request = ForeignKeyField(db_column='external_pull_request_id', null=True, rel_model=ExternalPullRequests, to_field='id')
    ci_ref = ForeignKeyField(db_column='ci_ref_id', null=True, rel_model=CiRefs, to_field='id')
    locked = IntegerField()

    class Meta:
        db_table = 'ci_pipelines'
        indexes = (
            (('created_at', 'project', 'status'), False),
            (('created_at', 'user', 'config_source'), False),
            (('created_at', 'user', 'source'), False),
            (('id', 'ci_ref'), False),
            (('id', 'ref', 'project'), False),
            (('id', 'ref', 'project', 'status'), False),
            (('id', 'source', 'ci_ref', 'status'), False),
            (('id', 'status'), False),
            (('id', 'user'), False),
            (('pipeline_schedule', 'id'), False),
            (('project', 'id'), False),
            (('project', 'iid'), True),
            (('project', 'source'), False),
            (('project', 'status', 'config_source'), False),
            (('ref', 'project', 'status', 'user'), False),
            (('sha', 'project'), False),
            (('updated_at', 'project', 'status'), False),
        )

class MergeRequests(BaseModel):
    target_branch = CharField(index=True)
    source_branch = CharField(index=True)
    source_project = ForeignKeyField(db_column='source_project_id', null=True, rel_model=Projects, to_field='id')
    author = ForeignKeyField(db_column='author_id', null=True, rel_model=Users, related_name='users_author_set', to_field='id')
    assignee = ForeignKeyField(db_column='assignee_id', null=True, rel_model=Users, to_field='id')
    title = CharField(index=True, null=True)
    created_at = DateTimeField(index=True, null=True)
    updated_at = DateTimeField(null=True)
    milestone = ForeignKeyField(db_column='milestone_id', null=True, rel_model=Milestones, to_field='id')
    merge_status = CharField()
    target_project = ForeignKeyField(db_column='target_project_id', rel_model=Projects, related_name='projects_target_project_set', to_field='id')
    iid = IntegerField(null=True)
    description = TextField(index=True, null=True)
    updated_by = ForeignKeyField(db_column='updated_by_id', null=True, rel_model=Users, related_name='users_updated_by_set', to_field='id')
    merge_error = TextField(null=True)
    merge_params = TextField(null=True)
    merge_when_pipeline_succeeds = BooleanField()
    merge_user = ForeignKeyField(db_column='merge_user_id', null=True, rel_model=Users, related_name='users_merge_user_set', to_field='id')
    merge_commit_sha = CharField(null=True)
    approvals_before_merge = IntegerField(null=True)
    rebase_commit_sha = CharField(null=True)
    in_progress_merge_commit_sha = CharField(null=True)
    lock_version = IntegerField(null=True)
    title_html = TextField(null=True)
    description_html = TextField(null=True)
    time_estimate = IntegerField(null=True)
    squash = BooleanField()
    cached_markdown_version = IntegerField(null=True)
    last_edited_at = DateTimeField(null=True)
    last_edited_by = IntegerField(db_column='last_edited_by_id', null=True)
    head_pipeline = ForeignKeyField(db_column='head_pipeline_id', null=True, rel_model=CiPipelines, to_field='id')
    merge_jid = CharField(null=True)
    discussion_locked = BooleanField(null=True)
    latest_merge_request_diff = ForeignKeyField(db_column='latest_merge_request_diff_id', null=True, rel_model=MergeRequestDiffs, to_field='id')
    allow_maintainer_to_push = BooleanField(null=True)
    state = IntegerField(db_column='state_id')
    rebase_jid = CharField(null=True)
    squash_commit_sha = BlobField(null=True)
    sprint = ForeignKeyField(db_column='sprint_id', null=True, rel_model=Sprints, to_field='id')
    merge_ref_sha = BlobField(null=True)
    draft = BooleanField()

    class Meta:
        db_table = 'merge_requests'
        indexes = (
            (('id', 'target_project', 'latest_merge_request_diff'), False),
            (('id', 'target_project', 'merge_commit_sha'), False),
            (('id', 'updated_at', 'target_project'), False),
            (('merge_jid', 'id'), False),
            (('source_branch', 'source_project'), False),
            (('source_branch', 'target_project'), False),
            (('source_project', 'source_branch'), False),
            (('state', 'merge_status'), False),
            (('target_branch', 'target_project'), False),
            (('target_project', 'id', 'created_at'), False),
            (('target_project', 'iid'), False),
            (('target_project', 'iid'), False),
            (('target_project', 'iid'), False),
            (('target_project', 'iid'), True),
            (('target_project', 'iid', 'state'), False),
            (('target_project', 'squash_commit_sha'), False),
            (('target_project', 'state', 'created_at', 'id'), False),
        )

class Reviews(BaseModel):
    id = BigIntegerField(primary_key=True)
    author = ForeignKeyField(db_column='author_id', null=True, rel_model=Users, to_field='id')
    merge_request = ForeignKeyField(db_column='merge_request_id', rel_model=MergeRequests, to_field='id')
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    created_at = DateTimeField()

    class Meta:
        db_table = 'reviews'

class Notes(BaseModel):
    note = TextField(index=True, null=True)
    noteable_type = CharField(null=True)
    author = IntegerField(db_column='author_id', null=True)
    created_at = DateTimeField(index=True, null=True)
    updated_at = DateTimeField(null=True)
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    attachment = CharField(null=True)
    line_code = CharField(index=True, null=True)
    commit = CharField(db_column='commit_id', index=True, null=True)
    noteable = IntegerField(db_column='noteable_id', null=True)
    system = BooleanField()
    st_diff = TextField(null=True)
    updated_by = IntegerField(db_column='updated_by_id', null=True)
    type = CharField(null=True)
    position = TextField(null=True)
    original_position = TextField(null=True)
    resolved_at = DateTimeField(null=True)
    resolved_by = IntegerField(db_column='resolved_by_id', null=True)
    discussion = CharField(db_column='discussion_id', index=True, null=True)
    note_html = TextField(null=True)
    cached_markdown_version = IntegerField(null=True)
    change_position = TextField(null=True)
    resolved_by_push = BooleanField(null=True)
    review = ForeignKeyField(db_column='review_id', null=True, rel_model=Reviews, to_field='id')
    confidential = BooleanField(null=True)
    last_edited_at = DateTimeField(null=True)

    class Meta:
        db_table = 'notes'
        indexes = (
            (('created_at', 'author', 'id'), False),
            (('id', 'noteable_type'), False),
            (('id', 'project'), False),
            (('noteable_type', 'project'), False),
            (('project', 'commit'), False),
            (('system', 'noteable', 'noteable_type'), False),
        )

class AlertManagementAlertUserMentions(BaseModel):
    id = BigIntegerField(primary_key=True)
    alert_management_alert = ForeignKeyField(db_column='alert_management_alert_id', rel_model=AlertManagementAlerts, to_field='id', unique=True)
    note = ForeignKeyField(db_column='note_id', null=True, rel_model=Notes, to_field='id', unique=True)
    mentioned_users_ids = UnknownField(null=True)  # ARRAY
    mentioned_projects_ids = UnknownField(null=True)  # ARRAY
    mentioned_groups_ids = UnknownField(null=True)  # ARRAY

    class Meta:
        db_table = 'alert_management_alert_user_mentions'
        indexes = (
            (('alert_management_alert', 'note'), True),
        )

class AlertManagementHttpIntegrations(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    active = BooleanField()
    encrypted_token = TextField()
    encrypted_token_iv = TextField()
    endpoint_identifier = TextField()
    name = TextField()
    payload_example = JSONField()
    payload_attribute_mapping = JSONField()

    class Meta:
        db_table = 'alert_management_http_integrations'
        indexes = (
            (('project', 'active', 'endpoint_identifier'), True),
        )

class AllowedEmailDomains(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    group = ForeignKeyField(db_column='group_id', rel_model=Namespaces, to_field='id')
    domain = CharField()

    class Meta:
        db_table = 'allowed_email_domains'

class AnalyticsCycleAnalyticsStageEventHashes(BaseModel):
    id = BigIntegerField(primary_key=True)
    hash_sha256 = BlobField(null=True, unique=True)

    class Meta:
        db_table = 'analytics_cycle_analytics_stage_event_hashes'

class AnalyticsCycleAnalyticsGroupValueStreams(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    group = ForeignKeyField(db_column='group_id', rel_model=Namespaces, to_field='id')
    name = TextField()

    class Meta:
        db_table = 'analytics_cycle_analytics_group_value_streams'
        indexes = (
            (('group', 'name'), True),
        )

class Labels(BaseModel):
    title = CharField(index=True, null=True)
    color = CharField(null=True)
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    template = BooleanField(index=True, null=True)
    description = CharField(null=True)
    description_html = TextField(null=True)
    type = CharField(null=True)
    group = ForeignKeyField(db_column='group_id', null=True, rel_model=Namespaces, to_field='id')
    cached_markdown_version = IntegerField(null=True)

    class Meta:
        db_table = 'labels'
        indexes = (
            (('project', 'type'), False),
            (('title', 'group'), True),
            (('title', 'project'), True),
        )

class AnalyticsCycleAnalyticsGroupStages(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    relative_position = IntegerField(index=True, null=True)
    start_event_identifier = IntegerField()
    end_event_identifier = IntegerField()
    group = ForeignKeyField(db_column='group_id', rel_model=Namespaces, to_field='id')
    start_event_label = ForeignKeyField(db_column='start_event_label_id', null=True, rel_model=Labels, related_name='labels_start_event_label_set', to_field='id')
    end_event_label = ForeignKeyField(db_column='end_event_label_id', null=True, rel_model=Labels, to_field='id')
    hidden = BooleanField()
    custom = BooleanField()
    name = CharField()
    group_value_stream = ForeignKeyField(db_column='group_value_stream_id', rel_model=AnalyticsCycleAnalyticsGroupValueStreams, to_field='id')
    stage_event_hash = ForeignKeyField(db_column='stage_event_hash_id', null=True, rel_model=AnalyticsCycleAnalyticsStageEventHashes, to_field='id')

    class Meta:
        db_table = 'analytics_cycle_analytics_group_stages'
        indexes = (
            (('name', 'group_value_stream', 'group'), True),
        )

class AnalyticsCycleAnalyticsIssueStageEvents(BaseModel):
    stage_event_hash = BigIntegerField(db_column='stage_event_hash_id')
    issue = BigIntegerField(db_column='issue_id')
    group = BigIntegerField(db_column='group_id')
    project = BigIntegerField(db_column='project_id')
    milestone = BigIntegerField(db_column='milestone_id', null=True)
    author = BigIntegerField(db_column='author_id', null=True)
    start_event_timestamp = DateTimeField()
    end_event_timestamp = DateTimeField(null=True)

    class Meta:
        db_table = 'analytics_cycle_analytics_issue_stage_events'
        primary_key = CompositeKey('issue', 'stage_event_hash')

class AnalyticsCycleAnalyticsMergeRequestStageEvents(BaseModel):
    stage_event_hash = BigIntegerField(db_column='stage_event_hash_id')
    merge_request = BigIntegerField(db_column='merge_request_id')
    group = BigIntegerField(db_column='group_id')
    project = BigIntegerField(db_column='project_id')
    milestone = BigIntegerField(db_column='milestone_id', null=True)
    author = BigIntegerField(db_column='author_id', null=True)
    start_event_timestamp = DateTimeField()
    end_event_timestamp = DateTimeField(null=True)

    class Meta:
        db_table = 'analytics_cycle_analytics_merge_request_stage_events'
        primary_key = CompositeKey('merge_request', 'stage_event_hash')

class AnalyticsCycleAnalyticsProjectValueStreams(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    name = TextField()

    class Meta:
        db_table = 'analytics_cycle_analytics_project_value_streams'
        indexes = (
            (('project', 'name'), True),
        )

class AnalyticsCycleAnalyticsProjectStages(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    relative_position = IntegerField(index=True, null=True)
    start_event_identifier = IntegerField()
    end_event_identifier = IntegerField()
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    start_event_label = ForeignKeyField(db_column='start_event_label_id', null=True, rel_model=Labels, related_name='labels_start_event_label_set', to_field='id')
    end_event_label = ForeignKeyField(db_column='end_event_label_id', null=True, rel_model=Labels, to_field='id')
    hidden = BooleanField()
    custom = BooleanField()
    name = CharField()
    project_value_stream = ForeignKeyField(db_column='project_value_stream_id', rel_model=AnalyticsCycleAnalyticsProjectValueStreams, to_field='id')
    stage_event_hash = ForeignKeyField(db_column='stage_event_hash_id', null=True, rel_model=AnalyticsCycleAnalyticsStageEventHashes, to_field='id')

    class Meta:
        db_table = 'analytics_cycle_analytics_project_stages'
        indexes = (
            (('name', 'project'), True),
        )

class AnalyticsDevopsAdoptionSegments(BaseModel):
    id = BigIntegerField(primary_key=True)
    last_recorded_at = DateTimeField(null=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    namespace = ForeignKeyField(db_column='namespace_id', null=True, rel_model=Namespaces, related_name='namespaces_namespace_set', to_field='id')
    display_namespace = ForeignKeyField(db_column='display_namespace_id', null=True, rel_model=Namespaces, to_field='id')

    class Meta:
        db_table = 'analytics_devops_adoption_segments'
        indexes = (
            (('namespace', 'display_namespace'), True),
        )

class AnalyticsDevopsAdoptionSnapshots(BaseModel):
    id = BigIntegerField(primary_key=True)
    recorded_at = DateTimeField()
    issue_opened = BooleanField()
    merge_request_opened = BooleanField()
    merge_request_approved = BooleanField()
    runner_configured = BooleanField()
    pipeline_succeeded = BooleanField()
    deploy_succeeded = BooleanField()
    security_scan_succeeded = BooleanField()
    end_time = DateTimeField()
    total_projects_count = IntegerField(null=True)
    code_owners_used_count = IntegerField(null=True)
    namespace = ForeignKeyField(db_column='namespace_id', null=True, rel_model=Namespaces, to_field='id')
    sast_enabled_count = IntegerField(null=True)
    dast_enabled_count = IntegerField(null=True)
    dependency_scanning_enabled_count = IntegerField(null=True)
    coverage_fuzzing_enabled_count = IntegerField(null=True)
    vulnerability_management_used_count = IntegerField(null=True)

    class Meta:
        db_table = 'analytics_devops_adoption_snapshots'
        indexes = (
            (('end_time', 'namespace'), False),
            (('end_time', 'namespace'), False),
            (('recorded_at', 'namespace'), False),
        )

class ProgrammingLanguages(BaseModel):
    name = CharField(unique=True)
    color = CharField()
    created_at = DateTimeField()

    class Meta:
        db_table = 'programming_languages'

class AnalyticsLanguageTrendRepositoryLanguages(BaseModel):
    file_count = IntegerField()
    programming_language = ForeignKeyField(db_column='programming_language_id', rel_model=ProgrammingLanguages, to_field='id')
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    loc = IntegerField()
    bytes = IntegerField()
    percentage = IntegerField()
    snapshot_date = DateField()

    class Meta:
        db_table = 'analytics_language_trend_repository_languages'
        indexes = (
            (('programming_language', 'project', 'snapshot_date'), True),
        )
        primary_key = CompositeKey('programming_language', 'project', 'snapshot_date')

class AnalyticsUsageTrendsMeasurements(BaseModel):
    id = BigIntegerField(primary_key=True)
    count = BigIntegerField()
    recorded_at = DateTimeField()
    identifier = IntegerField()

    class Meta:
        db_table = 'analytics_usage_trends_measurements'
        indexes = (
            (('recorded_at', 'identifier'), True),
        )

class Appearances(BaseModel):
    title = CharField()
    description = TextField()
    logo = CharField(null=True)
    updated_by = IntegerField(null=True)
    header_logo = CharField(null=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    description_html = TextField(null=True)
    cached_markdown_version = IntegerField(null=True)
    new_project_guidelines = TextField(null=True)
    new_project_guidelines_html = TextField(null=True)
    header_message = TextField(null=True)
    header_message_html = TextField(null=True)
    footer_message = TextField(null=True)
    footer_message_html = TextField(null=True)
    message_background_color = TextField(null=True)
    message_font_color = TextField(null=True)
    favicon = CharField(null=True)
    email_header_and_footer_enabled = BooleanField()
    profile_image_guidelines = TextField(null=True)
    profile_image_guidelines_html = TextField(null=True)

    class Meta:
        db_table = 'appearances'

class ApplicationSettings(BaseModel):
    default_projects_limit = IntegerField(null=True)
    signup_enabled = BooleanField(null=True)
    gravatar_enabled = BooleanField(null=True)
    sign_in_text = TextField(null=True)
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    home_page_url = CharField(null=True)
    default_branch_protection = IntegerField(null=True)
    help_text = TextField(null=True)
    restricted_visibility_levels = TextField(null=True)
    version_check_enabled = BooleanField(null=True)
    max_attachment_size = IntegerField()
    default_project_visibility = IntegerField()
    default_snippet_visibility = IntegerField()
    user_oauth_applications = BooleanField(null=True)
    after_sign_out_path = CharField(null=True)
    session_expire_delay = IntegerField()
    import_sources = TextField(null=True)
    help_page_text = TextField(null=True)
    shared_runners_enabled = BooleanField()
    max_artifacts_size = IntegerField()
    runners_registration_token = CharField(null=True)
    max_pages_size = IntegerField()
    require_two_factor_authentication = BooleanField(null=True)
    two_factor_grace_period = IntegerField(null=True)
    metrics_enabled = BooleanField(null=True)
    metrics_host = CharField(null=True)
    metrics_pool_size = IntegerField(null=True)
    metrics_timeout = IntegerField(null=True)
    metrics_method_call_threshold = IntegerField(null=True)
    recaptcha_enabled = BooleanField(null=True)
    metrics_port = IntegerField(null=True)
    akismet_enabled = BooleanField(null=True)
    metrics_sample_interval = IntegerField(null=True)
    email_author_in_body = BooleanField(null=True)
    default_group_visibility = IntegerField(null=True)
    repository_checks_enabled = BooleanField(null=True)
    shared_runners_text = TextField(null=True)
    metrics_packet_size = IntegerField(null=True)
    disabled_oauth_sign_in_sources = TextField(null=True)
    health_check_access_token = CharField(null=True)
    send_user_confirmation_email = BooleanField(null=True)
    container_registry_token_expire_delay = IntegerField(null=True)
    after_sign_up_text = TextField(null=True)
    user_default_external = BooleanField()
    elasticsearch_indexing = BooleanField()
    elasticsearch_search = BooleanField()
    repository_storages = CharField(null=True)
    enabled_git_access_protocol = CharField(null=True)
    usage_ping_enabled = BooleanField()
    sign_in_text_html = TextField(null=True)
    help_page_text_html = TextField(null=True)
    shared_runners_text_html = TextField(null=True)
    after_sign_up_text_html = TextField(null=True)
    rsa_key_restriction = IntegerField()
    dsa_key_restriction = IntegerField()
    ecdsa_key_restriction = IntegerField()
    ed25519_key_restriction = IntegerField()
    housekeeping_enabled = BooleanField()
    housekeeping_bitmaps_enabled = BooleanField()
    housekeeping_incremental_repack_period = IntegerField()
    housekeeping_full_repack_period = IntegerField()
    housekeeping_gc_period = IntegerField()
    html_emails_enabled = BooleanField(null=True)
    plantuml_url = CharField(null=True)
    plantuml_enabled = BooleanField(null=True)
    shared_runners_minutes = IntegerField()
    repository_size_limit = BigIntegerField(null=True)
    terminal_max_session_time = IntegerField()
    unique_ips_limit_per_user = IntegerField(null=True)
    unique_ips_limit_time_window = IntegerField(null=True)
    unique_ips_limit_enabled = BooleanField()
    default_artifacts_expire_in = CharField()
    elasticsearch_url = CharField(null=True)
    elasticsearch_aws = BooleanField()
    elasticsearch_aws_region = CharField(null=True)
    elasticsearch_aws_access_key = CharField(null=True)
    geo_status_timeout = IntegerField(null=True)
    uuid = CharField(null=True)
    polling_interval_multiplier = DecimalField()
    cached_markdown_version = IntegerField(null=True)
    check_namespace_plan = BooleanField()
    mirror_max_delay = IntegerField()
    mirror_max_capacity = IntegerField()
    mirror_capacity_threshold = IntegerField()
    prometheus_metrics_enabled = BooleanField()
    authorized_keys_enabled = BooleanField()
    help_page_hide_commercial_content = BooleanField(null=True)
    help_page_support_url = CharField(null=True)
    slack_app_enabled = BooleanField(null=True)
    slack_app = CharField(db_column='slack_app_id', null=True)
    performance_bar_allowed_group = IntegerField(db_column='performance_bar_allowed_group_id', null=True)
    allow_group_owners_to_manage_ldap = BooleanField()
    hashed_storage_enabled = BooleanField()
    project_export_enabled = BooleanField()
    auto_devops_enabled = BooleanField()
    throttle_unauthenticated_enabled = BooleanField()
    throttle_unauthenticated_requests_per_period = IntegerField()
    throttle_unauthenticated_period_in_seconds = IntegerField()
    throttle_authenticated_api_enabled = BooleanField()
    throttle_authenticated_api_requests_per_period = IntegerField()
    throttle_authenticated_api_period_in_seconds = IntegerField()
    throttle_authenticated_web_enabled = BooleanField()
    throttle_authenticated_web_requests_per_period = IntegerField()
    throttle_authenticated_web_period_in_seconds = IntegerField()
    gitaly_timeout_default = IntegerField()
    gitaly_timeout_medium = IntegerField()
    gitaly_timeout_fast = IntegerField()
    mirror_available = BooleanField()
    password_authentication_enabled_for_web = BooleanField(null=True)
    password_authentication_enabled_for_git = BooleanField()
    auto_devops_domain = CharField(null=True)
    external_authorization_service_enabled = BooleanField()
    external_authorization_service_url = CharField(null=True)
    external_authorization_service_default_label = CharField(null=True)
    pages_domain_verification_enabled = BooleanField()
    user_default_internal_regex = CharField(null=True)
    external_authorization_service_timeout = FloatField(null=True)
    external_auth_client_cert = TextField(null=True)
    encrypted_external_auth_client_key = TextField(null=True)
    encrypted_external_auth_client_key_iv = CharField(null=True)
    encrypted_external_auth_client_key_pass = CharField(null=True)
    encrypted_external_auth_client_key_pass_iv = CharField(null=True)
    email_additional_text = CharField(null=True)
    enforce_terms = BooleanField(null=True)
    file_template_project = ForeignKeyField(db_column='file_template_project_id', null=True, rel_model=Projects, to_field='id')
    pseudonymizer_enabled = BooleanField()
    hide_third_party_offers = BooleanField()
    snowplow_enabled = BooleanField()
    snowplow_collector_hostname = CharField(null=True)
    snowplow_cookie_domain = CharField(null=True)
    web_ide_clientside_preview_enabled = BooleanField()
    user_show_add_ssh_key_message = BooleanField()
    custom_project_templates_group = ForeignKeyField(db_column='custom_project_templates_group_id', null=True, rel_model=Namespaces, to_field='id')
    usage_stats_set_by_user = ForeignKeyField(db_column='usage_stats_set_by_user_id', null=True, rel_model=Users, to_field='id')
    receive_max_input_size = IntegerField(null=True)
    diff_max_patch_bytes = IntegerField()
    archive_builds_in_seconds = IntegerField(null=True)
    commit_email_hostname = CharField(null=True)
    protected_ci_variables = BooleanField()
    runners_registration_token_encrypted = CharField(null=True)
    local_markdown_version = IntegerField()
    first_day_of_week = IntegerField()
    elasticsearch_limit_indexing = BooleanField()
    default_project_creation = IntegerField()
    lets_encrypt_notification_email = CharField(null=True)
    lets_encrypt_terms_of_service_accepted = BooleanField()
    geo_node_allowed_ips = CharField(null=True)
    elasticsearch_shards = IntegerField()
    elasticsearch_replicas = IntegerField()
    encrypted_lets_encrypt_private_key = TextField(null=True)
    encrypted_lets_encrypt_private_key_iv = TextField(null=True)
    required_instance_ci_template = CharField(null=True)
    dns_rebinding_protection_enabled = BooleanField()
    default_project_deletion_protection = BooleanField()
    grafana_enabled = BooleanField()
    lock_memberships_to_ldap = BooleanField()
    time_tracking_limit_to_hours = BooleanField()
    grafana_url = CharField()
    login_recaptcha_protection_enabled = BooleanField()
    outbound_local_requests_whitelist = UnknownField()  # ARRAY
    raw_blob_request_limit = IntegerField()
    allow_local_requests_from_web_hooks_and_services = BooleanField()
    allow_local_requests_from_system_hooks = BooleanField()
    instance_administration_project = ForeignKeyField(db_column='instance_administration_project_id', null=True, rel_model=Projects, related_name='projects_instance_administration_project_set', to_field='id')
    asset_proxy_enabled = BooleanField()
    asset_proxy_url = CharField(null=True)
    encrypted_asset_proxy_secret_key = TextField(null=True)
    encrypted_asset_proxy_secret_key_iv = CharField(null=True)
    static_objects_external_storage_url = CharField(null=True)
    static_objects_external_storage_auth_token = CharField(null=True)
    max_personal_access_token_lifetime = IntegerField(null=True)
    throttle_protected_paths_enabled = BooleanField()
    throttle_protected_paths_requests_per_period = IntegerField()
    throttle_protected_paths_period_in_seconds = IntegerField()
    protected_paths = UnknownField(null=True)  # ARRAY
    throttle_incident_management_notification_enabled = BooleanField()
    throttle_incident_management_notification_period_in_seconds = IntegerField(null=True)
    throttle_incident_management_notification_per_period = IntegerField(null=True)
    push_event_hooks_limit = IntegerField()
    push_event_activities_limit = IntegerField()
    custom_http_clone_url_root = CharField(null=True)
    deletion_adjourned_period = IntegerField()
    license_trial_ends_on = DateField(null=True)
    eks_integration_enabled = BooleanField()
    eks_account = CharField(db_column='eks_account_id', null=True)
    eks_access_key = CharField(db_column='eks_access_key_id', null=True)
    encrypted_eks_secret_access_key_iv = CharField(null=True)
    encrypted_eks_secret_access_key = TextField(null=True)
    snowplow_app = CharField(db_column='snowplow_app_id', null=True)
    productivity_analytics_start_date = DateTimeField(null=True)
    default_ci_config_path = CharField(null=True)
    sourcegraph_enabled = BooleanField()
    sourcegraph_url = CharField(null=True)
    sourcegraph_public_only = BooleanField()
    snippet_size_limit = BigIntegerField()
    minimum_password_length = IntegerField()
    encrypted_akismet_api_key = TextField(null=True)
    encrypted_akismet_api_key_iv = CharField(null=True)
    encrypted_elasticsearch_aws_secret_access_key = TextField(null=True)
    encrypted_elasticsearch_aws_secret_access_key_iv = CharField(null=True)
    encrypted_recaptcha_private_key = TextField(null=True)
    encrypted_recaptcha_private_key_iv = CharField(null=True)
    encrypted_recaptcha_site_key = TextField(null=True)
    encrypted_recaptcha_site_key_iv = CharField(null=True)
    encrypted_slack_app_secret = TextField(null=True)
    encrypted_slack_app_secret_iv = CharField(null=True)
    encrypted_slack_app_verification_token = TextField(null=True)
    encrypted_slack_app_verification_token_iv = CharField(null=True)
    force_pages_access_control = BooleanField()
    updating_name_disabled_for_users = BooleanField()
    instance_administrators_group = ForeignKeyField(db_column='instance_administrators_group_id', null=True, rel_model=Namespaces, related_name='namespaces_instance_administrators_group_set', to_field='id')
    elasticsearch_indexed_field_length_limit = IntegerField()
    elasticsearch_max_bulk_size_mb = IntegerField()
    elasticsearch_max_bulk_concurrency = IntegerField()
    disable_overriding_approvers_per_merge_request = BooleanField()
    prevent_merge_requests_author_approval = BooleanField()
    prevent_merge_requests_committers_approval = BooleanField()
    email_restrictions_enabled = BooleanField()
    email_restrictions = TextField(null=True)
    npm_package_requests_forwarding = BooleanField()
    container_expiration_policies_enable_historic_entries = BooleanField()
    issues_create_limit = IntegerField()
    push_rule = ForeignKeyField(db_column='push_rule_id', null=True, rel_model=PushRules, to_field='id', unique=True)
    group_owners_can_manage_default_branch_protection = BooleanField()
    container_registry_vendor = TextField()
    container_registry_version = TextField()
    container_registry_features = UnknownField()  # ARRAY
    spam_check_endpoint_url = TextField(null=True)
    spam_check_endpoint_enabled = BooleanField()
    elasticsearch_pause_indexing = BooleanField()
    repository_storages_weighted = JSONField()
    max_import_size = IntegerField()
    enforce_pat_expiration = BooleanField()
    compliance_frameworks = UnknownField()  # ARRAY
    notify_on_unknown_sign_in = BooleanField()
    default_branch_name = TextField(null=True)
    project_import_limit = IntegerField()
    project_export_limit = IntegerField()
    project_download_export_limit = IntegerField()
    group_import_limit = IntegerField()
    group_export_limit = IntegerField()
    group_download_export_limit = IntegerField()
    maintenance_mode = BooleanField()
    maintenance_mode_message = TextField(null=True)
    wiki_page_max_content_bytes = BigIntegerField()
    elasticsearch_indexed_file_size_limit_kb = IntegerField()
    enforce_namespace_storage_limit = BooleanField()
    container_registry_delete_tags_service_timeout = IntegerField()
    kroki_url = CharField(null=True)
    kroki_enabled = BooleanField(null=True)
    elasticsearch_client_request_timeout = IntegerField()
    gitpod_enabled = BooleanField()
    gitpod_url = TextField(null=True)
    abuse_notification_email = CharField(null=True)
    require_admin_approval_after_user_signup = BooleanField()
    help_page_documentation_base_url = TextField(null=True)
    automatic_purchased_storage_allocation = BooleanField()
    encrypted_ci_jwt_signing_key = TextField(null=True)
    encrypted_ci_jwt_signing_key_iv = TextField(null=True)
    container_registry_expiration_policies_worker_capacity = IntegerField()
    elasticsearch_analyzers_smartcn_enabled = BooleanField()
    elasticsearch_analyzers_smartcn_search = BooleanField()
    elasticsearch_analyzers_kuromoji_enabled = BooleanField()
    elasticsearch_analyzers_kuromoji_search = BooleanField()
    secret_detection_token_revocation_enabled = BooleanField()
    secret_detection_token_revocation_url = TextField(null=True)
    encrypted_secret_detection_token_revocation_token = TextField(null=True)
    encrypted_secret_detection_token_revocation_token_iv = TextField(null=True)
    domain_denylist_enabled = BooleanField(null=True)
    domain_denylist = TextField(null=True)
    domain_allowlist = TextField(null=True)
    new_user_signups_cap = IntegerField(null=True)
    encrypted_cloud_license_auth_token = TextField(null=True)
    encrypted_cloud_license_auth_token_iv = TextField(null=True)
    secret_detection_revocation_token_types_url = TextField(null=True)
    disable_feed_token = BooleanField()
    personal_access_token_prefix = TextField(null=True)
    rate_limiting_response_text = TextField(null=True)
    invisible_captcha_enabled = BooleanField()
    container_registry_cleanup_tags_service_max_list_size = IntegerField()
    enforce_ssh_key_expiration = BooleanField()
    git_two_factor_session_expiry = IntegerField()
    keep_latest_artifact = BooleanField()
    notes_create_limit = IntegerField()
    notes_create_limit_allowlist = UnknownField()  # ARRAY
    kroki_formats = JSONField()
    in_product_marketing_emails_enabled = BooleanField()
    asset_proxy_whitelist = TextField(null=True)
    admin_mode = BooleanField()
    delayed_project_removal = BooleanField()
    lock_delayed_project_removal = BooleanField()
    external_pipeline_validation_service_timeout = IntegerField(null=True)
    encrypted_external_pipeline_validation_service_token = TextField(null=True)
    encrypted_external_pipeline_validation_service_token_iv = TextField(null=True)
    external_pipeline_validation_service_url = TextField(null=True)
    throttle_unauthenticated_packages_api_requests_per_period = IntegerField()
    throttle_unauthenticated_packages_api_period_in_seconds = IntegerField()
    throttle_authenticated_packages_api_requests_per_period = IntegerField()
    throttle_authenticated_packages_api_period_in_seconds = IntegerField()
    throttle_unauthenticated_packages_api_enabled = BooleanField()
    throttle_authenticated_packages_api_enabled = BooleanField()
    deactivate_dormant_users = BooleanField()
    whats_new_variant = IntegerField(null=True)
    encrypted_spam_check_api_key = BlobField(null=True)
    encrypted_spam_check_api_key_iv = BlobField(null=True)
    floc_enabled = BooleanField()
    elasticsearch_username = TextField(null=True)
    encrypted_elasticsearch_password = BlobField(null=True)
    encrypted_elasticsearch_password_iv = BlobField(null=True)
    diff_max_lines = IntegerField()
    diff_max_files = IntegerField()
    valid_runner_registrars = UnknownField(null=True)  # ARRAY
    encrypted_mailgun_signing_key = BlobField(null=True)
    encrypted_mailgun_signing_key_iv = BlobField(null=True)
    mailgun_events_enabled = BooleanField()
    usage_ping_features_enabled = BooleanField()
    encrypted_customers_dot_jwt_signing_key = BlobField(null=True)
    encrypted_customers_dot_jwt_signing_key_iv = BlobField(null=True)
    pypi_package_requests_forwarding = BooleanField()
    throttle_unauthenticated_files_api_requests_per_period = IntegerField()
    throttle_unauthenticated_files_api_period_in_seconds = IntegerField()
    throttle_authenticated_files_api_requests_per_period = IntegerField()
    throttle_authenticated_files_api_period_in_seconds = IntegerField()
    throttle_unauthenticated_files_api_enabled = BooleanField()
    throttle_authenticated_files_api_enabled = BooleanField()
    max_yaml_size_bytes = BigIntegerField()
    max_yaml_depth = IntegerField()
    throttle_authenticated_git_lfs_requests_per_period = IntegerField()
    throttle_authenticated_git_lfs_period_in_seconds = IntegerField()
    throttle_authenticated_git_lfs_enabled = BooleanField()
    user_deactivation_emails_enabled = BooleanField()
    throttle_unauthenticated_api_enabled = BooleanField()
    throttle_unauthenticated_api_requests_per_period = IntegerField()
    throttle_unauthenticated_api_period_in_seconds = IntegerField()
    jobs_per_stage_page_size = IntegerField()
    sidekiq_job_limiter_mode = IntegerField()
    sidekiq_job_limiter_compression_threshold_bytes = IntegerField()
    sidekiq_job_limiter_limit_bytes = IntegerField()
    suggest_pipeline_enabled = BooleanField()
    throttle_unauthenticated_deprecated_api_requests_per_period = IntegerField()
    throttle_unauthenticated_deprecated_api_period_in_seconds = IntegerField()
    throttle_unauthenticated_deprecated_api_enabled = BooleanField()
    throttle_authenticated_deprecated_api_requests_per_period = IntegerField()
    throttle_authenticated_deprecated_api_period_in_seconds = IntegerField()
    throttle_authenticated_deprecated_api_enabled = BooleanField()
    dependency_proxy_ttl_group_policy_worker_capacity = IntegerField()

    class Meta:
        db_table = 'application_settings'

class ApprovalProjectRules(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    approvals_required = IntegerField()
    name = CharField()
    rule_type = IntegerField(index=True)
    scanners = UnknownField(null=True)  # ARRAY
    vulnerabilities_allowed = IntegerField()
    severity_levels = UnknownField()  # ARRAY
    report_type = IntegerField(index=True, null=True)

    class Meta:
        db_table = 'approval_project_rules'

class ApprovalMergeRequestRules(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField(index=True)
    updated_at = DateTimeField()
    merge_request = ForeignKeyField(db_column='merge_request_id', rel_model=MergeRequests, to_field='id')
    approvals_required = IntegerField()
    name = CharField()
    rule_type = IntegerField()
    report_type = IntegerField(null=True)
    section = TextField(null=True)
    modified_from_project_rule = BooleanField()

    class Meta:
        db_table = 'approval_merge_request_rules'
        indexes = (
            (('merge_request', 'name', 'section'), True),
            (('merge_request', 'rule_type'), True),
            (('name', 'merge_request'), True),
        )

class ApprovalMergeRequestRuleSources(BaseModel):
    id = BigIntegerField(primary_key=True)
    approval_merge_request_rule = ForeignKeyField(db_column='approval_merge_request_rule_id', rel_model=ApprovalMergeRequestRules, to_field='id', unique=True)
    approval_project_rule = ForeignKeyField(db_column='approval_project_rule_id', rel_model=ApprovalProjectRules, to_field='id')

    class Meta:
        db_table = 'approval_merge_request_rule_sources'

class ApprovalMergeRequestRulesApprovedApprovers(BaseModel):
    id = BigIntegerField(primary_key=True)
    approval_merge_request_rule = ForeignKeyField(db_column='approval_merge_request_rule_id', rel_model=ApprovalMergeRequestRules, to_field='id')
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')

    class Meta:
        db_table = 'approval_merge_request_rules_approved_approvers'
        indexes = (
            (('approval_merge_request_rule', 'user'), True),
        )

class ApprovalMergeRequestRulesGroups(BaseModel):
    id = BigIntegerField(primary_key=True)
    approval_merge_request_rule = ForeignKeyField(db_column='approval_merge_request_rule_id', rel_model=ApprovalMergeRequestRules, to_field='id')
    group = ForeignKeyField(db_column='group_id', rel_model=Namespaces, to_field='id')

    class Meta:
        db_table = 'approval_merge_request_rules_groups'
        indexes = (
            (('approval_merge_request_rule', 'group'), True),
        )

class ApprovalMergeRequestRulesUsers(BaseModel):
    id = BigIntegerField(primary_key=True)
    approval_merge_request_rule = ForeignKeyField(db_column='approval_merge_request_rule_id', rel_model=ApprovalMergeRequestRules, to_field='id')
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')

    class Meta:
        db_table = 'approval_merge_request_rules_users'
        indexes = (
            (('approval_merge_request_rule', 'user'), True),
        )

class ApprovalProjectRulesGroups(BaseModel):
    id = BigIntegerField(primary_key=True)
    approval_project_rule = ForeignKeyField(db_column='approval_project_rule_id', rel_model=ApprovalProjectRules, to_field='id')
    group = ForeignKeyField(db_column='group_id', rel_model=Namespaces, to_field='id')

    class Meta:
        db_table = 'approval_project_rules_groups'
        indexes = (
            (('approval_project_rule', 'group'), True),
        )

class ProtectedBranches(BaseModel):
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    name = CharField()
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    code_owner_approval_required = BooleanField()
    allow_force_push = BooleanField()

    class Meta:
        db_table = 'protected_branches'
        indexes = (
            (('project', 'code_owner_approval_required'), False),
        )

class ApprovalProjectRulesProtectedBranches(BaseModel):
    approval_project_rule = ForeignKeyField(db_column='approval_project_rule_id', rel_model=ApprovalProjectRules, to_field='id')
    protected_branch = ForeignKeyField(db_column='protected_branch_id', rel_model=ProtectedBranches, to_field='id')

    class Meta:
        db_table = 'approval_project_rules_protected_branches'
        indexes = (
            (('approval_project_rule', 'protected_branch'), True),
        )
        primary_key = CompositeKey('approval_project_rule', 'protected_branch')

class ApprovalProjectRulesUsers(BaseModel):
    id = BigIntegerField(primary_key=True)
    approval_project_rule = ForeignKeyField(db_column='approval_project_rule_id', rel_model=ApprovalProjectRules, to_field='id')
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')

    class Meta:
        db_table = 'approval_project_rules_users'
        indexes = (
            (('approval_project_rule', 'user'), True),
        )

class Approvals(BaseModel):
    merge_request = ForeignKeyField(db_column='merge_request_id', rel_model=MergeRequests, to_field='id')
    user = IntegerField(db_column='user_id')
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'approvals'
        indexes = (
            (('merge_request', 'created_at'), False),
            (('merge_request', 'user'), True),
        )

class ApproverGroups(BaseModel):
    target = IntegerField(db_column='target_id')
    target_type = CharField()
    group = ForeignKeyField(db_column='group_id', rel_model=Namespaces, to_field='id')
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'approver_groups'
        indexes = (
            (('target', 'target_type'), False),
        )

class Approvers(BaseModel):
    target = IntegerField(db_column='target_id')
    target_type = CharField(null=True)
    user = IntegerField(db_column='user_id', index=True)
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'approvers'
        indexes = (
            (('target', 'target_type'), False),
        )

class ArInternalMetadata(BaseModel):
    key = CharField(primary_key=True)
    value = CharField(null=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'ar_internal_metadata'

class AtlassianIdentities(BaseModel):
    user = ForeignKeyField(db_column='user_id', primary_key=True, rel_model=Users, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    expires_at = DateTimeField(null=True)
    extern_uid = TextField(unique=True)
    encrypted_token = BlobField(null=True)
    encrypted_token_iv = BlobField(null=True)
    encrypted_refresh_token = BlobField(null=True)
    encrypted_refresh_token_iv = BlobField(null=True)

    class Meta:
        db_table = 'atlassian_identities'

class AuditEvents(BaseModel):
    id = BigIntegerField()
    author = IntegerField(db_column='author_id')
    entity = IntegerField(db_column='entity_id')
    entity_type = CharField()
    details = TextField(null=True)
    ip_address = UnknownField(null=True)  # inet
    author_name = TextField(null=True)
    entity_path = TextField(null=True)
    target_details = TextField(null=True)
    created_at = DateTimeField()
    target_type = TextField(null=True)
    target = BigIntegerField(db_column='target_id', null=True)

    class Meta:
        db_table = 'audit_events'
        primary_key = CompositeKey('created_at', 'id')

class AuditEventsExternalAuditEventDestinations(BaseModel):
    id = BigIntegerField(primary_key=True)
    namespace = ForeignKeyField(db_column='namespace_id', rel_model=Namespaces, to_field='id')
    destination_url = TextField()
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'audit_events_external_audit_event_destinations'
        indexes = (
            (('namespace', 'destination_url'), True),
        )

class AuthenticationEvents(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    user = ForeignKeyField(db_column='user_id', null=True, rel_model=Users, to_field='id')
    result = IntegerField()
    ip_address = UnknownField(null=True)  # inet
    provider = TextField(index=True)
    user_name = TextField()

    class Meta:
        db_table = 'authentication_events'
        indexes = (
            (('created_at', 'user', 'provider'), False),
        )

class AwardEmoji(BaseModel):
    name = CharField(null=True)
    user = IntegerField(db_column='user_id', null=True)
    awardable = IntegerField(db_column='awardable_id', null=True)
    awardable_type = CharField(null=True)
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'award_emoji'
        indexes = (
            (('awardable', 'awardable_type'), False),
            (('name', 'user', 'awardable', 'awardable_type'), False),
        )

class AwsRoles(BaseModel):
    user = ForeignKeyField(db_column='user_id', primary_key=True, rel_model=Users, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    role_arn = CharField(null=True)
    role_external = CharField(db_column='role_external_id', unique=True)
    region = TextField(null=True)

    class Meta:
        db_table = 'aws_roles'

class BackgroundMigrationJobs(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    status = IntegerField()
    class_name = TextField()
    arguments = JSONField()

    class Meta:
        db_table = 'background_migration_jobs'
        indexes = (
            (('class_name', 'arguments'), False),
            (('id', 'status', 'class_name'), False),
        )

class Badges(BaseModel):
    link_url = CharField()
    image_url = CharField()
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    group = ForeignKeyField(db_column='group_id', null=True, rel_model=Namespaces, to_field='id')
    type = CharField()
    name = CharField(null=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'badges'

class BannedUsers(BaseModel):
    created_at = DateTimeField()
    updated_at = DateTimeField()
    user = ForeignKeyField(db_column='user_id', primary_key=True, rel_model=Users, to_field='id')

    class Meta:
        db_table = 'banned_users'

class BatchedBackgroundMigrations(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    min_value = BigIntegerField()
    max_value = BigIntegerField()
    batch_size = IntegerField()
    sub_batch_size = IntegerField()
    interval = IntegerField()
    status = IntegerField()
    job_class_name = TextField()
    batch_class_name = TextField()
    table_name = TextField()
    column_name = TextField()
    job_arguments = JSONField()
    total_tuple_count = BigIntegerField(null=True)
    pause_ms = IntegerField()

    class Meta:
        db_table = 'batched_background_migrations'
        indexes = (
            (('job_class_name', 'table_name', 'column_name', 'job_arguments'), True),
        )

class BatchedBackgroundMigrationJobs(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    started_at = DateTimeField(null=True)
    finished_at = DateTimeField(null=True)
    batched_background_migration = ForeignKeyField(db_column='batched_background_migration_id', rel_model=BatchedBackgroundMigrations, to_field='id')
    min_value = BigIntegerField()
    max_value = BigIntegerField()
    batch_size = IntegerField()
    sub_batch_size = IntegerField()
    status = IntegerField()
    attempts = IntegerField()
    metrics = JSONField()
    pause_ms = IntegerField()

    class Meta:
        db_table = 'batched_background_migration_jobs'
        indexes = (
            (('batched_background_migration', 'max_value'), False),
            (('batched_background_migration', 'status'), False),
            (('finished_at', 'batched_background_migration'), False),
            (('id', 'batched_background_migration'), False),
        )

class Boards(BaseModel):
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    name = CharField()
    milestone = IntegerField(db_column='milestone_id', index=True, null=True)
    group = ForeignKeyField(db_column='group_id', null=True, rel_model=Namespaces, to_field='id')
    weight = IntegerField(null=True)
    hide_backlog_list = BooleanField()
    hide_closed_list = BooleanField()
    iteration = BigIntegerField(db_column='iteration_id', index=True, null=True)
    iteration_cadence = ForeignKeyField(db_column='iteration_cadence_id', null=True, rel_model=IterationsCadences, to_field='id')

    class Meta:
        db_table = 'boards'

class BoardAssignees(BaseModel):
    board = ForeignKeyField(db_column='board_id', rel_model=Boards, to_field='id')
    assignee = ForeignKeyField(db_column='assignee_id', rel_model=Users, to_field='id')

    class Meta:
        db_table = 'board_assignees'
        indexes = (
            (('board', 'assignee'), True),
        )

class BoardGroupRecentVisits(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    user = ForeignKeyField(db_column='user_id', null=True, rel_model=Users, to_field='id')
    board = ForeignKeyField(db_column='board_id', null=True, rel_model=Boards, to_field='id')
    group = ForeignKeyField(db_column='group_id', null=True, rel_model=Namespaces, to_field='id')

    class Meta:
        db_table = 'board_group_recent_visits'
        indexes = (
            (('user', 'board', 'group'), True),
        )

class BoardLabels(BaseModel):
    board = ForeignKeyField(db_column='board_id', rel_model=Boards, to_field='id')
    label = ForeignKeyField(db_column='label_id', rel_model=Labels, to_field='id')

    class Meta:
        db_table = 'board_labels'
        indexes = (
            (('board', 'label'), True),
        )

class BoardProjectRecentVisits(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    user = ForeignKeyField(db_column='user_id', null=True, rel_model=Users, to_field='id')
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    board = ForeignKeyField(db_column='board_id', null=True, rel_model=Boards, to_field='id')

    class Meta:
        db_table = 'board_project_recent_visits'
        indexes = (
            (('board', 'user', 'project'), True),
        )

class BoardUserPreferences(BaseModel):
    id = BigIntegerField(primary_key=True)
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')
    board = ForeignKeyField(db_column='board_id', rel_model=Boards, to_field='id')
    hide_labels = BooleanField(null=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'board_user_preferences'
        indexes = (
            (('user', 'board'), True),
        )

class BoardsEpicBoards(BaseModel):
    id = BigIntegerField(primary_key=True)
    hide_backlog_list = BooleanField()
    hide_closed_list = BooleanField()
    group = ForeignKeyField(db_column='group_id', rel_model=Namespaces, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    name = TextField()

    class Meta:
        db_table = 'boards_epic_boards'

class BoardsEpicBoardLabels(BaseModel):
    id = BigIntegerField(primary_key=True)
    epic_board = ForeignKeyField(db_column='epic_board_id', rel_model=BoardsEpicBoards, to_field='id')
    label = ForeignKeyField(db_column='label_id', rel_model=Labels, to_field='id')

    class Meta:
        db_table = 'boards_epic_board_labels'

class BoardsEpicBoardPositions(BaseModel):
    id = BigIntegerField(primary_key=True)
    epic_board = ForeignKeyField(db_column='epic_board_id', rel_model=BoardsEpicBoards, to_field='id')
    epic = ForeignKeyField(db_column='epic_id', rel_model=Epics, to_field='id')
    relative_position = IntegerField(null=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'boards_epic_board_positions'
        indexes = (
            (('epic_board', 'epic'), True),
            (('epic_board', 'epic', 'relative_position'), False),
        )

class BoardsEpicBoardRecentVisits(BaseModel):
    id = BigIntegerField(primary_key=True)
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')
    epic_board = ForeignKeyField(db_column='epic_board_id', rel_model=BoardsEpicBoards, to_field='id')
    group = ForeignKeyField(db_column='group_id', rel_model=Namespaces, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'boards_epic_board_recent_visits'
        indexes = (
            (('group', 'user', 'epic_board'), True),
        )

class BoardsEpicLists(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    epic_board = ForeignKeyField(db_column='epic_board_id', rel_model=BoardsEpicBoards, to_field='id')
    label = ForeignKeyField(db_column='label_id', null=True, rel_model=Labels, to_field='id')
    position = IntegerField(null=True)
    list_type = IntegerField()

    class Meta:
        db_table = 'boards_epic_lists'
        indexes = (
            (('epic_board', 'label'), True),
        )

class BoardsEpicListUserPreferences(BaseModel):
    id = BigIntegerField(primary_key=True)
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')
    epic_list = ForeignKeyField(db_column='epic_list_id', rel_model=BoardsEpicLists, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    collapsed = BooleanField()

    class Meta:
        db_table = 'boards_epic_list_user_preferences'
        indexes = (
            (('user', 'epic_list'), True),
        )

class BoardsEpicUserPreferences(BaseModel):
    id = BigIntegerField(primary_key=True)
    board = ForeignKeyField(db_column='board_id', rel_model=Boards, to_field='id')
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')
    epic = ForeignKeyField(db_column='epic_id', rel_model=Epics, to_field='id')
    collapsed = BooleanField()

    class Meta:
        db_table = 'boards_epic_user_preferences'
        indexes = (
            (('board', 'user', 'epic'), True),
        )

class BroadcastMessages(BaseModel):
    message = TextField()
    starts_at = DateTimeField()
    ends_at = DateTimeField()
    created_at = DateTimeField()
    updated_at = DateTimeField()
    color = CharField(null=True)
    font = CharField(null=True)
    message_html = TextField()
    cached_markdown_version = IntegerField(null=True)
    target_path = CharField(null=True)
    broadcast_type = IntegerField()
    dismissable = BooleanField(null=True)

    class Meta:
        db_table = 'broadcast_messages'
        indexes = (
            (('id', 'ends_at', 'broadcast_type'), False),
        )

class BulkImports(BaseModel):
    id = BigIntegerField(primary_key=True)
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')
    source_type = IntegerField()
    status = IntegerField()
    created_at = DateTimeField()
    updated_at = DateTimeField()
    source_version = TextField(null=True)

    class Meta:
        db_table = 'bulk_imports'

class BulkImportConfigurations(BaseModel):
    id = BigIntegerField(primary_key=True)
    bulk_import = ForeignKeyField(db_column='bulk_import_id', rel_model=BulkImports, to_field='id')
    encrypted_url = TextField(null=True)
    encrypted_url_iv = TextField(null=True)
    encrypted_access_token = TextField(null=True)
    encrypted_access_token_iv = TextField(null=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'bulk_import_configurations'

class BulkImportEntities(BaseModel):
    id = BigIntegerField(primary_key=True)
    bulk_import = ForeignKeyField(db_column='bulk_import_id', rel_model=BulkImports, to_field='id')
    parent = ForeignKeyField(db_column='parent_id', null=True, rel_model='self', to_field='id')
    namespace = ForeignKeyField(db_column='namespace_id', null=True, rel_model=Namespaces, to_field='id')
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    source_type = IntegerField()
    source_full_path = TextField()
    destination_name = TextField()
    destination_namespace = TextField()
    status = IntegerField()
    jid = TextField(null=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'bulk_import_entities'
        indexes = (
            (('bulk_import', 'status'), False),
        )

class BulkImportExports(BaseModel):
    id = BigIntegerField(primary_key=True)
    group = ForeignKeyField(db_column='group_id', null=True, rel_model=Namespaces, to_field='id')
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    status = IntegerField()
    relation = TextField()
    jid = TextField(null=True)
    error = TextField(null=True)

    class Meta:
        db_table = 'bulk_import_exports'
        indexes = (
            (('group', 'relation'), True),
            (('project', 'relation'), True),
        )

class BulkImportExportUploads(BaseModel):
    id = BigIntegerField(primary_key=True)
    export = ForeignKeyField(db_column='export_id', rel_model=BulkImportExports, to_field='id')
    updated_at = DateTimeField()
    export_file = TextField(null=True)

    class Meta:
        db_table = 'bulk_import_export_uploads'

class BulkImportFailures(BaseModel):
    id = BigIntegerField(primary_key=True)
    bulk_import_entity = ForeignKeyField(db_column='bulk_import_entity_id', rel_model=BulkImportEntities, to_field='id')
    created_at = DateTimeField()
    pipeline_class = TextField()
    exception_class = TextField()
    exception_message = TextField()
    correlation_id_value = TextField(index=True, null=True)
    pipeline_step = TextField(null=True)

    class Meta:
        db_table = 'bulk_import_failures'

class BulkImportTrackers(BaseModel):
    id = BigIntegerField(primary_key=True)
    bulk_import_entity = ForeignKeyField(db_column='bulk_import_entity_id', rel_model=BulkImportEntities, to_field='id')
    relation = TextField()
    next_page = TextField(null=True)
    has_next_page = BooleanField()
    jid = TextField(null=True)
    stage = IntegerField()
    status = IntegerField()

    class Meta:
        db_table = 'bulk_import_trackers'
        indexes = (
            (('bulk_import_entity', 'relation'), True),
        )

class Integrations(BaseModel):
    type = CharField(index=True, null=True)
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    active = BooleanField()
    properties = TextField(null=True)
    push_events = BooleanField(null=True)
    issues_events = BooleanField(null=True)
    merge_requests_events = BooleanField(null=True)
    tag_push_events = BooleanField(null=True)
    note_events = BooleanField()
    category = CharField()
    wiki_page_events = BooleanField(null=True)
    pipeline_events = BooleanField()
    confidential_issues_events = BooleanField()
    commit_events = BooleanField()
    job_events = BooleanField()
    confidential_note_events = BooleanField(null=True)
    deployment_events = BooleanField()
    comment_on_event_enabled = BooleanField()
    template = BooleanField(index=True, null=True)
    instance = BooleanField()
    comment_detail = IntegerField(null=True)
    inherit_from = ForeignKeyField(db_column='inherit_from_id', null=True, rel_model='self', to_field='id')
    alert_events = BooleanField(null=True)
    group = ForeignKeyField(db_column='group_id', null=True, rel_model=Namespaces, to_field='id')
    type_new = TextField(null=True)
    vulnerability_events = BooleanField()

    class Meta:
        db_table = 'integrations'
        indexes = (
            (('group', 'type'), True),
            (('project', 'type'), False),
            (('template', 'type'), True),
            (('type', 'id'), False),
            (('type', 'instance'), True),
            (('type', 'project'), True),
        )

class ChatNames(BaseModel):
    user = IntegerField(db_column='user_id')
    service = ForeignKeyField(db_column='service_id', rel_model=Integrations, to_field='id')
    team = CharField(db_column='team_id')
    team_domain = CharField(null=True)
    chat = CharField(db_column='chat_id')
    chat_name = CharField(null=True)
    last_used_at = DateTimeField(null=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'chat_names'
        indexes = (
            (('service', 'team', 'chat'), True),
            (('user', 'service'), True),
        )

class ChatTeams(BaseModel):
    namespace = ForeignKeyField(db_column='namespace_id', rel_model=Namespaces, to_field='id', unique=True)
    team = CharField(db_column='team_id', null=True)
    name = CharField(null=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'chat_teams'

class CiStages(BaseModel):
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    pipeline = ForeignKeyField(db_column='pipeline_id', null=True, rel_model=CiPipelines, to_field='id')
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    name = CharField(null=True)
    status = IntegerField(null=True)
    lock_version = IntegerField(null=True)
    position = IntegerField(null=True)
    id = BigIntegerField(primary_key=True)

    class Meta:
        db_table = 'ci_stages'
        indexes = (
            (('id', 'pipeline'), False),
            (('pipeline', 'name'), True),
            (('pipeline', 'position'), False),
        )

class CiResourceGroups(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    key = CharField()
    process_mode = IntegerField()

    class Meta:
        db_table = 'ci_resource_groups'
        indexes = (
            (('project', 'key'), True),
        )

class CiBuilds(BaseModel):
    status = CharField(null=True)
    finished_at = DateTimeField(null=True)
    trace = TextField(null=True)
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(index=True, null=True)
    started_at = DateTimeField(null=True)
    runner = IntegerField(db_column='runner_id', index=True, null=True)
    coverage = FloatField(null=True)
    commit = ForeignKeyField(db_column='commit_id', null=True, rel_model=CiPipelines, related_name='ci_pipelines_commit_set', to_field='id')
    name = CharField(null=True)
    options = TextField(null=True)
    allow_failure = BooleanField()
    stage = CharField(null=True)
    trigger_request = IntegerField(db_column='trigger_request_id', null=True)
    stage_idx = IntegerField(null=True)
    tag = BooleanField(null=True)
    ref = CharField(null=True)
    user = IntegerField(db_column='user_id', index=True, null=True)
    type = CharField(null=True)
    target_url = CharField(null=True)
    description = CharField(null=True)
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    erased_by = IntegerField(db_column='erased_by_id', null=True)
    erased_at = DateTimeField(null=True)
    artifacts_expire_at = DateTimeField(null=True)
    environment = CharField(null=True)
    when = CharField(null=True)
    yaml_variables = TextField(null=True)
    queued_at = DateTimeField(index=True, null=True)
    token = CharField(null=True, unique=True)
    lock_version = IntegerField(null=True)
    coverage_regex = CharField(null=True)
    auto_canceled_by = ForeignKeyField(db_column='auto_canceled_by_id', null=True, rel_model=CiPipelines, to_field='id')
    retried = BooleanField(null=True)
    protected = BooleanField(null=True)
    failure_reason = IntegerField(null=True)
    scheduled_at = DateTimeField(index=True, null=True)
    token_encrypted = CharField(null=True, unique=True)
    upstream_pipeline = ForeignKeyField(db_column='upstream_pipeline_id', null=True, rel_model=CiPipelines, related_name='ci_pipelines_upstream_pipeline_set', to_field='id')
    resource_group = ForeignKeyField(db_column='resource_group_id', null=True, rel_model=CiResourceGroups, to_field='id')
    waiting_for_resource_at = DateTimeField(null=True)
    processed = BooleanField(null=True)
    scheduling_type = IntegerField(null=True)
    id = BigIntegerField(primary_key=True)
    stage_id = ForeignKeyField(db_column='stage_id', null=True, rel_model=CiStages, to_field='id')

    class Meta:
        db_table = 'ci_builds'
        indexes = (
            (('created_at', 'name', 'user'), False),
            (('created_at', 'project', 'status'), False),
            (('created_at', 'user'), False),
            (('id', 'commit', 'artifacts_expire_at'), False),
            (('name', 'id'), False),
            (('name', 'ref', 'project'), False),
            (('name', 'user'), False),
            (('project', 'id'), False),
            (('ref', 'type', 'commit', 'name'), False),
            (('resource_group', 'id'), False),
            (('runner', 'id'), False),
            (('runner', 'project', 'id'), False),
            (('stage_idx', 'commit', 'created_at'), False),
            (('status', 'commit', 'resource_group'), False),
            (('status', 'project'), False),
            (('type', 'commit', 'ref'), False),
            (('type', 'status', 'commit'), False),
            (('type', 'status', 'runner'), False),
        )

class CiBuildNeeds(BaseModel):
    name = TextField()
    artifacts = BooleanField()
    optional = BooleanField()
    build = ForeignKeyField(db_column='build_id', rel_model=CiBuilds, to_field='id')

    class Meta:
        db_table = 'ci_build_needs'
        indexes = (
            (('name', 'build'), True),
        )

class CiBuildPendingStates(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    build = ForeignKeyField(db_column='build_id', rel_model=CiBuilds, to_field='id', unique=True)
    state = IntegerField(null=True)
    failure_reason = IntegerField(null=True)
    trace_checksum = BlobField(null=True)
    trace_bytesize = BigIntegerField(null=True)

    class Meta:
        db_table = 'ci_build_pending_states'

class CiBuildReportResults(BaseModel):
    build = ForeignKeyField(db_column='build_id', primary_key=True, rel_model=CiBuilds, to_field='id')
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    data = JSONField()

    class Meta:
        db_table = 'ci_build_report_results'

class CiBuildTraceChunks(BaseModel):
    id = BigIntegerField(primary_key=True)
    chunk_index = IntegerField()
    data_store = IntegerField()
    raw_data = BlobField(null=True)
    checksum = BlobField(null=True)
    lock_version = IntegerField()
    build = ForeignKeyField(db_column='build_id', rel_model=CiBuilds, to_field='id')

    class Meta:
        db_table = 'ci_build_trace_chunks'
        indexes = (
            (('chunk_index', 'build'), True),
        )

class CiJobArtifacts(BaseModel):
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    file_type = IntegerField()
    size = BigIntegerField(null=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    expire_at = DateTimeField(index=True, null=True)
    file = CharField(null=True)
    file_store = IntegerField(index=True, null=True)
    file_sha256 = BlobField(null=True)
    file_format = IntegerField(null=True)
    file_location = IntegerField(null=True)
    id = BigIntegerField(primary_key=True)
    job = ForeignKeyField(db_column='job_id', rel_model=CiBuilds, to_field='id')
    locked = IntegerField(null=True)

    class Meta:
        db_table = 'ci_job_artifacts'
        indexes = (
            (('file_type', 'created_at', 'project'), False),
            (('file_type', 'job'), True),
            (('job', 'expire_at'), False),
            (('project', 'id'), False),
        )

class CiBuildTraceMetadata(BaseModel):
    build = ForeignKeyField(db_column='build_id', primary_key=True, rel_model=CiBuilds, to_field='id')
    trace_artifact = ForeignKeyField(db_column='trace_artifact_id', null=True, rel_model=CiJobArtifacts, to_field='id')
    archival_attempts = IntegerField()
    checksum = BlobField(null=True)
    remote_checksum = BlobField(null=True)
    last_archival_attempt_at = DateTimeField(null=True)
    archived_at = DateTimeField(null=True)

    class Meta:
        db_table = 'ci_build_trace_metadata'

class CiBuildsMetadata(BaseModel):
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    timeout = IntegerField(null=True)
    timeout_source = IntegerField()
    interruptible = BooleanField(null=True)
    config_options = JSONField(null=True)
    config_variables = JSONField(null=True)
    has_exposed_artifacts = BooleanField(null=True)
    environment_auto_stop_in = CharField(null=True)
    expanded_environment_name = CharField(null=True)
    secrets = JSONField()
    build = ForeignKeyField(db_column='build_id', rel_model=CiBuilds, to_field='id')
    id = BigIntegerField(primary_key=True)
    runner_features = JSONField()

    class Meta:
        db_table = 'ci_builds_metadata'
        indexes = (
            (('build', 'id'), False),
        )

class CiBuildsRunnerSession(BaseModel):
    id = BigIntegerField(primary_key=True)
    url = CharField()
    certificate = CharField(null=True)
    authorization = CharField(null=True)
    build = ForeignKeyField(db_column='build_id', rel_model=CiBuilds, to_field='id', unique=True)

    class Meta:
        db_table = 'ci_builds_runner_session'

class CiDailyBuildGroupReportResults(BaseModel):
    id = BigIntegerField(primary_key=True)
    date = DateField()
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    last_pipeline = ForeignKeyField(db_column='last_pipeline_id', rel_model=CiPipelines, to_field='id')
    ref_path = TextField()
    group_name = TextField()
    data = JSONField()
    default_branch = BooleanField()
    group = ForeignKeyField(db_column='group_id', null=True, rel_model=Namespaces, to_field='id')

    class Meta:
        db_table = 'ci_daily_build_group_report_results'
        indexes = (
            (('date', 'project'), False),
            (('group_name', 'date', 'project', 'ref_path'), True),
        )

class CiDeletedObjects(BaseModel):
    id = BigIntegerField(primary_key=True)
    file_store = IntegerField()
    pick_up_at = DateTimeField(index=True)
    store_dir = TextField()
    file = TextField()

    class Meta:
        db_table = 'ci_deleted_objects'

class CiFreezePeriods(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    freeze_start = CharField()
    freeze_end = CharField()
    cron_timezone = CharField()
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'ci_freeze_periods'

class CiGroupVariables(BaseModel):
    key = CharField()
    value = TextField(null=True)
    encrypted_value = TextField(null=True)
    encrypted_value_salt = CharField(null=True)
    encrypted_value_iv = CharField(null=True)
    group = ForeignKeyField(db_column='group_id', rel_model=Namespaces, to_field='id')
    protected = BooleanField()
    created_at = DateTimeField()
    updated_at = DateTimeField()
    masked = BooleanField()
    variable_type = IntegerField()
    environment_scope = TextField()

    class Meta:
        db_table = 'ci_group_variables'
        indexes = (
            (('key', 'group', 'environment_scope'), True),
        )

class CiInstanceVariables(BaseModel):
    id = BigIntegerField(primary_key=True)
    variable_type = IntegerField()
    masked = BooleanField(null=True)
    protected = BooleanField(null=True)
    key = TextField(unique=True)
    encrypted_value = TextField(null=True)
    encrypted_value_iv = TextField(null=True)

    class Meta:
        db_table = 'ci_instance_variables'

class CiJobTokenProjectScopeLinks(BaseModel):
    id = BigIntegerField(primary_key=True)
    source_project = ForeignKeyField(db_column='source_project_id', rel_model=Projects, to_field='id')
    target_project = ForeignKeyField(db_column='target_project_id', rel_model=Projects, related_name='projects_target_project_set', to_field='id')
    added_by = ForeignKeyField(db_column='added_by_id', null=True, rel_model=Users, to_field='id')
    created_at = DateTimeField()

    class Meta:
        db_table = 'ci_job_token_project_scope_links'
        indexes = (
            (('source_project', 'target_project'), True),
        )

class CiJobVariables(BaseModel):
    id = BigIntegerField(primary_key=True)
    key = CharField()
    encrypted_value = TextField(null=True)
    encrypted_value_iv = CharField(null=True)
    job = ForeignKeyField(db_column='job_id', rel_model=CiBuilds, to_field='id')
    variable_type = IntegerField()
    source = IntegerField()

    class Meta:
        db_table = 'ci_job_variables'
        indexes = (
            (('key', 'job'), True),
        )

class CiMinutesAdditionalPacks(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    namespace = ForeignKeyField(db_column='namespace_id', rel_model=Namespaces, to_field='id')
    expires_at = DateField(null=True)
    number_of_minutes = IntegerField()
    purchase_xid = TextField(null=True)

    class Meta:
        db_table = 'ci_minutes_additional_packs'
        indexes = (
            (('namespace', 'purchase_xid'), False),
        )

class CiNamespaceMonthlyUsages(BaseModel):
    id = BigIntegerField(primary_key=True)
    namespace = BigIntegerField(db_column='namespace_id')
    date = DateField()
    additional_amount_available = IntegerField()
    amount_used = DecimalField()
    notification_level = IntegerField()
    shared_runners_duration = IntegerField()

    class Meta:
        db_table = 'ci_namespace_monthly_usages'
        indexes = (
            (('namespace', 'date'), True),
        )

class CiPendingBuilds(BaseModel):
    id = BigIntegerField(primary_key=True)
    build = ForeignKeyField(db_column='build_id', rel_model=CiBuilds, to_field='id', unique=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    created_at = DateTimeField()
    protected = BooleanField()
    instance_runners_enabled = BooleanField()
    namespace = ForeignKeyField(db_column='namespace_id', null=True, rel_model=Namespaces, to_field='id')
    minutes_exceeded = BooleanField()
    tag_ids = UnknownField(index=True, null=True)  # ARRAY
    namespace_traversal_ids = UnknownField(index=True, null=True)  # ARRAY

    class Meta:
        db_table = 'ci_pending_builds'

class CiPipelineArtifacts(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    pipeline = ForeignKeyField(db_column='pipeline_id', rel_model=CiPipelines, to_field='id')
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    size = IntegerField()
    file_store = IntegerField()
    file_type = IntegerField()
    file_format = IntegerField()
    file = TextField(null=True)
    expire_at = DateTimeField(index=True, null=True)
    verification_started_at = DateTimeField(null=True)
    verification_retry_at = DateTimeField(index=True, null=True)
    verified_at = DateTimeField(index=True, null=True)
    verification_state = IntegerField(index=True)
    verification_retry_count = IntegerField(null=True)
    verification_checksum = BlobField(null=True)
    verification_failure = TextField(null=True)

    class Meta:
        db_table = 'ci_pipeline_artifacts'
        indexes = (
            (('pipeline', 'file_type'), True),
        )

class CiPipelineChatData(BaseModel):
    id = BigIntegerField(primary_key=True)
    pipeline = ForeignKeyField(db_column='pipeline_id', rel_model=CiPipelines, to_field='id', unique=True)
    chat_name = ForeignKeyField(db_column='chat_name_id', rel_model=ChatNames, to_field='id')
    response_url = TextField()

    class Meta:
        db_table = 'ci_pipeline_chat_data'

class CiPipelineMessages(BaseModel):
    id = BigIntegerField(primary_key=True)
    severity = IntegerField()
    pipeline = ForeignKeyField(db_column='pipeline_id', rel_model=CiPipelines, to_field='id')
    content = TextField()

    class Meta:
        db_table = 'ci_pipeline_messages'

class CiPipelineScheduleVariables(BaseModel):
    key = CharField()
    value = TextField(null=True)
    encrypted_value = TextField(null=True)
    encrypted_value_salt = CharField(null=True)
    encrypted_value_iv = CharField(null=True)
    pipeline_schedule = ForeignKeyField(db_column='pipeline_schedule_id', rel_model=CiPipelineSchedules, to_field='id')
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    variable_type = IntegerField()

    class Meta:
        db_table = 'ci_pipeline_schedule_variables'
        indexes = (
            (('key', 'pipeline_schedule'), True),
        )

class CiPipelineVariables(BaseModel):
    key = CharField()
    value = TextField(null=True)
    encrypted_value = TextField(null=True)
    encrypted_value_salt = CharField(null=True)
    encrypted_value_iv = CharField(null=True)
    pipeline = ForeignKeyField(db_column='pipeline_id', rel_model=CiPipelines, to_field='id')
    variable_type = IntegerField()

    class Meta:
        db_table = 'ci_pipeline_variables'
        indexes = (
            (('key', 'pipeline'), True),
        )

class CiPipelinesConfig(BaseModel):
    pipeline = ForeignKeyField(db_column='pipeline_id', primary_key=True, rel_model=CiPipelines, to_field='id')
    content = TextField()

    class Meta:
        db_table = 'ci_pipelines_config'

class CiPlatformMetrics(BaseModel):
    id = BigIntegerField(primary_key=True)
    recorded_at = DateTimeField()
    platform_target = TextField()
    count = IntegerField()

    class Meta:
        db_table = 'ci_platform_metrics'

class CiProjectMonthlyUsages(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    date = DateField()
    amount_used = DecimalField()
    shared_runners_duration = IntegerField()

    class Meta:
        db_table = 'ci_project_monthly_usages'
        indexes = (
            (('project', 'date'), True),
        )

class CiResources(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    resource_group = ForeignKeyField(db_column='resource_group_id', rel_model=CiResourceGroups, to_field='id')
    build = ForeignKeyField(db_column='build_id', null=True, rel_model=CiBuilds, to_field='id')

    class Meta:
        db_table = 'ci_resources'
        indexes = (
            (('resource_group', 'build'), True),
        )

class CiRunners(BaseModel):
    token = CharField(index=True, null=True)
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    description = CharField(index=True, null=True)
    contacted_at = DateTimeField(null=True)
    active = BooleanField()
    name = CharField(null=True)
    version = CharField(null=True)
    revision = CharField(null=True)
    platform = CharField(null=True)
    architecture = CharField(null=True)
    run_untagged = BooleanField()
    locked = BooleanField(index=True)
    access_level = IntegerField()
    ip_address = CharField(null=True)
    maximum_timeout = IntegerField(null=True)
    runner_type = IntegerField(index=True)
    token_encrypted = CharField(index=True, null=True)
    public_projects_minutes_cost_factor = FloatField()
    private_projects_minutes_cost_factor = FloatField()
    config = JSONField()

    class Meta:
        db_table = 'ci_runners'
        indexes = (
            (('id', 'contacted_at'), False),
            (('id', 'contacted_at'), False),
            (('id', 'created_at'), False),
            (('id', 'created_at'), False),
        )

class CiRunnerNamespaces(BaseModel):
    runner = ForeignKeyField(db_column='runner_id', null=True, rel_model=CiRunners, to_field='id')
    namespace = ForeignKeyField(db_column='namespace_id', null=True, rel_model=Namespaces, to_field='id')

    class Meta:
        db_table = 'ci_runner_namespaces'
        indexes = (
            (('runner', 'namespace'), True),
        )

class CiRunnerProjects(BaseModel):
    runner = IntegerField(db_column='runner_id', index=True)
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')

    class Meta:
        db_table = 'ci_runner_projects'

class CiRunningBuilds(BaseModel):
    id = BigIntegerField(primary_key=True)
    build = ForeignKeyField(db_column='build_id', rel_model=CiBuilds, to_field='id', unique=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    runner = ForeignKeyField(db_column='runner_id', rel_model=CiRunners, to_field='id')
    created_at = DateTimeField()
    runner_type = IntegerField()

    class Meta:
        db_table = 'ci_running_builds'

class CiSourcesPipelines(BaseModel):
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    pipeline = ForeignKeyField(db_column='pipeline_id', null=True, rel_model=CiPipelines, to_field='id')
    source_project = ForeignKeyField(db_column='source_project_id', null=True, rel_model=Projects, related_name='projects_source_project_set', to_field='id')
    source_pipeline = ForeignKeyField(db_column='source_pipeline_id', null=True, rel_model=CiPipelines, related_name='ci_pipelines_source_pipeline_set', to_field='id')
    source_job = ForeignKeyField(db_column='source_job_id', null=True, rel_model=CiBuilds, to_field='id')

    class Meta:
        db_table = 'ci_sources_pipelines'

class CiSourcesProjects(BaseModel):
    id = BigIntegerField(primary_key=True)
    pipeline = ForeignKeyField(db_column='pipeline_id', rel_model=CiPipelines, to_field='id')
    source_project = ForeignKeyField(db_column='source_project_id', rel_model=Projects, to_field='id')

    class Meta:
        db_table = 'ci_sources_projects'
        indexes = (
            (('pipeline', 'source_project'), True),
        )

class CiSubscriptionsProjects(BaseModel):
    id = BigIntegerField(primary_key=True)
    downstream_project = ForeignKeyField(db_column='downstream_project_id', rel_model=Projects, to_field='id')
    upstream_project = ForeignKeyField(db_column='upstream_project_id', rel_model=Projects, related_name='projects_upstream_project_set', to_field='id')

    class Meta:
        db_table = 'ci_subscriptions_projects'
        indexes = (
            (('downstream_project', 'upstream_project'), True),
        )

class CiTriggers(BaseModel):
    token = CharField(null=True)
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    owner = ForeignKeyField(db_column='owner_id', rel_model=Users, to_field='id')
    description = CharField(null=True)
    ref = CharField(null=True)

    class Meta:
        db_table = 'ci_triggers'

class CiTriggerRequests(BaseModel):
    trigger = ForeignKeyField(db_column='trigger_id', rel_model=CiTriggers, to_field='id')
    variables = TextField(null=True)
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    commit = IntegerField(db_column='commit_id', index=True, null=True)

    class Meta:
        db_table = 'ci_trigger_requests'
        indexes = (
            (('id', 'trigger'), False),
        )

class CiUnitTests(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    key_hash = TextField()
    name = TextField()
    suite_name = TextField()

    class Meta:
        db_table = 'ci_unit_tests'
        indexes = (
            (('project', 'key_hash'), True),
        )

class CiUnitTestFailures(BaseModel):
    id = BigIntegerField(primary_key=True)
    failed_at = DateTimeField(index=True)
    unit_test = ForeignKeyField(db_column='unit_test_id', rel_model=CiUnitTests, to_field='id')
    build = ForeignKeyField(db_column='build_id', rel_model=CiBuilds, to_field='id')

    class Meta:
        db_table = 'ci_unit_test_failures'
        indexes = (
            (('failed_at', 'unit_test', 'build'), True),
        )

class CiVariables(BaseModel):
    key = CharField(index=True)
    value = TextField(null=True)
    encrypted_value = TextField(null=True)
    encrypted_value_salt = CharField(null=True)
    encrypted_value_iv = CharField(null=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    protected = BooleanField()
    environment_scope = CharField()
    masked = BooleanField()
    variable_type = IntegerField()

    class Meta:
        db_table = 'ci_variables'
        indexes = (
            (('key', 'project', 'environment_scope'), True),
        )

class ClusterAgentTokens(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    agent = ForeignKeyField(db_column='agent_id', rel_model=ClusterAgents, to_field='id')
    token_encrypted = TextField(unique=True)
    created_by_user = ForeignKeyField(db_column='created_by_user_id', null=True, rel_model=Users, to_field='id')
    description = TextField(null=True)
    name = TextField(null=True)
    last_used_at = DateTimeField(null=True)

    class Meta:
        db_table = 'cluster_agent_tokens'
        indexes = (
            (('agent', 'last_used_at'), False),
        )

class Clusters(BaseModel):
    user = ForeignKeyField(db_column='user_id', null=True, rel_model=Users, to_field='id')
    provider_type = IntegerField(null=True)
    platform_type = IntegerField(null=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    enabled = BooleanField(null=True)
    name = CharField()
    environment_scope = CharField()
    cluster_type = IntegerField()
    domain = CharField(null=True)
    managed = BooleanField()
    namespace_per_environment = BooleanField()
    management_project = ForeignKeyField(db_column='management_project_id', null=True, rel_model=Projects, to_field='id')
    cleanup_status = IntegerField()
    cleanup_status_reason = TextField(null=True)
    helm_major_version = IntegerField()

    class Meta:
        db_table = 'clusters'
        indexes = (
            (('id', 'created_at', 'enabled', 'cluster_type'), False),
            (('id', 'provider_type', 'enabled'), False),
        )

class ClusterGroups(BaseModel):
    cluster = ForeignKeyField(db_column='cluster_id', rel_model=Clusters, to_field='id')
    group = ForeignKeyField(db_column='group_id', rel_model=Namespaces, to_field='id')

    class Meta:
        db_table = 'cluster_groups'
        indexes = (
            (('cluster', 'group'), True),
        )

class ClusterPlatformsKubernetes(BaseModel):
    cluster = ForeignKeyField(db_column='cluster_id', rel_model=Clusters, to_field='id', unique=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    api_url = TextField(null=True)
    ca_cert = TextField(null=True)
    namespace = CharField(null=True)
    username = CharField(null=True)
    encrypted_password = TextField(null=True)
    encrypted_password_iv = CharField(null=True)
    encrypted_token = TextField(null=True)
    encrypted_token_iv = CharField(null=True)
    authorization_type = IntegerField(null=True)

    class Meta:
        db_table = 'cluster_platforms_kubernetes'

class ClusterProjects(BaseModel):
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    cluster = ForeignKeyField(db_column='cluster_id', rel_model=Clusters, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'cluster_projects'

class ClusterProvidersAws(BaseModel):
    id = BigIntegerField(primary_key=True)
    cluster = ForeignKeyField(db_column='cluster_id', rel_model=Clusters, to_field='id', unique=True)
    num_nodes = IntegerField()
    status = IntegerField()
    created_at = DateTimeField()
    updated_at = DateTimeField()
    key_name = CharField()
    role_arn = CharField()
    region = CharField()
    vpc = CharField(db_column='vpc_id')
    subnet_ids = UnknownField()  # ARRAY
    security_group = CharField(db_column='security_group_id')
    instance_type = CharField()
    access_key = CharField(db_column='access_key_id', null=True)
    encrypted_secret_access_key_iv = CharField(null=True)
    encrypted_secret_access_key = TextField(null=True)
    session_token = TextField(null=True)
    status_reason = TextField(null=True)
    kubernetes_version = TextField()

    class Meta:
        db_table = 'cluster_providers_aws'
        indexes = (
            (('cluster', 'status'), False),
        )

class ClusterProvidersGcp(BaseModel):
    cluster = ForeignKeyField(db_column='cluster_id', rel_model=Clusters, to_field='id', unique=True)
    status = IntegerField(null=True)
    num_nodes = IntegerField()
    created_at = DateTimeField()
    updated_at = DateTimeField()
    status_reason = TextField(null=True)
    gcp_project = CharField(db_column='gcp_project_id')
    zone = CharField()
    machine_type = CharField(null=True)
    operation = CharField(db_column='operation_id', null=True)
    endpoint = CharField(null=True)
    encrypted_access_token = TextField(null=True)
    encrypted_access_token_iv = CharField(null=True)
    legacy_abac = BooleanField()
    cloud_run = BooleanField(index=True)

    class Meta:
        db_table = 'cluster_providers_gcp'

class ClustersApplicationsCertManagers(BaseModel):
    cluster = ForeignKeyField(db_column='cluster_id', rel_model=Clusters, to_field='id', unique=True)
    status = IntegerField()
    version = CharField()
    email = CharField()
    created_at = DateTimeField()
    updated_at = DateTimeField()
    status_reason = TextField(null=True)

    class Meta:
        db_table = 'clusters_applications_cert_managers'

class ClustersApplicationsCilium(BaseModel):
    id = BigIntegerField(primary_key=True)
    cluster = ForeignKeyField(db_column='cluster_id', rel_model=Clusters, to_field='id', unique=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    status = IntegerField()
    status_reason = TextField(null=True)

    class Meta:
        db_table = 'clusters_applications_cilium'

class ClustersApplicationsCrossplane(BaseModel):
    created_at = DateTimeField()
    updated_at = DateTimeField()
    cluster = ForeignKeyField(db_column='cluster_id', rel_model=Clusters, to_field='id', unique=True)
    status = IntegerField()
    version = CharField()
    stack = CharField()
    status_reason = TextField(null=True)

    class Meta:
        db_table = 'clusters_applications_crossplane'

class ClustersApplicationsElasticStacks(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    cluster = ForeignKeyField(db_column='cluster_id', rel_model=Clusters, to_field='id', unique=True)
    status = IntegerField()
    version = CharField()
    status_reason = TextField(null=True)

    class Meta:
        db_table = 'clusters_applications_elastic_stacks'

class ClustersApplicationsHelm(BaseModel):
    cluster = ForeignKeyField(db_column='cluster_id', rel_model=Clusters, to_field='id', unique=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    status = IntegerField()
    version = CharField()
    status_reason = TextField(null=True)
    encrypted_ca_key = TextField(null=True)
    encrypted_ca_key_iv = TextField(null=True)
    ca_cert = TextField(null=True)

    class Meta:
        db_table = 'clusters_applications_helm'

class ClustersApplicationsIngress(BaseModel):
    cluster = ForeignKeyField(db_column='cluster_id', rel_model=Clusters, to_field='id', unique=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    status = IntegerField()
    ingress_type = IntegerField()
    version = CharField()
    cluster_ip = CharField(null=True)
    status_reason = TextField(null=True)
    external_ip = CharField(null=True)
    external_hostname = CharField(null=True)

    class Meta:
        db_table = 'clusters_applications_ingress'

class OauthApplications(BaseModel):
    name = CharField()
    uid = CharField(unique=True)
    secret = CharField()
    redirect_uri = TextField()
    scopes = CharField()
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    owner = IntegerField(db_column='owner_id', null=True)
    owner_type = CharField(null=True)
    trusted = BooleanField()
    confidential = BooleanField()
    expire_access_tokens = BooleanField()

    class Meta:
        db_table = 'oauth_applications'
        indexes = (
            (('owner', 'owner_type'), False),
        )

class ClustersApplicationsJupyter(BaseModel):
    cluster = ForeignKeyField(db_column='cluster_id', rel_model=Clusters, to_field='id', unique=True)
    oauth_application = ForeignKeyField(db_column='oauth_application_id', null=True, rel_model=OauthApplications, to_field='id')
    status = IntegerField()
    version = CharField()
    hostname = CharField(null=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    status_reason = TextField(null=True)

    class Meta:
        db_table = 'clusters_applications_jupyter'

class ClustersApplicationsKnative(BaseModel):
    cluster = ForeignKeyField(db_column='cluster_id', rel_model=Clusters, to_field='id', unique=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    status = IntegerField()
    version = CharField()
    hostname = CharField(null=True)
    status_reason = TextField(null=True)
    external_ip = CharField(null=True)
    external_hostname = CharField(null=True)

    class Meta:
        db_table = 'clusters_applications_knative'

class ClustersApplicationsPrometheus(BaseModel):
    cluster = ForeignKeyField(db_column='cluster_id', rel_model=Clusters, to_field='id', unique=True)
    status = IntegerField()
    version = CharField()
    status_reason = TextField(null=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    last_update_started_at = DateTimeField(null=True)
    encrypted_alert_manager_token = CharField(null=True)
    encrypted_alert_manager_token_iv = CharField(null=True)
    healthy = BooleanField(null=True)

    class Meta:
        db_table = 'clusters_applications_prometheus'

class ClustersApplicationsRunners(BaseModel):
    cluster = ForeignKeyField(db_column='cluster_id', rel_model=Clusters, to_field='id', unique=True)
    runner = ForeignKeyField(db_column='runner_id', null=True, rel_model=CiRunners, to_field='id')
    status = IntegerField()
    created_at = DateTimeField()
    updated_at = DateTimeField()
    version = CharField()
    status_reason = TextField(null=True)
    privileged = BooleanField()

    class Meta:
        db_table = 'clusters_applications_runners'

class ClustersIntegrationElasticstack(BaseModel):
    created_at = DateTimeField()
    updated_at = DateTimeField()
    cluster = ForeignKeyField(db_column='cluster_id', primary_key=True, rel_model=Clusters, to_field='id')
    enabled = BooleanField()
    chart_version = TextField(null=True)

    class Meta:
        db_table = 'clusters_integration_elasticstack'
        indexes = (
            (('created_at', 'cluster', 'enabled'), False),
        )

class ClustersIntegrationPrometheus(BaseModel):
    created_at = DateTimeField()
    updated_at = DateTimeField()
    cluster = ForeignKeyField(db_column='cluster_id', primary_key=True, rel_model=Clusters, to_field='id')
    enabled = BooleanField()
    encrypted_alert_manager_token = TextField(null=True)
    encrypted_alert_manager_token_iv = TextField(null=True)

    class Meta:
        db_table = 'clusters_integration_prometheus'
        indexes = (
            (('created_at', 'cluster', 'enabled'), False),
        )

class ClustersKubernetesNamespaces(BaseModel):
    id = BigIntegerField(primary_key=True)
    cluster = ForeignKeyField(db_column='cluster_id', rel_model=Clusters, to_field='id')
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    cluster_project = ForeignKeyField(db_column='cluster_project_id', null=True, rel_model=ClusterProjects, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    encrypted_service_account_token = TextField(null=True)
    encrypted_service_account_token_iv = CharField(null=True)
    namespace = CharField()
    service_account_name = CharField(null=True)
    environment = ForeignKeyField(db_column='environment_id', null=True, rel_model=Environments, to_field='id')

    class Meta:
        db_table = 'clusters_kubernetes_namespaces'
        indexes = (
            (('cluster', 'namespace'), True),
            (('cluster', 'project', 'environment'), True),
        )

class CommitUserMentions(BaseModel):
    id = BigIntegerField(primary_key=True)
    note = ForeignKeyField(db_column='note_id', rel_model=Notes, to_field='id', unique=True)
    mentioned_users_ids = UnknownField(null=True)  # ARRAY
    mentioned_projects_ids = UnknownField(null=True)  # ARRAY
    mentioned_groups_ids = UnknownField(null=True)  # ARRAY
    commit = CharField(db_column='commit_id')

    class Meta:
        db_table = 'commit_user_mentions'
        indexes = (
            (('note', 'commit'), True),
        )

class ComplianceManagementFrameworks(BaseModel):
    id = BigIntegerField(primary_key=True)
    name = TextField()
    description = TextField()
    color = TextField()
    namespace = ForeignKeyField(db_column='namespace_id', rel_model=Namespaces, to_field='id')
    regulated = BooleanField()
    pipeline_configuration_full_path = TextField(null=True)

    class Meta:
        db_table = 'compliance_management_frameworks'
        indexes = (
            (('name', 'namespace'), True),
        )

class ContainerExpirationPolicies(BaseModel):
    project = ForeignKeyField(db_column='project_id', primary_key=True, rel_model=Projects, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    next_run_at = DateTimeField(null=True)
    name_regex = CharField(null=True)
    cadence = CharField()
    older_than = CharField(null=True)
    keep_n = IntegerField(null=True)
    enabled = BooleanField()
    name_regex_keep = TextField(null=True)

    class Meta:
        db_table = 'container_expiration_policies'
        indexes = (
            (('next_run_at', 'enabled'), False),
            (('project', 'next_run_at'), False),
            (('project', 'next_run_at', 'enabled'), False),
        )

class ContainerRepositories(BaseModel):
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    name = CharField(index=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    status = IntegerField(null=True)
    expiration_policy_started_at = DateTimeField(null=True)
    expiration_policy_cleanup_status = IntegerField()
    expiration_policy_completed_at = DateTimeField(null=True)

    class Meta:
        db_table = 'container_repositories'
        indexes = (
            (('expiration_policy_cleanup_status', 'expiration_policy_started_at', 'project'), False),
            (('id', 'project'), False),
            (('project', 'name'), True),
        )

class ConversationalDevelopmentIndexMetrics(BaseModel):
    leader_issues = FloatField()
    instance_issues = FloatField()
    leader_notes = FloatField()
    instance_notes = FloatField()
    leader_milestones = FloatField()
    instance_milestones = FloatField()
    leader_boards = FloatField()
    instance_boards = FloatField()
    leader_merge_requests = FloatField()
    instance_merge_requests = FloatField()
    leader_ci_pipelines = FloatField()
    instance_ci_pipelines = FloatField()
    leader_environments = FloatField()
    instance_environments = FloatField()
    leader_deployments = FloatField()
    instance_deployments = FloatField()
    leader_projects_prometheus_active = FloatField()
    instance_projects_prometheus_active = FloatField()
    leader_service_desk_issues = FloatField()
    instance_service_desk_issues = FloatField()
    created_at = DateTimeField()
    updated_at = DateTimeField()
    percentage_boards = FloatField()
    percentage_ci_pipelines = FloatField()
    percentage_deployments = FloatField()
    percentage_environments = FloatField()
    percentage_issues = FloatField()
    percentage_merge_requests = FloatField()
    percentage_milestones = FloatField()
    percentage_notes = FloatField()
    percentage_projects_prometheus_active = FloatField()
    percentage_service_desk_issues = FloatField()

    class Meta:
        db_table = 'conversational_development_index_metrics'

class PackagesPackages(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    name = CharField(index=True)
    version = CharField(null=True)
    package_type = IntegerField()
    creator = ForeignKeyField(db_column='creator_id', null=True, rel_model=Users, to_field='id')
    status = IntegerField()

    class Meta:
        db_table = 'packages_packages'
        indexes = (
            (('created_at', 'id'), False),
            (('project', 'created_at'), False),
            (('project', 'id'), False),
            (('project', 'id', 'version', 'name'), False),
            (('project', 'name'), False),
            (('project', 'package_type'), False),
            (('project', 'status'), False),
            (('project', 'version'), False),
            (('project', 'version', 'name'), True),
            (('project', 'version', 'name'), True),
            (('version', 'name', 'project'), True),
            (('version', 'package_type', 'name', 'project'), False),
        )

class CoverageFuzzingCorpuses(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    user = ForeignKeyField(db_column='user_id', null=True, rel_model=Users, to_field='id')
    package = ForeignKeyField(db_column='package_id', rel_model=PackagesPackages, to_field='id')
    file_updated_at = DateTimeField()
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'coverage_fuzzing_corpuses'

class CsvIssueImports(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'csv_issue_imports'

class CustomEmoji(BaseModel):
    id = BigIntegerField(primary_key=True)
    namespace = ForeignKeyField(db_column='namespace_id', rel_model=Namespaces, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    name = TextField()
    file = TextField()
    external = BooleanField()
    creator = ForeignKeyField(db_column='creator_id', rel_model=Users, to_field='id')

    class Meta:
        db_table = 'custom_emoji'
        indexes = (
            (('namespace', 'name'), True),
        )

class CustomerRelationsOrganizations(BaseModel):
    id = BigIntegerField(primary_key=True)
    group = ForeignKeyField(db_column='group_id', rel_model=Namespaces, to_field='id', unique=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    state = IntegerField()
    default_rate = DecimalField(null=True)
    name = TextField()
    description = TextField(null=True)

    class Meta:
        db_table = 'customer_relations_organizations'

class CustomerRelationsContacts(BaseModel):
    id = BigIntegerField(primary_key=True)
    group = ForeignKeyField(db_column='group_id', rel_model=Namespaces, to_field='id')
    organization = ForeignKeyField(db_column='organization_id', null=True, rel_model=CustomerRelationsOrganizations, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    state = IntegerField()
    phone = TextField(null=True)
    first_name = TextField()
    last_name = TextField()
    email = TextField(null=True)
    description = TextField(null=True)

    class Meta:
        db_table = 'customer_relations_contacts'

class DastScannerProfiles(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    spider_timeout = IntegerField(null=True)
    target_timeout = IntegerField(null=True)
    name = TextField()
    scan_type = IntegerField()
    use_ajax_spider = BooleanField()
    show_debug_messages = BooleanField()

    class Meta:
        db_table = 'dast_scanner_profiles'
        indexes = (
            (('project', 'name'), True),
        )

class DastSiteTokens(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    expired_at = DateTimeField(null=True)
    token = TextField(unique=True)
    url = TextField()

    class Meta:
        db_table = 'dast_site_tokens'
        indexes = (
            (('project', 'url'), True),
        )

class DastSiteValidations(BaseModel):
    id = BigIntegerField(primary_key=True)
    dast_site_token = ForeignKeyField(db_column='dast_site_token_id', rel_model=DastSiteTokens, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    validation_started_at = DateTimeField(null=True)
    validation_passed_at = DateTimeField(null=True)
    validation_failed_at = DateTimeField(null=True)
    validation_last_retried_at = DateTimeField(null=True)
    validation_strategy = IntegerField()
    url_base = TextField()
    url_path = TextField()
    state = TextField()

    class Meta:
        db_table = 'dast_site_validations'
        indexes = (
            (('url_base', 'state'), False),
        )

class DastSites(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    url = TextField()
    dast_site_validation = ForeignKeyField(db_column='dast_site_validation_id', null=True, rel_model=DastSiteValidations, to_field='id')

    class Meta:
        db_table = 'dast_sites'
        indexes = (
            (('project', 'url'), True),
        )

class DastSiteProfiles(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    dast_site = ForeignKeyField(db_column='dast_site_id', rel_model=DastSites, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    name = TextField()
    excluded_urls = UnknownField()  # ARRAY
    auth_enabled = BooleanField()
    auth_url = TextField(null=True)
    auth_username_field = TextField(null=True)
    auth_password_field = TextField(null=True)
    auth_username = TextField(null=True)
    target_type = IntegerField()

    class Meta:
        db_table = 'dast_site_profiles'
        indexes = (
            (('project', 'name'), True),
        )

class DastProfiles(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    dast_site_profile = ForeignKeyField(db_column='dast_site_profile_id', rel_model=DastSiteProfiles, to_field='id')
    dast_scanner_profile = ForeignKeyField(db_column='dast_scanner_profile_id', rel_model=DastScannerProfiles, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    name = TextField()
    description = TextField()
    branch_name = TextField(null=True)

    class Meta:
        db_table = 'dast_profiles'
        indexes = (
            (('project', 'name'), True),
        )

class DastProfileSchedules(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    dast_profile = ForeignKeyField(db_column='dast_profile_id', rel_model=DastProfiles, to_field='id', unique=True)
    user = ForeignKeyField(db_column='user_id', null=True, rel_model=Users, to_field='id')
    next_run_at = DateTimeField()
    created_at = DateTimeField()
    updated_at = DateTimeField()
    active = BooleanField()
    cron = TextField()
    cadence = JSONField()
    timezone = TextField()
    starts_at = DateTimeField()

    class Meta:
        db_table = 'dast_profile_schedules'
        indexes = (
            (('next_run_at', 'active'), False),
        )

class DastProfilesPipelines(BaseModel):
    dast_profile = ForeignKeyField(db_column='dast_profile_id', rel_model=DastProfiles, to_field='id')
    ci_pipeline = ForeignKeyField(db_column='ci_pipeline_id', rel_model=CiPipelines, to_field='id', unique=True)

    class Meta:
        db_table = 'dast_profiles_pipelines'
        indexes = (
            (('dast_profile', 'ci_pipeline'), True),
        )
        primary_key = CompositeKey('ci_pipeline', 'dast_profile')

class DastScannerProfilesBuilds(BaseModel):
    dast_scanner_profile = ForeignKeyField(db_column='dast_scanner_profile_id', rel_model=DastScannerProfiles, to_field='id')
    ci_build = ForeignKeyField(db_column='ci_build_id', rel_model=CiBuilds, to_field='id', unique=True)

    class Meta:
        db_table = 'dast_scanner_profiles_builds'
        indexes = (
            (('dast_scanner_profile', 'ci_build'), True),
        )
        primary_key = CompositeKey('ci_build', 'dast_scanner_profile')

class DastSiteProfileSecretVariables(BaseModel):
    id = BigIntegerField(primary_key=True)
    dast_site_profile = ForeignKeyField(db_column='dast_site_profile_id', rel_model=DastSiteProfiles, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    variable_type = IntegerField()
    key = TextField()
    encrypted_value = BlobField()
    encrypted_value_iv = BlobField()

    class Meta:
        db_table = 'dast_site_profile_secret_variables'
        indexes = (
            (('dast_site_profile', 'key'), True),
        )

class DastSiteProfilesBuilds(BaseModel):
    dast_site_profile = ForeignKeyField(db_column='dast_site_profile_id', rel_model=DastSiteProfiles, to_field='id')
    ci_build = ForeignKeyField(db_column='ci_build_id', rel_model=CiBuilds, to_field='id', unique=True)

    class Meta:
        db_table = 'dast_site_profiles_builds'
        indexes = (
            (('dast_site_profile', 'ci_build'), True),
        )
        primary_key = CompositeKey('ci_build', 'dast_site_profile')

class DastSiteProfilesPipelines(BaseModel):
    dast_site_profile = ForeignKeyField(db_column='dast_site_profile_id', rel_model=DastSiteProfiles, to_field='id')
    ci_pipeline = ForeignKeyField(db_column='ci_pipeline_id', rel_model=CiPipelines, to_field='id', unique=True)

    class Meta:
        db_table = 'dast_site_profiles_pipelines'
        indexes = (
            (('dast_site_profile', 'ci_pipeline'), True),
        )
        primary_key = CompositeKey('ci_pipeline', 'dast_site_profile')

class DepCiBuildTraceSectionNames(BaseModel):
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    name = CharField()

    class Meta:
        db_table = 'dep_ci_build_trace_section_names'
        indexes = (
            (('project', 'name'), True),
        )

class DepCiBuildTraceSections(BaseModel):
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    date_start = DateTimeField()
    date_end = DateTimeField()
    byte_start = BigIntegerField()
    byte_end = BigIntegerField()
    build = IntegerField(db_column='build_id')
    section_name = ForeignKeyField(db_column='section_name_id', rel_model=DepCiBuildTraceSectionNames, to_field='id')
    build_id_convert_to_bigint = BigIntegerField()

    class Meta:
        db_table = 'dep_ci_build_trace_sections'
        indexes = (
            (('build', 'section_name'), True),
        )
        primary_key = CompositeKey('build', 'section_name')

class DependencyProxyBlobs(BaseModel):
    group = ForeignKeyField(db_column='group_id', rel_model=Namespaces, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    size = BigIntegerField(null=True)
    file_store = IntegerField(null=True)
    file_name = CharField()
    file = TextField()
    status = IntegerField(index=True)

    class Meta:
        db_table = 'dependency_proxy_blobs'
        indexes = (
            (('group', 'file_name'), False),
            (('id', 'group', 'status'), False),
        )

class DependencyProxyGroupSettings(BaseModel):
    group = ForeignKeyField(db_column='group_id', rel_model=Namespaces, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    enabled = BooleanField()

    class Meta:
        db_table = 'dependency_proxy_group_settings'

class DependencyProxyImageTtlGroupPolicies(BaseModel):
    created_at = DateTimeField()
    updated_at = DateTimeField()
    group = ForeignKeyField(db_column='group_id', primary_key=True, rel_model=Namespaces, to_field='id')
    ttl = IntegerField(null=True)
    enabled = BooleanField()

    class Meta:
        db_table = 'dependency_proxy_image_ttl_group_policies'

class DependencyProxyManifests(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    group = ForeignKeyField(db_column='group_id', rel_model=Namespaces, to_field='id')
    size = BigIntegerField(null=True)
    file_store = IntegerField(null=True)
    file_name = TextField()
    file = TextField()
    digest = TextField()
    content_type = TextField(null=True)
    status = IntegerField(index=True)

    class Meta:
        db_table = 'dependency_proxy_manifests'
        indexes = (
            (('group', 'file_name', 'status'), True),
            (('id', 'group', 'status'), False),
        )

class DeployKeysProjects(BaseModel):
    deploy_key = IntegerField(db_column='deploy_key_id', index=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    can_push = BooleanField()

    class Meta:
        db_table = 'deploy_keys_projects'

class DeployTokens(BaseModel):
    revoked = BooleanField(null=True)
    read_repository = BooleanField()
    read_registry = BooleanField()
    expires_at = DateTimeField()
    created_at = DateTimeField()
    name = CharField()
    token = CharField(null=True, unique=True)
    username = CharField(null=True)
    token_encrypted = CharField(null=True, unique=True)
    deploy_token_type = IntegerField()
    write_registry = BooleanField()
    read_package_registry = BooleanField()
    write_package_registry = BooleanField()

    class Meta:
        db_table = 'deploy_tokens'
        indexes = (
            (('id', 'expires_at', 'token'), False),
        )

class Deployments(BaseModel):
    iid = IntegerField()
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    environment = ForeignKeyField(db_column='environment_id', rel_model=Environments, to_field='id')
    ref = CharField()
    tag = BooleanField()
    sha = CharField()
    user = IntegerField(db_column='user_id', null=True)
    deployable_type = CharField(null=True)
    created_at = DateTimeField(index=True, null=True)
    updated_at = DateTimeField(null=True)
    on_stop = CharField(null=True)
    status = IntegerField()
    finished_at = DateTimeField(null=True)
    cluster = ForeignKeyField(db_column='cluster_id', null=True, rel_model=Clusters, to_field='id')
    deployable = BigIntegerField(db_column='deployable_id', null=True)

    class Meta:
        db_table = 'deployments'
        indexes = (
            (('cluster', 'status'), False),
            (('created_at', 'project', 'status'), False),
            (('deployable', 'deployable_type'), False),
            (('environment', 'cluster'), False),
            (('environment', 'id'), False),
            (('environment', 'iid', 'project'), False),
            (('environment', 'sha', 'status'), False),
            (('finished_at', 'status', 'environment'), False),
            (('id', 'created_at', 'status'), False),
            (('id', 'project', 'updated_at'), False),
            (('project', 'environment', 'updated_at', 'id'), False),
            (('project', 'finished_at'), False),
            (('project', 'id'), False),
            (('project', 'iid'), True),
            (('project', 'ref'), False),
            (('project', 'sha'), False),
            (('project', 'status'), False),
            (('status', 'id', 'environment'), False),
            (('user', 'created_at', 'status'), False),
        )

class DeploymentClusters(BaseModel):
    deployment = ForeignKeyField(db_column='deployment_id', primary_key=True, rel_model=Deployments, to_field='id')
    cluster = ForeignKeyField(db_column='cluster_id', rel_model=Clusters, to_field='id')
    kubernetes_namespace = CharField(null=True)

    class Meta:
        db_table = 'deployment_clusters'
        indexes = (
            (('cluster', 'kubernetes_namespace'), False),
            (('deployment', 'cluster'), True),
        )

class DeploymentMergeRequests(BaseModel):
    deployment = ForeignKeyField(db_column='deployment_id', rel_model=Deployments, to_field='id')
    merge_request = ForeignKeyField(db_column='merge_request_id', rel_model=MergeRequests, to_field='id')
    environment = ForeignKeyField(db_column='environment_id', null=True, rel_model=Environments, to_field='id')

    class Meta:
        db_table = 'deployment_merge_requests'
        indexes = (
            (('deployment', 'merge_request'), True),
            (('merge_request', 'environment'), True),
        )
        primary_key = CompositeKey('deployment', 'merge_request')

class DescriptionVersions(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    issue = ForeignKeyField(db_column='issue_id', null=True, rel_model=Issues, to_field='id')
    merge_request = ForeignKeyField(db_column='merge_request_id', null=True, rel_model=MergeRequests, to_field='id')
    epic = ForeignKeyField(db_column='epic_id', null=True, rel_model=Epics, to_field='id')
    description = TextField(null=True)
    deleted_at = DateTimeField(null=True)

    class Meta:
        db_table = 'description_versions'

class DesignManagementDesigns(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    issue = ForeignKeyField(db_column='issue_id', null=True, rel_model=Issues, to_field='id')
    filename = CharField()
    relative_position = IntegerField(null=True)
    iid = IntegerField(null=True)

    class Meta:
        db_table = 'design_management_designs'
        indexes = (
            (('issue', 'filename'), True),
            (('project', 'iid'), True),
            (('relative_position', 'id', 'issue'), False),
        )

class DesignManagementVersions(BaseModel):
    id = BigIntegerField(primary_key=True)
    sha = BlobField()
    issue = ForeignKeyField(db_column='issue_id', null=True, rel_model=Issues, to_field='id')
    created_at = DateTimeField()
    author = ForeignKeyField(db_column='author_id', null=True, rel_model=Users, to_field='id')

    class Meta:
        db_table = 'design_management_versions'
        indexes = (
            (('sha', 'issue'), True),
        )

class DesignManagementDesignsVersions(BaseModel):
    id = BigIntegerField(primary_key=True)
    design = ForeignKeyField(db_column='design_id', rel_model=DesignManagementDesigns, to_field='id')
    version = ForeignKeyField(db_column='version_id', rel_model=DesignManagementVersions, to_field='id')
    event = IntegerField(index=True)
    image_v432x230 = CharField(null=True)

    class Meta:
        db_table = 'design_management_designs_versions'
        indexes = (
            (('design', 'version'), True),
        )

class DesignUserMentions(BaseModel):
    id = BigIntegerField(primary_key=True)
    design = ForeignKeyField(db_column='design_id', rel_model=DesignManagementDesigns, to_field='id')
    note = ForeignKeyField(db_column='note_id', rel_model=Notes, to_field='id', unique=True)
    mentioned_users_ids = UnknownField(null=True)  # ARRAY
    mentioned_projects_ids = UnknownField(null=True)  # ARRAY
    mentioned_groups_ids = UnknownField(null=True)  # ARRAY

    class Meta:
        db_table = 'design_user_mentions'
        indexes = (
            (('design', 'note'), True),
        )

class DetachedPartitions(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    drop_after = DateTimeField()
    table_name = TextField()

    class Meta:
        db_table = 'detached_partitions'

class DiffNotePositions(BaseModel):
    id = BigIntegerField(primary_key=True)
    note = ForeignKeyField(db_column='note_id', rel_model=Notes, to_field='id')
    old_line = IntegerField(null=True)
    new_line = IntegerField(null=True)
    diff_content_type = IntegerField()
    diff_type = IntegerField()
    line_code = CharField()
    base_sha = BlobField()
    start_sha = BlobField()
    head_sha = BlobField()
    old_path = TextField()
    new_path = TextField()

    class Meta:
        db_table = 'diff_note_positions'
        indexes = (
            (('note', 'diff_type'), True),
        )

class DoraDailyMetrics(BaseModel):
    id = BigIntegerField(primary_key=True)
    environment = ForeignKeyField(db_column='environment_id', rel_model=Environments, to_field='id')
    date = DateField()
    deployment_frequency = IntegerField(null=True)
    lead_time_for_changes_in_seconds = IntegerField(null=True)

    class Meta:
        db_table = 'dora_daily_metrics'
        indexes = (
            (('environment', 'date'), True),
        )

class DraftNotes(BaseModel):
    id = BigIntegerField(primary_key=True)
    merge_request = ForeignKeyField(db_column='merge_request_id', rel_model=MergeRequests, to_field='id')
    author = ForeignKeyField(db_column='author_id', rel_model=Users, to_field='id')
    resolve_discussion = BooleanField()
    discussion = CharField(db_column='discussion_id', index=True, null=True)
    note = TextField()
    position = TextField(null=True)
    original_position = TextField(null=True)
    change_position = TextField(null=True)
    commit = BlobField(db_column='commit_id', null=True)

    class Meta:
        db_table = 'draft_notes'

class ElasticIndexSettings(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    number_of_replicas = IntegerField()
    number_of_shards = IntegerField()
    alias_name = TextField(unique=True)

    class Meta:
        db_table = 'elastic_index_settings'

class ElasticReindexingTasks(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    state = IntegerField(index=True)
    in_progress = BooleanField(unique=True)
    error_message = TextField(null=True)
    delete_original_index_at = DateTimeField(null=True)
    max_slices_running = IntegerField()
    slice_multiplier = IntegerField()

    class Meta:
        db_table = 'elastic_reindexing_tasks'

class ElasticReindexingSubtasks(BaseModel):
    id = BigIntegerField(primary_key=True)
    elastic_reindexing_task = ForeignKeyField(db_column='elastic_reindexing_task_id', rel_model=ElasticReindexingTasks, to_field='id')
    alias_name = TextField()
    index_name_from = TextField()
    index_name_to = TextField()
    elastic_task = TextField(null=True)
    documents_count_target = IntegerField(null=True)
    documents_count = IntegerField(null=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'elastic_reindexing_subtasks'

class ElasticReindexingSlices(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    elastic_reindexing_subtask = ForeignKeyField(db_column='elastic_reindexing_subtask_id', rel_model=ElasticReindexingSubtasks, to_field='id')
    elastic_slice = IntegerField()
    elastic_max_slice = IntegerField()
    retry_attempt = IntegerField()
    elastic_task = TextField(null=True)

    class Meta:
        db_table = 'elastic_reindexing_slices'

class ElasticsearchIndexedNamespaces(BaseModel):
    created_at = DateTimeField(index=True)
    updated_at = DateTimeField()
    namespace = ForeignKeyField(db_column='namespace_id', primary_key=True, rel_model=Namespaces, to_field='id')

    class Meta:
        db_table = 'elasticsearch_indexed_namespaces'

class ElasticsearchIndexedProjects(BaseModel):
    created_at = DateTimeField()
    updated_at = DateTimeField()
    project = ForeignKeyField(db_column='project_id', primary_key=True, rel_model=Projects, to_field='id')

    class Meta:
        db_table = 'elasticsearch_indexed_projects'

class Emails(BaseModel):
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')
    email = CharField(unique=True)
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    confirmation_token = CharField(null=True, unique=True)
    confirmed_at = DateTimeField(null=True)
    confirmation_sent_at = DateTimeField(null=True)

    class Meta:
        db_table = 'emails'

class EpicIssues(BaseModel):
    epic = ForeignKeyField(db_column='epic_id', rel_model=Epics, to_field='id')
    issue = ForeignKeyField(db_column='issue_id', rel_model=Issues, to_field='id', unique=True)
    relative_position = IntegerField(null=True)

    class Meta:
        db_table = 'epic_issues'
        indexes = (
            (('epic', 'issue'), False),
        )

class EpicMetrics(BaseModel):
    epic = ForeignKeyField(db_column='epic_id', rel_model=Epics, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'epic_metrics'

class EpicUserMentions(BaseModel):
    id = BigIntegerField(primary_key=True)
    epic = ForeignKeyField(db_column='epic_id', rel_model=Epics, to_field='id', unique=True)
    note = ForeignKeyField(db_column='note_id', null=True, rel_model=Notes, to_field='id', unique=True)
    mentioned_users_ids = UnknownField(null=True)  # ARRAY
    mentioned_projects_ids = UnknownField(null=True)  # ARRAY
    mentioned_groups_ids = UnknownField(null=True)  # ARRAY

    class Meta:
        db_table = 'epic_user_mentions'
        indexes = (
            (('epic', 'note'), True),
        )

class ErrorTrackingClientKeys(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    active = BooleanField()
    public_key = TextField()
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'error_tracking_client_keys'

class ErrorTrackingErrors(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    name = TextField()
    description = TextField()
    actor = TextField()
    first_seen_at = DateTimeField()
    last_seen_at = DateTimeField()
    platform = TextField(null=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    events_count = BigIntegerField()
    status = IntegerField()

    class Meta:
        db_table = 'error_tracking_errors'
        indexes = (
            (('project', 'events_count', 'status', 'id'), False),
            (('project', 'first_seen_at', 'status', 'id'), False),
            (('project', 'last_seen_at', 'status', 'id'), False),
            (('project', 'status', 'id'), False),
        )

class ErrorTrackingErrorEvents(BaseModel):
    id = BigIntegerField(primary_key=True)
    error = ForeignKeyField(db_column='error_id', rel_model=ErrorTrackingErrors, to_field='id')
    description = TextField()
    environment = TextField(null=True)
    level = TextField(null=True)
    occurred_at = DateTimeField()
    payload = JSONField()
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'error_tracking_error_events'

class Events(BaseModel):
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    author = ForeignKeyField(db_column='author_id', rel_model=Users, to_field='id')
    target = IntegerField(db_column='target_id', null=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    action = IntegerField(index=True)
    target_type = CharField(null=True)
    group = ForeignKeyField(db_column='group_id', null=True, rel_model=Namespaces, to_field='id')
    fingerprint = BlobField(null=True)
    id = BigIntegerField(primary_key=True)

    class Meta:
        db_table = 'events'
        indexes = (
            (('author', 'created_at'), False),
            (('author', 'project'), False),
            (('created_at', 'author'), False),
            (('created_at', 'author'), False),
            (('fingerprint', 'target', 'target_type'), True),
            (('id', 'project'), False),
            (('project', 'created_at'), False),
            (('project', 'id'), False),
            (('target_type', 'target'), False),
        )

class Releases(BaseModel):
    tag = CharField(null=True)
    description = TextField(null=True)
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    description_html = TextField(null=True)
    cached_markdown_version = IntegerField(null=True)
    author = ForeignKeyField(db_column='author_id', null=True, rel_model=Users, to_field='id')
    name = CharField(null=True)
    sha = CharField(null=True)
    released_at = DateTimeField(index=True)

    class Meta:
        db_table = 'releases'
        indexes = (
            (('id', 'created_at', 'author'), False),
            (('tag', 'project'), False),
        )

class Evidences(BaseModel):
    id = BigIntegerField(primary_key=True)
    release = ForeignKeyField(db_column='release_id', rel_model=Releases, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    summary_sha = BlobField(null=True)
    summary = JSONField()

    class Meta:
        db_table = 'evidences'

class Experiments(BaseModel):
    id = BigIntegerField(primary_key=True)
    name = TextField(unique=True)

    class Meta:
        db_table = 'experiments'

class ExperimentSubjects(BaseModel):
    id = BigIntegerField(primary_key=True)
    experiment = ForeignKeyField(db_column='experiment_id', rel_model=Experiments, to_field='id')
    user = ForeignKeyField(db_column='user_id', null=True, rel_model=Users, to_field='id')
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    variant = IntegerField()
    created_at = DateTimeField()
    updated_at = DateTimeField()
    converted_at = DateTimeField(null=True)
    context = JSONField()
    namespace = ForeignKeyField(db_column='namespace_id', null=True, rel_model=Namespaces, to_field='id')

    class Meta:
        db_table = 'experiment_subjects'

class ExperimentUsers(BaseModel):
    id = BigIntegerField(primary_key=True)
    experiment = ForeignKeyField(db_column='experiment_id', rel_model=Experiments, to_field='id')
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')
    group_type = IntegerField()
    created_at = DateTimeField()
    updated_at = DateTimeField()
    converted_at = DateTimeField(null=True)
    context = JSONField()

    class Meta:
        db_table = 'experiment_users'

class ExternalApprovalRules(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    external_url = TextField()
    name = TextField()

    class Meta:
        db_table = 'external_approval_rules'
        indexes = (
            (('project', 'external_url'), True),
            (('project', 'name'), True),
        )

class ExternalApprovalRulesProtectedBranches(BaseModel):
    id = BigIntegerField(primary_key=True)
    external_approval_rule = ForeignKeyField(db_column='external_approval_rule_id', rel_model=ExternalApprovalRules, to_field='id')
    protected_branch = ForeignKeyField(db_column='protected_branch_id', rel_model=ProtectedBranches, to_field='id')

    class Meta:
        db_table = 'external_approval_rules_protected_branches'
        indexes = (
            (('external_approval_rule', 'protected_branch'), True),
        )

class ExternalStatusChecks(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    external_url = TextField()
    name = TextField()

    class Meta:
        db_table = 'external_status_checks'
        indexes = (
            (('project', 'external_url'), True),
            (('project', 'name'), True),
        )

class ExternalStatusChecksProtectedBranches(BaseModel):
    id = BigIntegerField(primary_key=True)
    external_status_check = ForeignKeyField(db_column='external_status_check_id', rel_model=ExternalStatusChecks, to_field='id')
    protected_branch = ForeignKeyField(db_column='protected_branch_id', rel_model=ProtectedBranches, to_field='id')

    class Meta:
        db_table = 'external_status_checks_protected_branches'

class FeatureGates(BaseModel):
    feature_key = CharField()
    key = CharField()
    value = CharField(null=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'feature_gates'
        indexes = (
            (('feature_key', 'key', 'value'), True),
        )

class Features(BaseModel):
    key = CharField(unique=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'features'

class ForkNetworks(BaseModel):
    root_project = ForeignKeyField(db_column='root_project_id', null=True, rel_model=Projects, to_field='id', unique=True)
    deleted_root_project_name = CharField(null=True)

    class Meta:
        db_table = 'fork_networks'

class ForkNetworkMembers(BaseModel):
    fork_network = ForeignKeyField(db_column='fork_network_id', rel_model=ForkNetworks, to_field='id')
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, related_name='projects_project_set', to_field='id', unique=True)
    forked_from_project = ForeignKeyField(db_column='forked_from_project_id', null=True, rel_model=Projects, to_field='id')

    class Meta:
        db_table = 'fork_network_members'

class GeoCacheInvalidationEvents(BaseModel):
    id = BigIntegerField(primary_key=True)
    key = CharField()

    class Meta:
        db_table = 'geo_cache_invalidation_events'

class GeoContainerRepositoryUpdatedEvents(BaseModel):
    id = BigIntegerField(primary_key=True)
    container_repository = ForeignKeyField(db_column='container_repository_id', rel_model=ContainerRepositories, to_field='id')

    class Meta:
        db_table = 'geo_container_repository_updated_events'

class GeoJobArtifactDeletedEvents(BaseModel):
    id = BigIntegerField(primary_key=True)
    file_path = CharField()
    job_artifact = BigIntegerField(db_column='job_artifact_id', index=True)

    class Meta:
        db_table = 'geo_job_artifact_deleted_events'

class GeoHashedStorageMigratedEvents(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    repository_storage_name = TextField()
    old_disk_path = TextField()
    new_disk_path = TextField()
    old_wiki_disk_path = TextField()
    new_wiki_disk_path = TextField()
    old_storage_version = IntegerField(null=True)
    new_storage_version = IntegerField()
    old_design_disk_path = TextField(null=True)
    new_design_disk_path = TextField(null=True)

    class Meta:
        db_table = 'geo_hashed_storage_migrated_events'

class GeoNodes(BaseModel):
    primary = BooleanField(index=True)
    oauth_application = IntegerField(db_column='oauth_application_id', null=True)
    enabled = BooleanField()
    access_key = CharField(index=True, null=True)
    encrypted_secret_access_key = CharField(null=True)
    encrypted_secret_access_key_iv = CharField(null=True)
    clone_url_prefix = CharField(null=True)
    files_max_capacity = IntegerField()
    repos_max_capacity = IntegerField()
    url = CharField()
    selective_sync_type = CharField(null=True)
    selective_sync_shards = TextField(null=True)
    verification_max_capacity = IntegerField()
    minimum_reverification_interval = IntegerField()
    internal_url = CharField(null=True)
    name = CharField(unique=True)
    container_repositories_max_capacity = IntegerField()
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    sync_object_storage = BooleanField()

    class Meta:
        db_table = 'geo_nodes'

class GeoRepositoriesChangedEvents(BaseModel):
    id = BigIntegerField(primary_key=True)
    geo_node = ForeignKeyField(db_column='geo_node_id', rel_model=GeoNodes, to_field='id')

    class Meta:
        db_table = 'geo_repositories_changed_events'

class GeoRepositoryUpdatedEvents(BaseModel):
    id = BigIntegerField(primary_key=True)
    branches_affected = IntegerField()
    tags_affected = IntegerField()
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    source = IntegerField(index=True)
    new_branch = BooleanField()
    remove_branch = BooleanField()
    ref = TextField(null=True)

    class Meta:
        db_table = 'geo_repository_updated_events'

class GeoRepositoryRenamedEvents(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    repository_storage_name = TextField()
    old_path_with_namespace = TextField()
    new_path_with_namespace = TextField()
    old_wiki_path_with_namespace = TextField()
    new_wiki_path_with_namespace = TextField()
    old_path = TextField()
    new_path = TextField()

    class Meta:
        db_table = 'geo_repository_renamed_events'

class GeoRepositoryCreatedEvents(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    repository_storage_name = TextField()
    repo_path = TextField()
    wiki_path = TextField(null=True)
    project_name = TextField()

    class Meta:
        db_table = 'geo_repository_created_events'

class GeoUploadDeletedEvents(BaseModel):
    id = BigIntegerField(primary_key=True)
    upload = IntegerField(db_column='upload_id', index=True)
    file_path = CharField()
    model = IntegerField(db_column='model_id')
    model_type = CharField()
    uploader = CharField()

    class Meta:
        db_table = 'geo_upload_deleted_events'

class GeoRepositoryDeletedEvents(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = IntegerField(db_column='project_id', index=True)
    repository_storage_name = TextField()
    deleted_path = TextField()
    deleted_wiki_path = TextField(null=True)
    deleted_project_name = TextField()

    class Meta:
        db_table = 'geo_repository_deleted_events'

class GeoResetChecksumEvents(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')

    class Meta:
        db_table = 'geo_reset_checksum_events'

class GeoLfsObjectDeletedEvents(BaseModel):
    id = BigIntegerField(primary_key=True)
    lfs_object = IntegerField(db_column='lfs_object_id', index=True)
    oid = CharField()
    file_path = CharField()

    class Meta:
        db_table = 'geo_lfs_object_deleted_events'

class GeoEvents(BaseModel):
    id = BigIntegerField(primary_key=True)
    replicable_name = CharField()
    event_name = CharField()
    payload = JSONField()
    created_at = DateTimeField()

    class Meta:
        db_table = 'geo_events'

class GeoEventLog(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    repository_updated_event = ForeignKeyField(db_column='repository_updated_event_id', null=True, rel_model=GeoRepositoryUpdatedEvents, to_field='id')
    repository_deleted_event = ForeignKeyField(db_column='repository_deleted_event_id', null=True, rel_model=GeoRepositoryDeletedEvents, to_field='id')
    repository_renamed_event = ForeignKeyField(db_column='repository_renamed_event_id', null=True, rel_model=GeoRepositoryRenamedEvents, to_field='id')
    repositories_changed_event = ForeignKeyField(db_column='repositories_changed_event_id', null=True, rel_model=GeoRepositoriesChangedEvents, to_field='id')
    repository_created_event = ForeignKeyField(db_column='repository_created_event_id', null=True, rel_model=GeoRepositoryCreatedEvents, to_field='id')
    hashed_storage_migrated_event = ForeignKeyField(db_column='hashed_storage_migrated_event_id', null=True, rel_model=GeoHashedStorageMigratedEvents, to_field='id')
    lfs_object_deleted_event = ForeignKeyField(db_column='lfs_object_deleted_event_id', null=True, rel_model=GeoLfsObjectDeletedEvents, to_field='id')
    hashed_storage_attachments_event = BigIntegerField(db_column='hashed_storage_attachments_event_id', index=True, null=True)
    upload_deleted_event = ForeignKeyField(db_column='upload_deleted_event_id', null=True, rel_model=GeoUploadDeletedEvents, to_field='id')
    job_artifact_deleted_event = ForeignKeyField(db_column='job_artifact_deleted_event_id', null=True, rel_model=GeoJobArtifactDeletedEvents, to_field='id')
    reset_checksum_event = ForeignKeyField(db_column='reset_checksum_event_id', null=True, rel_model=GeoResetChecksumEvents, to_field='id')
    cache_invalidation_event = ForeignKeyField(db_column='cache_invalidation_event_id', null=True, rel_model=GeoCacheInvalidationEvents, to_field='id')
    container_repository_updated_event = ForeignKeyField(db_column='container_repository_updated_event_id', null=True, rel_model=GeoContainerRepositoryUpdatedEvents, to_field='id')
    geo_event = ForeignKeyField(db_column='geo_event_id', null=True, rel_model=GeoEvents, to_field='id')

    class Meta:
        db_table = 'geo_event_log'

class GeoHashedStorageAttachmentsEvents(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    old_attachments_path = TextField()
    new_attachments_path = TextField()

    class Meta:
        db_table = 'geo_hashed_storage_attachments_events'

class GeoNodeNamespaceLinks(BaseModel):
    geo_node = ForeignKeyField(db_column='geo_node_id', rel_model=GeoNodes, to_field='id')
    namespace = ForeignKeyField(db_column='namespace_id', rel_model=Namespaces, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'geo_node_namespace_links'
        indexes = (
            (('geo_node', 'namespace'), True),
        )

class GeoNodeStatuses(BaseModel):
    geo_node = ForeignKeyField(db_column='geo_node_id', rel_model=GeoNodes, to_field='id', unique=True)
    db_replication_lag_seconds = IntegerField(null=True)
    repositories_synced_count = IntegerField(null=True)
    repositories_failed_count = IntegerField(null=True)
    lfs_objects_count = IntegerField(null=True)
    lfs_objects_synced_count = IntegerField(null=True)
    lfs_objects_failed_count = IntegerField(null=True)
    attachments_count = IntegerField(null=True)
    attachments_synced_count = IntegerField(null=True)
    attachments_failed_count = IntegerField(null=True)
    last_event = IntegerField(db_column='last_event_id', null=True)
    last_event_date = DateTimeField(null=True)
    cursor_last_event = IntegerField(db_column='cursor_last_event_id', null=True)
    cursor_last_event_date = DateTimeField(null=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    last_successful_status_check_at = DateTimeField(null=True)
    status_message = CharField(null=True)
    replication_slots_count = IntegerField(null=True)
    replication_slots_used_count = IntegerField(null=True)
    replication_slots_max_retained_wal_bytes = BigIntegerField(null=True)
    wikis_synced_count = IntegerField(null=True)
    wikis_failed_count = IntegerField(null=True)
    job_artifacts_count = IntegerField(null=True)
    job_artifacts_synced_count = IntegerField(null=True)
    job_artifacts_failed_count = IntegerField(null=True)
    version = CharField(null=True)
    revision = CharField(null=True)
    repositories_verified_count = IntegerField(null=True)
    repositories_verification_failed_count = IntegerField(null=True)
    wikis_verified_count = IntegerField(null=True)
    wikis_verification_failed_count = IntegerField(null=True)
    lfs_objects_synced_missing_on_primary_count = IntegerField(null=True)
    job_artifacts_synced_missing_on_primary_count = IntegerField(null=True)
    attachments_synced_missing_on_primary_count = IntegerField(null=True)
    repositories_checksummed_count = IntegerField(null=True)
    repositories_checksum_failed_count = IntegerField(null=True)
    repositories_checksum_mismatch_count = IntegerField(null=True)
    wikis_checksummed_count = IntegerField(null=True)
    wikis_checksum_failed_count = IntegerField(null=True)
    wikis_checksum_mismatch_count = IntegerField(null=True)
    storage_configuration_digest = BlobField(null=True)
    repositories_retrying_verification_count = IntegerField(null=True)
    wikis_retrying_verification_count = IntegerField(null=True)
    projects_count = IntegerField(null=True)
    container_repositories_count = IntegerField(null=True)
    container_repositories_synced_count = IntegerField(null=True)
    container_repositories_failed_count = IntegerField(null=True)
    container_repositories_registry_count = IntegerField(null=True)
    design_repositories_count = IntegerField(null=True)
    design_repositories_synced_count = IntegerField(null=True)
    design_repositories_failed_count = IntegerField(null=True)
    design_repositories_registry_count = IntegerField(null=True)
    status = JSONField()

    class Meta:
        db_table = 'geo_node_statuses'

class GitlabSubscriptionHistories(BaseModel):
    id = BigIntegerField(primary_key=True)
    gitlab_subscription_created_at = DateTimeField(null=True)
    gitlab_subscription_updated_at = DateTimeField(null=True)
    start_date = DateField(null=True)
    end_date = DateField(null=True)
    trial_ends_on = DateField(null=True)
    namespace = IntegerField(db_column='namespace_id', null=True)
    hosted_plan = IntegerField(db_column='hosted_plan_id', null=True)
    max_seats_used = IntegerField(null=True)
    seats = IntegerField(null=True)
    trial = BooleanField(null=True)
    change_type = IntegerField(null=True)
    gitlab_subscription = BigIntegerField(db_column='gitlab_subscription_id', index=True)
    created_at = DateTimeField(null=True)
    trial_starts_on = DateField(null=True)
    auto_renew = BooleanField(null=True)
    trial_extension_type = IntegerField(null=True)

    class Meta:
        db_table = 'gitlab_subscription_histories'

class Plans(BaseModel):
    created_at = DateTimeField()
    updated_at = DateTimeField()
    name = CharField(null=True, unique=True)
    title = CharField(null=True)

    class Meta:
        db_table = 'plans'

class GitlabSubscriptions(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    start_date = DateField(null=True)
    end_date = DateField(null=True)
    trial_ends_on = DateField(null=True)
    namespace = ForeignKeyField(db_column='namespace_id', null=True, rel_model=Namespaces, to_field='id', unique=True)
    hosted_plan = ForeignKeyField(db_column='hosted_plan_id', null=True, rel_model=Plans, to_field='id')
    max_seats_used = IntegerField(null=True)
    seats = IntegerField(null=True)
    trial = BooleanField(null=True)
    trial_starts_on = DateField(null=True)
    auto_renew = BooleanField(null=True)
    seats_in_use = IntegerField()
    seats_owed = IntegerField()
    trial_extension_type = IntegerField(null=True)

    class Meta:
        db_table = 'gitlab_subscriptions'
        indexes = (
            (('end_date', 'namespace'), False),
        )

class GpgKeys(BaseModel):
    created_at = DateTimeField()
    updated_at = DateTimeField()
    user = ForeignKeyField(db_column='user_id', null=True, rel_model=Users, to_field='id')
    primary_keyid = BlobField(null=True, unique=True)
    fingerprint = BlobField(null=True, unique=True)
    key = TextField(null=True)

    class Meta:
        db_table = 'gpg_keys'

class GpgKeySubkeys(BaseModel):
    gpg_key = ForeignKeyField(db_column='gpg_key_id', rel_model=GpgKeys, to_field='id')
    keyid = BlobField(null=True, unique=True)
    fingerprint = BlobField(null=True, unique=True)

    class Meta:
        db_table = 'gpg_key_subkeys'

class GpgSignatures(BaseModel):
    created_at = DateTimeField()
    updated_at = DateTimeField()
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    gpg_key = ForeignKeyField(db_column='gpg_key_id', null=True, rel_model=GpgKeys, to_field='id')
    commit_sha = BlobField(null=True, unique=True)
    gpg_key_primary_keyid = BlobField(index=True, null=True)
    gpg_key_user_name = TextField(null=True)
    gpg_key_user_email = TextField(null=True)
    verification_status = IntegerField()
    gpg_key_subkey = ForeignKeyField(db_column='gpg_key_subkey_id', null=True, rel_model=GpgKeySubkeys, to_field='id')

    class Meta:
        db_table = 'gpg_signatures'

class GrafanaIntegrations(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    encrypted_token = CharField()
    encrypted_token_iv = CharField()
    grafana_url = CharField()
    enabled = BooleanField(index=True)

    class Meta:
        db_table = 'grafana_integrations'

class GroupCustomAttributes(BaseModel):
    created_at = DateTimeField()
    updated_at = DateTimeField()
    group = ForeignKeyField(db_column='group_id', rel_model=Namespaces, to_field='id')
    key = CharField()
    value = CharField()

    class Meta:
        db_table = 'group_custom_attributes'
        indexes = (
            (('group', 'key'), True),
            (('key', 'value'), False),
        )

class GroupDeletionSchedules(BaseModel):
    group = ForeignKeyField(db_column='group_id', primary_key=True, rel_model=Namespaces, to_field='id')
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')
    marked_for_deletion_on = DateField(index=True)

    class Meta:
        db_table = 'group_deletion_schedules'

class GroupDeployKeys(BaseModel):
    id = BigIntegerField(primary_key=True)
    user = ForeignKeyField(db_column='user_id', null=True, rel_model=Users, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    last_used_at = DateTimeField(null=True)
    expires_at = DateTimeField(null=True)
    key = TextField()
    title = TextField(null=True)
    fingerprint = TextField(unique=True)
    fingerprint_sha256 = BlobField(index=True, null=True)

    class Meta:
        db_table = 'group_deploy_keys'

class GroupDeployKeysGroups(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    group = ForeignKeyField(db_column='group_id', rel_model=Namespaces, to_field='id')
    group_deploy_key = ForeignKeyField(db_column='group_deploy_key_id', rel_model=GroupDeployKeys, to_field='id')
    can_push = BooleanField()

    class Meta:
        db_table = 'group_deploy_keys_groups'
        indexes = (
            (('group', 'group_deploy_key'), True),
        )

class GroupDeployTokens(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    group = ForeignKeyField(db_column='group_id', rel_model=Namespaces, to_field='id')
    deploy_token = ForeignKeyField(db_column='deploy_token_id', rel_model=DeployTokens, to_field='id')

    class Meta:
        db_table = 'group_deploy_tokens'
        indexes = (
            (('group', 'deploy_token'), True),
        )

class GroupGroupLinks(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    shared_group = ForeignKeyField(db_column='shared_group_id', rel_model=Namespaces, to_field='id')
    shared_with_group = ForeignKeyField(db_column='shared_with_group_id', rel_model=Namespaces, related_name='namespaces_shared_with_group_set', to_field='id')
    expires_at = DateField(null=True)
    group_access = IntegerField()

    class Meta:
        db_table = 'group_group_links'
        indexes = (
            (('shared_group', 'shared_with_group'), True),
        )

class GroupImportStates(BaseModel):
    group = ForeignKeyField(db_column='group_id', primary_key=True, rel_model=Namespaces, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    status = IntegerField()
    jid = TextField(null=True)
    last_error = TextField(null=True)
    user = ForeignKeyField(db_column='user_id', null=True, rel_model=Users, to_field='id')

    class Meta:
        db_table = 'group_import_states'

class GroupMergeRequestApprovalSettings(BaseModel):
    created_at = DateTimeField()
    updated_at = DateTimeField()
    group = ForeignKeyField(db_column='group_id', primary_key=True, rel_model=Namespaces, to_field='id')
    allow_author_approval = BooleanField()
    allow_committer_approval = BooleanField()
    allow_overrides_to_approver_list_per_merge_request = BooleanField()
    retain_approvals_on_push = BooleanField()
    require_password_to_approve = BooleanField()

    class Meta:
        db_table = 'group_merge_request_approval_settings'

class GroupRepositoryStorageMoves(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    group = ForeignKeyField(db_column='group_id', rel_model=Namespaces, to_field='id')
    state = IntegerField()
    source_storage_name = TextField()
    destination_storage_name = TextField()

    class Meta:
        db_table = 'group_repository_storage_moves'

class GroupWikiRepositories(BaseModel):
    shard = ForeignKeyField(db_column='shard_id', rel_model=Shards, to_field='id')
    group = ForeignKeyField(db_column='group_id', primary_key=True, rel_model=Namespaces, to_field='id')
    disk_path = TextField(unique=True)

    class Meta:
        db_table = 'group_wiki_repositories'

class HistoricalData(BaseModel):
    date = DateField(null=True)
    active_user_count = IntegerField(null=True)
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    recorded_at = DateTimeField(index=True, null=True)

    class Meta:
        db_table = 'historical_data'

class SamlProviders(BaseModel):
    group = ForeignKeyField(db_column='group_id', rel_model=Namespaces, to_field='id')
    enabled = BooleanField()
    certificate_fingerprint = CharField()
    sso_url = CharField()
    enforced_sso = BooleanField()
    enforced_group_managed_accounts = BooleanField()
    prohibited_outer_forks = BooleanField()
    default_membership_role = IntegerField()
    git_check_enforced = BooleanField()

    class Meta:
        db_table = 'saml_providers'

class Identities(BaseModel):
    extern_uid = CharField(null=True)
    provider = CharField(index=True, null=True)
    user = IntegerField(db_column='user_id', index=True, null=True)
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    secondary_extern_uid = CharField(null=True)
    saml_provider = ForeignKeyField(db_column='saml_provider_id', null=True, rel_model=SamlProviders, to_field='id')

    class Meta:
        db_table = 'identities'

class ImportExportUploads(BaseModel):
    updated_at = DateTimeField(index=True)
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    import_file = TextField(null=True)
    export_file = TextField(null=True)
    group = ForeignKeyField(db_column='group_id', null=True, rel_model=Namespaces, to_field='id', unique=True)
    remote_import_url = TextField(null=True)

    class Meta:
        db_table = 'import_export_uploads'

class ImportFailures(BaseModel):
    id = BigIntegerField(primary_key=True)
    relation_index = IntegerField(null=True)
    project = BigIntegerField(db_column='project_id', index=True, null=True)
    created_at = DateTimeField()
    relation_key = CharField(null=True)
    exception_class = CharField(null=True)
    correlation_id_value = CharField(index=True, null=True)
    exception_message = CharField(null=True)
    retry_count = IntegerField(null=True)
    group = ForeignKeyField(db_column='group_id', null=True, rel_model=Namespaces, to_field='id')
    source = CharField(null=True)

    class Meta:
        db_table = 'import_failures'
        indexes = (
            (('project', 'correlation_id_value'), False),
        )

class InProductMarketingEmails(BaseModel):
    id = BigIntegerField(primary_key=True)
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')
    cta_clicked_at = DateTimeField(null=True)
    track = IntegerField()
    series = IntegerField()
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'in_product_marketing_emails'
        indexes = (
            (('user', 'track', 'series'), True),
        )

class IncidentManagementEscalationPolicies(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    name = TextField()
    description = TextField(null=True)

    class Meta:
        db_table = 'incident_management_escalation_policies'
        indexes = (
            (('project', 'name'), True),
        )

class IncidentManagementOncallSchedules(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    iid = IntegerField()
    name = TextField()
    description = TextField(null=True)
    timezone = TextField(null=True)

    class Meta:
        db_table = 'incident_management_oncall_schedules'
        indexes = (
            (('project', 'iid'), True),
        )

class IncidentManagementEscalationRules(BaseModel):
    id = BigIntegerField(primary_key=True)
    policy = ForeignKeyField(db_column='policy_id', rel_model=IncidentManagementEscalationPolicies, to_field='id')
    oncall_schedule = ForeignKeyField(db_column='oncall_schedule_id', null=True, rel_model=IncidentManagementOncallSchedules, to_field='id')
    status = IntegerField()
    elapsed_time_seconds = IntegerField()
    is_removed = BooleanField()
    user = ForeignKeyField(db_column='user_id', null=True, rel_model=Users, to_field='id')

    class Meta:
        db_table = 'incident_management_escalation_rules'
        indexes = (
            (('policy', 'oncall_schedule', 'status', 'elapsed_time_seconds', 'user'), True),
        )

class IncidentManagementIssuableEscalationStatuses(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    issue = ForeignKeyField(db_column='issue_id', rel_model=Issues, to_field='id', unique=True)
    policy = ForeignKeyField(db_column='policy_id', null=True, rel_model=IncidentManagementEscalationPolicies, to_field='id')
    escalations_started_at = DateTimeField(null=True)
    resolved_at = DateTimeField(null=True)
    status = IntegerField()

    class Meta:
        db_table = 'incident_management_issuable_escalation_statuses'

class IncidentManagementOncallRotations(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    oncall_schedule = ForeignKeyField(db_column='oncall_schedule_id', rel_model=IncidentManagementOncallSchedules, to_field='id')
    length = IntegerField()
    length_unit = IntegerField()
    starts_at = DateTimeField()
    name = TextField()
    ends_at = DateTimeField(null=True)
    active_period_start = TimeField(null=True)
    active_period_end = TimeField(null=True)

    class Meta:
        db_table = 'incident_management_oncall_rotations'
        indexes = (
            (('id', 'oncall_schedule'), True),
            (('oncall_schedule', 'name'), True),
        )

class IncidentManagementOncallParticipants(BaseModel):
    id = BigIntegerField(primary_key=True)
    oncall_rotation = ForeignKeyField(db_column='oncall_rotation_id', rel_model=IncidentManagementOncallRotations, to_field='id')
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')
    color_palette = IntegerField()
    color_weight = IntegerField()
    is_removed = BooleanField()

    class Meta:
        db_table = 'incident_management_oncall_participants'
        indexes = (
            (('oncall_rotation', 'is_removed'), False),
            (('oncall_rotation', 'user'), True),
        )

class IncidentManagementOncallShifts(BaseModel):
    id = BigIntegerField(primary_key=True)
    rotation = ForeignKeyField(db_column='rotation_id', rel_model=IncidentManagementOncallRotations, to_field='id')
    participant = ForeignKeyField(db_column='participant_id', rel_model=IncidentManagementOncallParticipants, to_field='id')
    starts_at = DateTimeField()
    ends_at = DateTimeField()

    class Meta:
        db_table = 'incident_management_oncall_shifts'
        indexes = (
            (('rotation', 'starts_at', 'ends_at'), False),
        )

class IncidentManagementPendingAlertEscalations(BaseModel):
    id = BigIntegerField()
    rule = ForeignKeyField(db_column='rule_id', rel_model=IncidentManagementEscalationRules, to_field='id')
    alert = ForeignKeyField(db_column='alert_id', rel_model=AlertManagementAlerts, to_field='id')
    process_at = DateTimeField()
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'incident_management_pending_alert_escalations'
        primary_key = CompositeKey('id', 'process_at')

class IncidentManagementPendingIssueEscalations(BaseModel):
    id = BigIntegerField()
    rule = ForeignKeyField(db_column='rule_id', rel_model=IncidentManagementEscalationRules, to_field='id')
    issue = ForeignKeyField(db_column='issue_id', rel_model=Issues, to_field='id')
    process_at = DateTimeField()
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'incident_management_pending_issue_escalations'
        primary_key = CompositeKey('id', 'process_at')

class IndexStatuses(BaseModel):
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id', unique=True)
    indexed_at = DateTimeField(null=True)
    note = TextField(null=True)
    last_commit = CharField(null=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    last_wiki_commit = BlobField(null=True)
    wiki_indexed_at = DateTimeField(null=True)

    class Meta:
        db_table = 'index_statuses'

class Insights(BaseModel):
    namespace = ForeignKeyField(db_column='namespace_id', rel_model=Namespaces, to_field='id')
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')

    class Meta:
        db_table = 'insights'

class InternalIds(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    usage = IntegerField()
    last_value = IntegerField()
    namespace = ForeignKeyField(db_column='namespace_id', null=True, rel_model=Namespaces, to_field='id')

    class Meta:
        db_table = 'internal_ids'
        indexes = (
            (('usage', 'namespace'), True),
            (('usage', 'project'), True),
        )

class IpRestrictions(BaseModel):
    id = BigIntegerField(primary_key=True)
    group = ForeignKeyField(db_column='group_id', rel_model=Namespaces, to_field='id')
    range = CharField()

    class Meta:
        db_table = 'ip_restrictions'

class IssuableMetricImages(BaseModel):
    id = BigIntegerField(primary_key=True)
    issue = ForeignKeyField(db_column='issue_id', rel_model=Issues, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    file_store = IntegerField(null=True)
    file = TextField()
    url = TextField(null=True)

    class Meta:
        db_table = 'issuable_metric_images'

class IssuableSeverities(BaseModel):
    id = BigIntegerField(primary_key=True)
    issue = ForeignKeyField(db_column='issue_id', rel_model=Issues, to_field='id', unique=True)
    severity = IntegerField()

    class Meta:
        db_table = 'issuable_severities'

class IssuableSlas(BaseModel):
    id = BigIntegerField(primary_key=True)
    issue = ForeignKeyField(db_column='issue_id', rel_model=Issues, to_field='id', unique=True)
    due_at = DateTimeField()
    label_applied = BooleanField()
    issuable_closed = BooleanField()

    class Meta:
        db_table = 'issuable_slas'
        indexes = (
            (('id', 'due_at'), False),
        )

class IssueAssignees(BaseModel):
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')
    issue = ForeignKeyField(db_column='issue_id', rel_model=Issues, to_field='id')

    class Meta:
        db_table = 'issue_assignees'
        indexes = (
            (('user', 'issue'), True),
        )
        primary_key = CompositeKey('issue', 'user')

class IssueCustomerRelationsContacts(BaseModel):
    id = BigIntegerField(primary_key=True)
    issue = ForeignKeyField(db_column='issue_id', rel_model=Issues, to_field='id')
    contact = ForeignKeyField(db_column='contact_id', rel_model=CustomerRelationsContacts, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'issue_customer_relations_contacts'
        indexes = (
            (('issue', 'contact'), True),
        )

class IssueEmailParticipants(BaseModel):
    id = BigIntegerField(primary_key=True)
    issue = ForeignKeyField(db_column='issue_id', rel_model=Issues, to_field='id', unique=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    email = TextField()

    class Meta:
        db_table = 'issue_email_participants'

class IssueLinks(BaseModel):
    source = ForeignKeyField(db_column='source_id', rel_model=Issues, to_field='id')
    target = ForeignKeyField(db_column='target_id', rel_model=Issues, related_name='issues_target_set', to_field='id')
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    link_type = IntegerField()

    class Meta:
        db_table = 'issue_links'
        indexes = (
            (('source', 'target'), True),
        )

class IssueMetrics(BaseModel):
    issue = ForeignKeyField(db_column='issue_id', rel_model=Issues, to_field='id')
    first_mentioned_in_commit_at = DateTimeField(null=True)
    first_associated_with_milestone_at = DateTimeField(null=True)
    first_added_to_board_at = DateTimeField(null=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'issue_metrics'
        indexes = (
            (('first_added_to_board_at', 'first_mentioned_in_commit_at', 'issue', 'first_associated_with_milestone_at'), False),
        )

class IssueTrackerData(BaseModel):
    id = BigIntegerField(primary_key=True)
    service = ForeignKeyField(db_column='service_id', rel_model=Integrations, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    encrypted_project_url = CharField(null=True)
    encrypted_project_url_iv = CharField(null=True)
    encrypted_issues_url = CharField(null=True)
    encrypted_issues_url_iv = CharField(null=True)
    encrypted_new_issue_url = CharField(null=True)
    encrypted_new_issue_url_iv = CharField(null=True)

    class Meta:
        db_table = 'issue_tracker_data'

class IssueUserMentions(BaseModel):
    id = BigIntegerField(primary_key=True)
    issue = ForeignKeyField(db_column='issue_id', rel_model=Issues, to_field='id', unique=True)
    note = ForeignKeyField(db_column='note_id', null=True, rel_model=Notes, to_field='id', unique=True)
    mentioned_users_ids = UnknownField(null=True)  # ARRAY
    mentioned_projects_ids = UnknownField(null=True)  # ARRAY
    mentioned_groups_ids = UnknownField(null=True)  # ARRAY

    class Meta:
        db_table = 'issue_user_mentions'
        indexes = (
            (('issue', 'note'), True),
        )

class PrometheusAlertEvents(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    prometheus_alert = ForeignKeyField(db_column='prometheus_alert_id', rel_model=PrometheusAlerts, to_field='id')
    started_at = DateTimeField()
    ended_at = DateTimeField(null=True)
    status = IntegerField(null=True)
    payload_key = CharField(null=True)

    class Meta:
        db_table = 'prometheus_alert_events'
        indexes = (
            (('project', 'status'), False),
            (('prometheus_alert', 'payload_key'), True),
        )

class IssuesPrometheusAlertEvents(BaseModel):
    issue = ForeignKeyField(db_column='issue_id', rel_model=Issues, to_field='id')
    prometheus_alert_event = ForeignKeyField(db_column='prometheus_alert_event_id', rel_model=PrometheusAlertEvents, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'issues_prometheus_alert_events'
        indexes = (
            (('issue', 'prometheus_alert_event'), True),
        )
        primary_key = CompositeKey('issue', 'prometheus_alert_event')

class SelfManagedPrometheusAlertEvents(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    environment = ForeignKeyField(db_column='environment_id', null=True, rel_model=Environments, to_field='id')
    started_at = DateTimeField()
    ended_at = DateTimeField(null=True)
    status = IntegerField()
    title = CharField()
    query_expression = CharField(null=True)
    payload_key = CharField()

    class Meta:
        db_table = 'self_managed_prometheus_alert_events'
        indexes = (
            (('project', 'payload_key'), True),
        )

class IssuesSelfManagedPrometheusAlertEvents(BaseModel):
    issue = ForeignKeyField(db_column='issue_id', rel_model=Issues, to_field='id')
    self_managed_prometheus_alert_event = ForeignKeyField(db_column='self_managed_prometheus_alert_event_id', rel_model=SelfManagedPrometheusAlertEvents, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'issues_self_managed_prometheus_alert_events'
        indexes = (
            (('issue', 'self_managed_prometheus_alert_event'), True),
        )
        primary_key = CompositeKey('issue', 'self_managed_prometheus_alert_event')

class JiraConnectInstallations(BaseModel):
    id = BigIntegerField(primary_key=True)
    client_key = CharField(null=True, unique=True)
    encrypted_shared_secret = CharField(null=True)
    encrypted_shared_secret_iv = CharField(null=True)
    base_url = CharField(null=True)
    instance_url = TextField(null=True)

    class Meta:
        db_table = 'jira_connect_installations'

class JiraConnectSubscriptions(BaseModel):
    id = BigIntegerField(primary_key=True)
    jira_connect_installation = ForeignKeyField(db_column='jira_connect_installation_id', rel_model=JiraConnectInstallations, to_field='id')
    namespace = ForeignKeyField(db_column='namespace_id', rel_model=Namespaces, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'jira_connect_subscriptions'
        indexes = (
            (('jira_connect_installation', 'namespace'), True),
        )

class JiraImports(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    user = ForeignKeyField(db_column='user_id', null=True, rel_model=Users, to_field='id')
    label = ForeignKeyField(db_column='label_id', null=True, rel_model=Labels, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    finished_at = DateTimeField(null=True)
    jira_project_xid = BigIntegerField()
    total_issue_count = IntegerField()
    imported_issues_count = IntegerField()
    failed_to_import_count = IntegerField()
    status = IntegerField()
    jid = CharField(null=True)
    jira_project_key = CharField()
    jira_project_name = CharField()
    scheduled_at = DateTimeField(null=True)
    error_message = TextField(null=True)

    class Meta:
        db_table = 'jira_imports'
        indexes = (
            (('project', 'jira_project_key'), False),
        )

class JiraTrackerData(BaseModel):
    id = BigIntegerField(primary_key=True)
    service = ForeignKeyField(db_column='service_id', rel_model=Integrations, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    encrypted_url = CharField(null=True)
    encrypted_url_iv = CharField(null=True)
    encrypted_api_url = CharField(null=True)
    encrypted_api_url_iv = CharField(null=True)
    encrypted_username = CharField(null=True)
    encrypted_username_iv = CharField(null=True)
    encrypted_password = CharField(null=True)
    encrypted_password_iv = CharField(null=True)
    jira_issue_transition = CharField(db_column='jira_issue_transition_id', null=True)
    project_key = TextField(null=True)
    issues_enabled = BooleanField()
    deployment_type = IntegerField()
    vulnerabilities_issuetype = TextField(null=True)
    vulnerabilities_enabled = BooleanField()
    jira_issue_transition_automatic = BooleanField()

    class Meta:
        db_table = 'jira_tracker_data'

class Keys(BaseModel):
    user = IntegerField(db_column='user_id', index=True, null=True)
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    key = TextField(null=True)
    title = CharField(null=True)
    type = CharField(null=True)
    fingerprint = CharField(null=True, unique=True)
    public = BooleanField()
    last_used_at = DateTimeField(index=True, null=True)
    fingerprint_sha256 = BlobField(index=True, null=True)
    expires_at = DateTimeField(null=True)
    expiry_notification_delivered_at = DateTimeField(index=True, null=True)
    before_expiry_notification_delivered_at = DateTimeField(index=True, null=True)

    class Meta:
        db_table = 'keys'
        indexes = (
            (('type', 'id'), True),
        )

class LabelLinks(BaseModel):
    label = ForeignKeyField(db_column='label_id', null=True, rel_model=Labels, to_field='id')
    target = IntegerField(db_column='target_id', null=True)
    target_type = CharField(null=True)
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'label_links'
        indexes = (
            (('label', 'target', 'target_type'), False),
            (('label', 'target_type'), False),
            (('target', 'target_type'), False),
        )

class LabelPriorities(BaseModel):
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    label = ForeignKeyField(db_column='label_id', rel_model=Labels, to_field='id')
    priority = IntegerField(index=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'label_priorities'
        indexes = (
            (('project', 'label'), True),
        )

class LdapGroupLinks(BaseModel):
    cn = CharField(null=True)
    group_access = IntegerField()
    group = IntegerField(db_column='group_id')
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    provider = CharField(null=True)
    filter = CharField(null=True)

    class Meta:
        db_table = 'ldap_group_links'

class LfsFileLocks(BaseModel):
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')
    created_at = DateTimeField()
    path = CharField(null=True)

    class Meta:
        db_table = 'lfs_file_locks'
        indexes = (
            (('project', 'path'), True),
        )

class LfsObjects(BaseModel):
    oid = CharField(unique=True)
    size = BigIntegerField()
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    file = CharField(null=True)
    file_store = IntegerField(index=True, null=True)

    class Meta:
        db_table = 'lfs_objects'

class LfsObjectsProjects(BaseModel):
    lfs_object = ForeignKeyField(db_column='lfs_object_id', rel_model=LfsObjects, to_field='id')
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    repository_type = IntegerField(null=True)

    class Meta:
        db_table = 'lfs_objects_projects'
        indexes = (
            (('lfs_object', 'project'), False),
        )

class Licenses(BaseModel):
    data = TextField()
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    cloud = BooleanField(null=True)
    last_synced_at = DateTimeField(null=True)

    class Meta:
        db_table = 'licenses'

class Lists(BaseModel):
    board = ForeignKeyField(db_column='board_id', rel_model=Boards, to_field='id')
    label = ForeignKeyField(db_column='label_id', null=True, rel_model=Labels, to_field='id')
    list_type = IntegerField(index=True)
    position = IntegerField(null=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    user = ForeignKeyField(db_column='user_id', null=True, rel_model=Users, to_field='id')
    milestone = ForeignKeyField(db_column='milestone_id', null=True, rel_model=Milestones, to_field='id')
    max_issue_count = IntegerField()
    max_issue_weight = IntegerField()
    limit_metric = CharField(null=True)
    iteration = ForeignKeyField(db_column='iteration_id', null=True, rel_model=Sprints, to_field='id')

    class Meta:
        db_table = 'lists'
        indexes = (
            (('board', 'label'), True),
        )

class ListUserPreferences(BaseModel):
    id = BigIntegerField(primary_key=True)
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')
    list = ForeignKeyField(db_column='list_id', rel_model=Lists, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    collapsed = BooleanField(null=True)

    class Meta:
        db_table = 'list_user_preferences'
        indexes = (
            (('user', 'list'), True),
        )

class LooseForeignKeysDeletedRecords(BaseModel):
    id = BigIntegerField()
    partition = BigIntegerField()
    primary_key_value = BigIntegerField()
    status = IntegerField()
    created_at = DateTimeField()
    fully_qualified_table_name = TextField()

    class Meta:
        db_table = 'loose_foreign_keys_deleted_records'
        primary_key = CompositeKey('id', 'partition')

class Members(BaseModel):
    access_level = IntegerField(index=True)
    source = IntegerField(db_column='source_id')
    source_type = CharField()
    user = ForeignKeyField(db_column='user_id', null=True, rel_model=Users, to_field='id')
    notification_level = IntegerField()
    type = CharField(null=True)
    created_at = DateTimeField(index=True, null=True)
    updated_at = DateTimeField(null=True)
    created_by = IntegerField(db_column='created_by_id', null=True)
    invite_email = CharField(index=True, null=True)
    invite_token = CharField(null=True, unique=True)
    invite_accepted_at = DateTimeField(null=True)
    requested_at = DateTimeField(index=True, null=True)
    expires_at = DateField(index=True, null=True)
    ldap = BooleanField()
    override = BooleanField()
    state = IntegerField(null=True)
    invite_email_success = BooleanField()

    class Meta:
        db_table = 'members'
        indexes = (
            (('access_level', 'user'), False),
            (('source', 'source_type'), False),
            (('source', 'source_type'), False),
            (('source', 'source_type', 'user'), False),
            (('user', 'created_at'), False),
        )

class MergeRequestAssignees(BaseModel):
    id = BigIntegerField(primary_key=True)
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')
    merge_request = ForeignKeyField(db_column='merge_request_id', rel_model=MergeRequests, to_field='id')
    created_at = DateTimeField(null=True)

    class Meta:
        db_table = 'merge_request_assignees'
        indexes = (
            (('user', 'merge_request'), True),
        )

class MergeRequestBlocks(BaseModel):
    id = BigIntegerField(primary_key=True)
    blocking_merge_request = ForeignKeyField(db_column='blocking_merge_request_id', rel_model=MergeRequests, related_name='merge_requests_blocking_merge_request_set', to_field='id')
    blocked_merge_request = ForeignKeyField(db_column='blocked_merge_request_id', rel_model=MergeRequests, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'merge_request_blocks'
        indexes = (
            (('blocking_merge_request', 'blocked_merge_request'), True),
        )

class MergeRequestCleanupSchedules(BaseModel):
    merge_request = ForeignKeyField(db_column='merge_request_id', primary_key=True, rel_model=MergeRequests, to_field='id')
    scheduled_at = DateTimeField(index=True)
    completed_at = DateTimeField(null=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    status = IntegerField(index=True)
    failed_count = IntegerField()

    class Meta:
        db_table = 'merge_request_cleanup_schedules'

class MergeRequestContextCommits(BaseModel):
    id = BigIntegerField(primary_key=True)
    authored_date = DateTimeField(null=True)
    committed_date = DateTimeField(null=True)
    relative_order = IntegerField()
    sha = BlobField()
    author_name = TextField(null=True)
    author_email = TextField(null=True)
    committer_name = TextField(null=True)
    committer_email = TextField(null=True)
    message = TextField(null=True)
    merge_request = ForeignKeyField(db_column='merge_request_id', null=True, rel_model=MergeRequests, to_field='id')
    trailers = JSONField()

    class Meta:
        db_table = 'merge_request_context_commits'
        indexes = (
            (('sha', 'merge_request'), True),
        )

class MergeRequestContextCommitDiffFiles(BaseModel):
    sha = BlobField()
    relative_order = IntegerField()
    new_file = BooleanField()
    renamed_file = BooleanField()
    deleted_file = BooleanField()
    too_large = BooleanField()
    a_mode = CharField()
    b_mode = CharField()
    new_path = TextField()
    old_path = TextField()
    diff = TextField(null=True)
    binary = BooleanField(null=True)
    merge_request_context_commit = ForeignKeyField(db_column='merge_request_context_commit_id', rel_model=MergeRequestContextCommits, to_field='id')

    class Meta:
        db_table = 'merge_request_context_commit_diff_files'
        indexes = (
            (('relative_order', 'merge_request_context_commit'), True),
            (('sha', 'merge_request_context_commit'), False),
        )
        primary_key = CompositeKey('merge_request_context_commit', 'relative_order')

class MergeRequestDiffCommitUsers(BaseModel):
    id = BigIntegerField(primary_key=True)
    name = TextField(null=True)
    email = TextField(null=True)

    class Meta:
        db_table = 'merge_request_diff_commit_users'
        indexes = (
            (('name', 'email'), True),
        )

class MergeRequestDiffCommits(BaseModel):
    authored_date = DateTimeField(null=True)
    committed_date = DateTimeField(null=True)
    merge_request_diff = ForeignKeyField(db_column='merge_request_diff_id', rel_model=MergeRequestDiffs, to_field='id')
    relative_order = IntegerField()
    sha = BlobField(index=True)
    author_name = TextField(null=True)
    author_email = TextField(null=True)
    committer_name = TextField(null=True)
    committer_email = TextField(null=True)
    message = TextField(null=True)
    trailers = JSONField()
    commit_author = BigIntegerField(db_column='commit_author_id', null=True)
    committer = BigIntegerField(db_column='committer_id', null=True)

    class Meta:
        db_table = 'merge_request_diff_commits'
        indexes = (
            (('merge_request_diff', 'relative_order'), True),
        )
        primary_key = CompositeKey('merge_request_diff', 'relative_order')

class MergeRequestDiffDetails(BaseModel):
    merge_request_diff = ForeignKeyField(db_column='merge_request_diff_id', primary_key=True, rel_model=MergeRequestDiffs, to_field='id')
    verification_retry_at = DateTimeField(index=True, null=True)
    verified_at = DateTimeField(index=True, null=True)
    verification_retry_count = IntegerField(null=True)
    verification_checksum = BlobField(null=True)
    verification_failure = TextField(null=True)
    verification_state = IntegerField(index=True)
    verification_started_at = DateTimeField(null=True)

    class Meta:
        db_table = 'merge_request_diff_details'

class MergeRequestDiffFiles(BaseModel):
    merge_request_diff = ForeignKeyField(db_column='merge_request_diff_id', rel_model=MergeRequestDiffs, to_field='id')
    relative_order = IntegerField()
    new_file = BooleanField()
    renamed_file = BooleanField()
    deleted_file = BooleanField()
    too_large = BooleanField()
    a_mode = CharField()
    b_mode = CharField()
    new_path = TextField()
    old_path = TextField()
    diff = TextField(null=True)
    binary = BooleanField(null=True)
    external_diff_offset = IntegerField(null=True)
    external_diff_size = IntegerField(null=True)

    class Meta:
        db_table = 'merge_request_diff_files'
        indexes = (
            (('merge_request_diff', 'relative_order'), True),
        )
        primary_key = CompositeKey('merge_request_diff', 'relative_order')

class MergeRequestMetrics(BaseModel):
    merge_request = ForeignKeyField(db_column='merge_request_id', rel_model=MergeRequests, to_field='id', unique=True)
    latest_build_started_at = DateTimeField(null=True)
    latest_build_finished_at = DateTimeField(null=True)
    first_deployed_to_production_at = DateTimeField(index=True, null=True)
    merged_at = DateTimeField(index=True, null=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    pipeline = ForeignKeyField(db_column='pipeline_id', null=True, rel_model=CiPipelines, to_field='id')
    merged_by = ForeignKeyField(db_column='merged_by_id', null=True, rel_model=Users, related_name='users_merged_by_set', to_field='id')
    latest_closed_by = ForeignKeyField(db_column='latest_closed_by_id', null=True, rel_model=Users, to_field='id')
    latest_closed_at = DateTimeField(index=True, null=True)
    first_comment_at = DateTimeField(null=True)
    first_commit_at = DateTimeField(null=True)
    last_commit_at = DateTimeField(null=True)
    diff_size = IntegerField(null=True)
    modified_paths_size = IntegerField(null=True)
    commits_count = IntegerField(null=True)
    first_approved_at = DateTimeField(null=True)
    first_reassigned_at = DateTimeField(null=True)
    added_lines = IntegerField(null=True)
    removed_lines = IntegerField(null=True)
    target_project = ForeignKeyField(db_column='target_project_id', null=True, rel_model=Projects, to_field='id')

    class Meta:
        db_table = 'merge_request_metrics'
        indexes = (
            (('merged_at', 'created_at', 'target_project'), False),
            (('merged_at', 'merge_request'), False),
            (('merged_at', 'target_project', 'id'), False),
        )

class MergeRequestReviewers(BaseModel):
    id = BigIntegerField(primary_key=True)
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')
    merge_request = ForeignKeyField(db_column='merge_request_id', rel_model=MergeRequests, to_field='id')
    created_at = DateTimeField()
    state = IntegerField()

    class Meta:
        db_table = 'merge_request_reviewers'
        indexes = (
            (('user', 'merge_request'), True),
        )

class MergeRequestUserMentions(BaseModel):
    id = BigIntegerField(primary_key=True)
    merge_request = ForeignKeyField(db_column='merge_request_id', rel_model=MergeRequests, to_field='id', unique=True)
    note = ForeignKeyField(db_column='note_id', null=True, rel_model=Notes, to_field='id', unique=True)
    mentioned_users_ids = UnknownField(null=True)  # ARRAY
    mentioned_projects_ids = UnknownField(null=True)  # ARRAY
    mentioned_groups_ids = UnknownField(null=True)  # ARRAY

    class Meta:
        db_table = 'merge_request_user_mentions'
        indexes = (
            (('merge_request', 'note'), True),
        )

class MergeRequestsClosingIssues(BaseModel):
    merge_request = ForeignKeyField(db_column='merge_request_id', rel_model=MergeRequests, to_field='id')
    issue = ForeignKeyField(db_column='issue_id', rel_model=Issues, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'merge_requests_closing_issues'

class MergeTrains(BaseModel):
    id = BigIntegerField(primary_key=True)
    merge_request = ForeignKeyField(db_column='merge_request_id', rel_model=MergeRequests, to_field='id', unique=True)
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')
    pipeline = ForeignKeyField(db_column='pipeline_id', null=True, rel_model=CiPipelines, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    target_project = ForeignKeyField(db_column='target_project_id', rel_model=Projects, to_field='id')
    target_branch = TextField()
    status = IntegerField()
    merged_at = DateTimeField(null=True)
    duration = IntegerField(null=True)

    class Meta:
        db_table = 'merge_trains'
        indexes = (
            (('target_branch', 'status', 'target_project'), False),
        )

class MetricsDashboardAnnotations(BaseModel):
    id = BigIntegerField(primary_key=True)
    starting_at = DateTimeField()
    ending_at = DateTimeField(null=True)
    environment = ForeignKeyField(db_column='environment_id', null=True, rel_model=Environments, to_field='id')
    cluster = ForeignKeyField(db_column='cluster_id', null=True, rel_model=Clusters, to_field='id')
    dashboard_path = CharField()
    panel_xid = CharField(null=True)
    description = TextField()

    class Meta:
        db_table = 'metrics_dashboard_annotations'
        indexes = (
            (('starting_at', 'ending_at', 'cluster', 'dashboard_path'), False),
            (('starting_at', 'ending_at', 'environment', 'dashboard_path'), False),
        )

class MetricsUsersStarredDashboards(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')
    dashboard_path = TextField()

    class Meta:
        db_table = 'metrics_users_starred_dashboards'
        indexes = (
            (('project', 'user', 'dashboard_path'), True),
        )

class MilestoneReleases(BaseModel):
    milestone = ForeignKeyField(db_column='milestone_id', rel_model=Milestones, to_field='id')
    release = ForeignKeyField(db_column='release_id', rel_model=Releases, to_field='id')

    class Meta:
        db_table = 'milestone_releases'
        indexes = (
            (('milestone', 'release'), True),
        )
        primary_key = CompositeKey('milestone', 'release')

class NamespaceAdminNotes(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    namespace = ForeignKeyField(db_column='namespace_id', rel_model=Namespaces, to_field='id')
    note = TextField(null=True)

    class Meta:
        db_table = 'namespace_admin_notes'

class NamespaceAggregationSchedules(BaseModel):
    namespace = ForeignKeyField(db_column='namespace_id', primary_key=True, rel_model=Namespaces, to_field='id')

    class Meta:
        db_table = 'namespace_aggregation_schedules'

class NamespaceLimits(BaseModel):
    additional_purchased_storage_size = BigIntegerField()
    additional_purchased_storage_ends_on = DateField(null=True)
    namespace = ForeignKeyField(db_column='namespace_id', primary_key=True, rel_model=Namespaces, to_field='id')
    temporary_storage_increase_ends_on = DateField(null=True)

    class Meta:
        db_table = 'namespace_limits'

class NamespacePackageSettings(BaseModel):
    namespace = ForeignKeyField(db_column='namespace_id', primary_key=True, rel_model=Namespaces, to_field='id')
    maven_duplicates_allowed = BooleanField()
    maven_duplicate_exception_regex = TextField()
    generic_duplicates_allowed = BooleanField()
    generic_duplicate_exception_regex = TextField()

    class Meta:
        db_table = 'namespace_package_settings'

class NamespaceRootStorageStatistics(BaseModel):
    namespace = ForeignKeyField(db_column='namespace_id', primary_key=True, rel_model=Namespaces, to_field='id')
    updated_at = DateTimeField()
    repository_size = BigIntegerField()
    lfs_objects_size = BigIntegerField()
    wiki_size = BigIntegerField()
    build_artifacts_size = BigIntegerField()
    storage_size = BigIntegerField()
    packages_size = BigIntegerField()
    snippets_size = BigIntegerField()
    pipeline_artifacts_size = BigIntegerField()
    uploads_size = BigIntegerField()

    class Meta:
        db_table = 'namespace_root_storage_statistics'

class NamespaceSettings(BaseModel):
    created_at = DateTimeField()
    updated_at = DateTimeField()
    namespace = ForeignKeyField(db_column='namespace_id', primary_key=True, rel_model=Namespaces, to_field='id')
    prevent_forking_outside_group = BooleanField()
    allow_mfa_for_subgroups = BooleanField()
    default_branch_name = TextField(null=True)
    repository_read_only = BooleanField()
    delayed_project_removal = BooleanField(null=True)
    resource_access_token_creation_allowed = BooleanField()
    lock_delayed_project_removal = BooleanField()
    prevent_sharing_groups_outside_hierarchy = BooleanField()
    new_user_signups_cap = IntegerField(null=True)
    setup_for_company = BooleanField(null=True)
    jobs_to_be_done = IntegerField(null=True)

    class Meta:
        db_table = 'namespace_settings'

class NamespaceStatistics(BaseModel):
    namespace = ForeignKeyField(db_column='namespace_id', rel_model=Namespaces, to_field='id', unique=True)
    shared_runners_seconds = IntegerField()
    shared_runners_seconds_last_reset = DateTimeField(null=True)
    storage_size = BigIntegerField()
    wiki_size = BigIntegerField()

    class Meta:
        db_table = 'namespace_statistics'

class NoteDiffFiles(BaseModel):
    diff_note = ForeignKeyField(db_column='diff_note_id', rel_model=Notes, to_field='id', unique=True)
    diff = TextField()
    new_file = BooleanField()
    renamed_file = BooleanField()
    deleted_file = BooleanField()
    a_mode = CharField()
    b_mode = CharField()
    new_path = TextField()
    old_path = TextField()

    class Meta:
        db_table = 'note_diff_files'

class NotificationSettings(BaseModel):
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')
    source = IntegerField(db_column='source_id', null=True)
    source_type = CharField(null=True)
    level = IntegerField()
    created_at = DateTimeField()
    updated_at = DateTimeField()
    new_note = BooleanField(null=True)
    new_issue = BooleanField(null=True)
    reopen_issue = BooleanField(null=True)
    close_issue = BooleanField(null=True)
    reassign_issue = BooleanField(null=True)
    new_merge_request = BooleanField(null=True)
    reopen_merge_request = BooleanField(null=True)
    close_merge_request = BooleanField(null=True)
    reassign_merge_request = BooleanField(null=True)
    merge_merge_request = BooleanField(null=True)
    failed_pipeline = BooleanField(null=True)
    success_pipeline = BooleanField(null=True)
    push_to_merge_request = BooleanField(null=True)
    issue_due = BooleanField(null=True)
    new_epic = BooleanField(null=True)
    notification_email = CharField(null=True)
    fixed_pipeline = BooleanField(null=True)
    new_release = BooleanField(null=True)
    moved_project = BooleanField()
    change_reviewer_merge_request = BooleanField(null=True)
    merge_when_pipeline_succeeds = BooleanField()

    class Meta:
        db_table = 'notification_settings'
        indexes = (
            (('level', 'source_type', 'source', 'user'), False),
            (('user', 'source_type', 'source'), True),
        )

class OauthAccessGrants(BaseModel):
    resource_owner = IntegerField(db_column='resource_owner_id')
    application = IntegerField(db_column='application_id')
    token = CharField(unique=True)
    expires_in = IntegerField()
    redirect_uri = TextField()
    created_at = DateTimeField()
    revoked_at = DateTimeField(null=True)
    scopes = CharField(null=True)
    code_challenge = TextField(null=True)
    code_challenge_method = TextField(null=True)

    class Meta:
        db_table = 'oauth_access_grants'
        indexes = (
            (('resource_owner', 'application', 'created_at'), False),
        )

class OauthAccessTokens(BaseModel):
    resource_owner = IntegerField(db_column='resource_owner_id', index=True, null=True)
    application = IntegerField(db_column='application_id', index=True, null=True)
    token = CharField(unique=True)
    refresh_token = CharField(null=True, unique=True)
    expires_in = IntegerField(null=True)
    revoked_at = DateTimeField(null=True)
    created_at = DateTimeField()
    scopes = CharField(null=True)

    class Meta:
        db_table = 'oauth_access_tokens'

class OauthOpenidRequests(BaseModel):
    access_grant = ForeignKeyField(db_column='access_grant_id', rel_model=OauthAccessGrants, to_field='id')
    nonce = CharField()

    class Meta:
        db_table = 'oauth_openid_requests'

class OnboardingProgresses(BaseModel):
    id = BigIntegerField(primary_key=True)
    namespace = ForeignKeyField(db_column='namespace_id', rel_model=Namespaces, to_field='id', unique=True)
    created_at = DateTimeField(index=True)
    updated_at = DateTimeField()
    git_pull_at = DateTimeField(null=True)
    git_write_at = DateTimeField(index=True, null=True)
    merge_request_created_at = DateTimeField(null=True)
    pipeline_created_at = DateTimeField(null=True)
    user_added_at = DateTimeField(null=True)
    trial_started_at = DateTimeField(null=True)
    subscription_created_at = DateTimeField(null=True)
    required_mr_approvals_enabled_at = DateTimeField(null=True)
    code_owners_enabled_at = DateTimeField(null=True)
    scoped_label_created_at = DateTimeField(null=True)
    security_scan_enabled_at = DateTimeField(null=True)
    issue_auto_closed_at = DateTimeField(null=True)
    repository_imported_at = DateTimeField(null=True)
    repository_mirrored_at = DateTimeField(null=True)
    issue_created_at = DateTimeField(null=True)

    class Meta:
        db_table = 'onboarding_progresses'

class OpenProjectTrackerData(BaseModel):
    id = BigIntegerField(primary_key=True)
    service = ForeignKeyField(db_column='service_id', rel_model=Integrations, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    encrypted_url = CharField(null=True)
    encrypted_url_iv = CharField(null=True)
    encrypted_api_url = CharField(null=True)
    encrypted_api_url_iv = CharField(null=True)
    encrypted_token = CharField(null=True)
    encrypted_token_iv = CharField(null=True)
    closed_status = CharField(db_column='closed_status_id', null=True)
    project_identifier_code = CharField(null=True)

    class Meta:
        db_table = 'open_project_tracker_data'

class OperationsFeatureFlags(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    active = BooleanField()
    created_at = DateTimeField()
    updated_at = DateTimeField()
    name = CharField()
    description = TextField(null=True)
    iid = IntegerField()
    version = IntegerField()

    class Meta:
        db_table = 'operations_feature_flags'
        indexes = (
            (('project', 'iid'), True),
            (('project', 'name'), True),
        )

class OperationsFeatureFlagScopes(BaseModel):
    id = BigIntegerField(primary_key=True)
    feature_flag = ForeignKeyField(db_column='feature_flag_id', rel_model=OperationsFeatureFlags, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    active = BooleanField()
    environment_scope = CharField()
    strategies = JSONField()

    class Meta:
        db_table = 'operations_feature_flag_scopes'
        indexes = (
            (('feature_flag', 'environment_scope'), True),
        )

class OperationsFeatureFlagsClients(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    token_encrypted = CharField(null=True)

    class Meta:
        db_table = 'operations_feature_flags_clients'
        indexes = (
            (('project', 'token_encrypted'), True),
        )

class OperationsFeatureFlagsIssues(BaseModel):
    id = BigIntegerField(primary_key=True)
    feature_flag = ForeignKeyField(db_column='feature_flag_id', rel_model=OperationsFeatureFlags, to_field='id')
    issue = ForeignKeyField(db_column='issue_id', rel_model=Issues, to_field='id')

    class Meta:
        db_table = 'operations_feature_flags_issues'
        indexes = (
            (('feature_flag', 'issue'), True),
        )

class OperationsStrategies(BaseModel):
    id = BigIntegerField(primary_key=True)
    feature_flag = ForeignKeyField(db_column='feature_flag_id', rel_model=OperationsFeatureFlags, to_field='id')
    name = CharField()
    parameters = JSONField()

    class Meta:
        db_table = 'operations_strategies'

class OperationsScopes(BaseModel):
    id = BigIntegerField(primary_key=True)
    strategy = ForeignKeyField(db_column='strategy_id', rel_model=OperationsStrategies, to_field='id')
    environment_scope = CharField()

    class Meta:
        db_table = 'operations_scopes'
        indexes = (
            (('strategy', 'environment_scope'), True),
        )

class OperationsUserLists(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    iid = IntegerField()
    name = CharField()
    user_xids = TextField()

    class Meta:
        db_table = 'operations_user_lists'
        indexes = (
            (('project', 'iid'), True),
            (('project', 'name'), True),
        )

class OperationsStrategiesUserLists(BaseModel):
    id = BigIntegerField(primary_key=True)
    strategy = ForeignKeyField(db_column='strategy_id', rel_model=OperationsStrategies, to_field='id')
    user_list = ForeignKeyField(db_column='user_list_id', rel_model=OperationsUserLists, to_field='id')

    class Meta:
        db_table = 'operations_strategies_user_lists'
        indexes = (
            (('strategy', 'user_list'), True),
        )

class PackagesBuildInfos(BaseModel):
    id = BigIntegerField(primary_key=True)
    package = ForeignKeyField(db_column='package_id', rel_model=PackagesPackages, to_field='id')
    pipeline = IntegerField(db_column='pipeline_id', index=True, null=True)

    class Meta:
        db_table = 'packages_build_infos'

class PackagesComposerCacheFiles(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    delete_at = DateTimeField(null=True)
    namespace = ForeignKeyField(db_column='namespace_id', null=True, rel_model=Namespaces, to_field='id')
    file_store = IntegerField()
    file = TextField()
    file_sha256 = BlobField()

    class Meta:
        db_table = 'packages_composer_cache_files'
        indexes = (
            (('id', 'delete_at'), False),
            (('namespace', 'file_sha256'), True),
        )

class PackagesComposerMetadata(BaseModel):
    package = ForeignKeyField(db_column='package_id', primary_key=True, rel_model=PackagesPackages, to_field='id')
    target_sha = BlobField()
    composer_json = JSONField()
    version_cache_sha = BlobField(null=True)

    class Meta:
        db_table = 'packages_composer_metadata'
        indexes = (
            (('package', 'target_sha'), True),
        )

class PackagesPackageFiles(BaseModel):
    id = BigIntegerField(primary_key=True)
    package = ForeignKeyField(db_column='package_id', rel_model=PackagesPackages, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    size = BigIntegerField(null=True)
    file_store = IntegerField(index=True, null=True)
    file_md5 = BlobField(null=True)
    file_sha1 = BlobField(null=True)
    file_name = CharField()
    file = TextField()
    file_sha256 = BlobField(null=True)
    verification_retry_at = DateTimeField(index=True, null=True)
    verified_at = DateTimeField(index=True, null=True)
    verification_failure = CharField(null=True)
    verification_retry_count = IntegerField(null=True)
    verification_checksum = BlobField(null=True)
    verification_state = IntegerField(index=True)
    verification_started_at = DateTimeField(null=True)

    class Meta:
        db_table = 'packages_package_files'
        indexes = (
            (('id', 'package'), False),
            (('package', 'file_name'), False),
        )

class PackagesConanFileMetadata(BaseModel):
    id = BigIntegerField(primary_key=True)
    package_file = ForeignKeyField(db_column='package_file_id', rel_model=PackagesPackageFiles, to_field='id', unique=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    recipe_revision = CharField()
    package_revision = CharField(null=True)
    conan_package_reference = CharField(null=True)
    conan_file_type = IntegerField()

    class Meta:
        db_table = 'packages_conan_file_metadata'

class PackagesConanMetadata(BaseModel):
    id = BigIntegerField(primary_key=True)
    package = ForeignKeyField(db_column='package_id', rel_model=PackagesPackages, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    package_username = CharField()
    package_channel = CharField()

    class Meta:
        db_table = 'packages_conan_metadata'
        indexes = (
            (('package', 'package_username', 'package_channel'), True),
        )

class PackagesDebianFileMetadata(BaseModel):
    created_at = DateTimeField()
    updated_at = DateTimeField()
    package_file = ForeignKeyField(db_column='package_file_id', primary_key=True, rel_model=PackagesPackageFiles, to_field='id')
    file_type = IntegerField()
    component = TextField(null=True)
    architecture = TextField(null=True)
    fields = JSONField(null=True)

    class Meta:
        db_table = 'packages_debian_file_metadata'

class PackagesDebianGroupDistributions(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    group = ForeignKeyField(db_column='group_id', rel_model=Namespaces, to_field='id')
    creator = ForeignKeyField(db_column='creator_id', null=True, rel_model=Users, to_field='id')
    valid_time_duration_seconds = IntegerField(null=True)
    file_store = IntegerField()
    automatic = BooleanField()
    automatic_upgrades = BooleanField()
    codename = TextField()
    suite = TextField(null=True)
    origin = TextField(null=True)
    label = TextField(null=True)
    version = TextField(null=True)
    description = TextField(null=True)
    file = TextField(null=True)
    file_signature = TextField(null=True)
    signed_file = TextField(null=True)
    signed_file_store = IntegerField()

    class Meta:
        db_table = 'packages_debian_group_distributions'
        indexes = (
            (('group', 'codename'), True),
            (('suite', 'group'), True),
        )

class PackagesDebianGroupArchitectures(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    distribution = ForeignKeyField(db_column='distribution_id', rel_model=PackagesDebianGroupDistributions, to_field='id')
    name = TextField()

    class Meta:
        db_table = 'packages_debian_group_architectures'
        indexes = (
            (('distribution', 'name'), True),
        )

class PackagesDebianGroupComponents(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    distribution = ForeignKeyField(db_column='distribution_id', rel_model=PackagesDebianGroupDistributions, to_field='id')
    name = TextField()

    class Meta:
        db_table = 'packages_debian_group_components'
        indexes = (
            (('distribution', 'name'), True),
        )

class PackagesDebianGroupComponentFiles(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    component = ForeignKeyField(db_column='component_id', rel_model=PackagesDebianGroupComponents, to_field='id')
    architecture = ForeignKeyField(db_column='architecture_id', null=True, rel_model=PackagesDebianGroupArchitectures, to_field='id')
    size = IntegerField()
    file_type = IntegerField()
    compression_type = IntegerField(null=True)
    file_store = IntegerField()
    file = TextField()
    file_md5 = BlobField()
    file_sha256 = BlobField()

    class Meta:
        db_table = 'packages_debian_group_component_files'

class PackagesDebianGroupDistributionKeys(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    distribution = ForeignKeyField(db_column='distribution_id', rel_model=PackagesDebianGroupDistributions, to_field='id')
    encrypted_private_key = TextField()
    encrypted_private_key_iv = TextField()
    encrypted_passphrase = TextField()
    encrypted_passphrase_iv = TextField()
    public_key = TextField()
    fingerprint = TextField()

    class Meta:
        db_table = 'packages_debian_group_distribution_keys'

class PackagesDebianProjectDistributions(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    creator = ForeignKeyField(db_column='creator_id', null=True, rel_model=Users, to_field='id')
    valid_time_duration_seconds = IntegerField(null=True)
    file_store = IntegerField()
    automatic = BooleanField()
    automatic_upgrades = BooleanField()
    codename = TextField()
    suite = TextField(null=True)
    origin = TextField(null=True)
    label = TextField(null=True)
    version = TextField(null=True)
    description = TextField(null=True)
    file = TextField(null=True)
    file_signature = TextField(null=True)
    signed_file = TextField(null=True)
    signed_file_store = IntegerField()

    class Meta:
        db_table = 'packages_debian_project_distributions'
        indexes = (
            (('project', 'codename'), True),
            (('suite', 'project'), True),
        )

class PackagesDebianProjectArchitectures(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    distribution = ForeignKeyField(db_column='distribution_id', rel_model=PackagesDebianProjectDistributions, to_field='id')
    name = TextField()

    class Meta:
        db_table = 'packages_debian_project_architectures'
        indexes = (
            (('distribution', 'name'), True),
        )

class PackagesDebianProjectComponents(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    distribution = ForeignKeyField(db_column='distribution_id', rel_model=PackagesDebianProjectDistributions, to_field='id')
    name = TextField()

    class Meta:
        db_table = 'packages_debian_project_components'
        indexes = (
            (('distribution', 'name'), True),
        )

class PackagesDebianProjectComponentFiles(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    component = ForeignKeyField(db_column='component_id', rel_model=PackagesDebianProjectComponents, to_field='id')
    architecture = ForeignKeyField(db_column='architecture_id', null=True, rel_model=PackagesDebianProjectArchitectures, to_field='id')
    size = IntegerField()
    file_type = IntegerField()
    compression_type = IntegerField(null=True)
    file_store = IntegerField()
    file = TextField()
    file_md5 = BlobField()
    file_sha256 = BlobField()

    class Meta:
        db_table = 'packages_debian_project_component_files'

class PackagesDebianProjectDistributionKeys(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    distribution = ForeignKeyField(db_column='distribution_id', rel_model=PackagesDebianProjectDistributions, to_field='id')
    encrypted_private_key = TextField()
    encrypted_private_key_iv = TextField()
    encrypted_passphrase = TextField()
    encrypted_passphrase_iv = TextField()
    public_key = TextField()
    fingerprint = TextField()

    class Meta:
        db_table = 'packages_debian_project_distribution_keys'

class PackagesDebianPublications(BaseModel):
    id = BigIntegerField(primary_key=True)
    package = ForeignKeyField(db_column='package_id', rel_model=PackagesPackages, to_field='id', unique=True)
    distribution = ForeignKeyField(db_column='distribution_id', rel_model=PackagesDebianProjectDistributions, to_field='id')

    class Meta:
        db_table = 'packages_debian_publications'

class PackagesDependencies(BaseModel):
    id = BigIntegerField(primary_key=True)
    name = CharField()
    version_pattern = CharField()

    class Meta:
        db_table = 'packages_dependencies'
        indexes = (
            (('name', 'version_pattern'), True),
        )

class PackagesDependencyLinks(BaseModel):
    id = BigIntegerField(primary_key=True)
    package = ForeignKeyField(db_column='package_id', rel_model=PackagesPackages, to_field='id')
    dependency = ForeignKeyField(db_column='dependency_id', rel_model=PackagesDependencies, to_field='id')
    dependency_type = IntegerField()

    class Meta:
        db_table = 'packages_dependency_links'
        indexes = (
            (('package', 'dependency', 'dependency_type'), True),
        )

class PackagesEvents(BaseModel):
    id = BigIntegerField(primary_key=True)
    event_type = IntegerField()
    event_scope = IntegerField()
    originator_type = IntegerField()
    originator = BigIntegerField(null=True)
    created_at = DateTimeField()
    package = ForeignKeyField(db_column='package_id', null=True, rel_model=PackagesPackages, to_field='id')

    class Meta:
        db_table = 'packages_events'

class PackagesHelmFileMetadata(BaseModel):
    created_at = DateTimeField()
    updated_at = DateTimeField()
    package_file = ForeignKeyField(db_column='package_file_id', primary_key=True, rel_model=PackagesPackageFiles, to_field='id')
    channel = TextField(index=True)
    metadata = JSONField(null=True)

    class Meta:
        db_table = 'packages_helm_file_metadata'
        indexes = (
            (('package_file', 'channel'), False),
        )

class PackagesMavenMetadata(BaseModel):
    id = BigIntegerField(primary_key=True)
    package = ForeignKeyField(db_column='package_id', rel_model=PackagesPackages, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    app_group = CharField()
    app_name = CharField()
    app_version = CharField(null=True)
    path = CharField(index=True)

    class Meta:
        db_table = 'packages_maven_metadata'
        indexes = (
            (('package', 'path'), False),
        )

class PackagesNugetDependencyLinkMetadata(BaseModel):
    dependency_link = ForeignKeyField(db_column='dependency_link_id', primary_key=True, rel_model=PackagesDependencyLinks, to_field='id')
    target_framework = TextField()

    class Meta:
        db_table = 'packages_nuget_dependency_link_metadata'

class PackagesNugetMetadata(BaseModel):
    package = ForeignKeyField(db_column='package_id', primary_key=True, rel_model=PackagesPackages, to_field='id')
    license_url = TextField(null=True)
    project_url = TextField(null=True)
    icon_url = TextField(null=True)

    class Meta:
        db_table = 'packages_nuget_metadata'

class PackagesPackageFileBuildInfos(BaseModel):
    id = BigIntegerField(primary_key=True)
    package_file = ForeignKeyField(db_column='package_file_id', rel_model=PackagesPackageFiles, to_field='id')
    pipeline = BigIntegerField(db_column='pipeline_id', index=True, null=True)

    class Meta:
        db_table = 'packages_package_file_build_infos'

class PackagesPypiMetadata(BaseModel):
    package = ForeignKeyField(db_column='package_id', primary_key=True, rel_model=PackagesPackages, to_field='id')
    required_python = TextField(null=True)

    class Meta:
        db_table = 'packages_pypi_metadata'

class PackagesRubygemsMetadata(BaseModel):
    created_at = DateTimeField()
    updated_at = DateTimeField()
    package = ForeignKeyField(db_column='package_id', primary_key=True, rel_model=PackagesPackages, to_field='id')
    authors = TextField(null=True)
    files = TextField(null=True)
    summary = TextField(null=True)
    description = TextField(null=True)
    email = TextField(null=True)
    homepage = TextField(null=True)
    licenses = TextField(null=True)
    metadata = TextField(null=True)
    author = TextField(null=True)
    bindir = TextField(null=True)
    cert_chain = TextField(null=True)
    executables = TextField(null=True)
    extensions = TextField(null=True)
    extra_rdoc_files = TextField(null=True)
    platform = TextField(null=True)
    post_install_message = TextField(null=True)
    rdoc_options = TextField(null=True)
    require_paths = TextField(null=True)
    required_ruby_version = TextField(null=True)
    required_rubygems_version = TextField(null=True)
    requirements = TextField(null=True)
    rubygems_version = TextField(null=True)
    signing_key = TextField(null=True)

    class Meta:
        db_table = 'packages_rubygems_metadata'

class PackagesTags(BaseModel):
    id = BigIntegerField(primary_key=True)
    package = ForeignKeyField(db_column='package_id', rel_model=PackagesPackages, to_field='id')
    name = CharField()
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'packages_tags'
        indexes = (
            (('package', 'updated_at'), False),
        )

class PagesDeployments(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    ci_build = ForeignKeyField(db_column='ci_build_id', null=True, rel_model=CiBuilds, to_field='id')
    file_store = IntegerField()
    file = TextField()
    file_count = IntegerField()
    file_sha256 = BlobField()
    size = BigIntegerField(null=True)

    class Meta:
        db_table = 'pages_deployments'
        indexes = (
            (('id', 'file_store'), False),
        )

class PagesDomains(BaseModel):
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    certificate = TextField(null=True)
    encrypted_key = TextField(null=True)
    encrypted_key_iv = CharField(null=True)
    encrypted_key_salt = CharField(null=True)
    domain = CharField(null=True)
    verified_at = DateTimeField(index=True, null=True)
    verification_code = CharField()
    enabled_until = DateTimeField(null=True)
    remove_at = DateTimeField(index=True, null=True)
    auto_ssl_enabled = BooleanField()
    certificate_valid_not_before = DateTimeField(null=True)
    certificate_valid_not_after = DateTimeField(index=True, null=True)
    certificate_source = IntegerField()
    wildcard = BooleanField(index=True)
    usage = IntegerField(index=True)
    scope = IntegerField(index=True)
    auto_ssl_failed = BooleanField()

    class Meta:
        db_table = 'pages_domains'
        indexes = (
            (('domain', 'wildcard'), True),
            (('enabled_until', 'project'), False),
            (('verified_at', 'enabled_until'), False),
        )

class PagesDomainAcmeOrders(BaseModel):
    id = BigIntegerField(primary_key=True)
    pages_domain = ForeignKeyField(db_column='pages_domain_id', rel_model=PagesDomains, to_field='id')
    expires_at = DateTimeField()
    created_at = DateTimeField()
    updated_at = DateTimeField()
    url = CharField()
    challenge_token = CharField(index=True)
    challenge_file_content = TextField()
    encrypted_private_key = TextField()
    encrypted_private_key_iv = TextField()

    class Meta:
        db_table = 'pages_domain_acme_orders'

class PartitionedForeignKeys(BaseModel):
    id = BigIntegerField(primary_key=True)
    cascade_delete = BooleanField()
    from_table = TextField()
    from_column = TextField()
    to_table = TextField()
    to_column = TextField()

    class Meta:
        db_table = 'partitioned_foreign_keys'
        indexes = (
            (('from_table', 'from_column', 'to_table'), True),
        )

class PathLocks(BaseModel):
    path = CharField(index=True)
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    user = ForeignKeyField(db_column='user_id', null=True, rel_model=Users, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'path_locks'

class PersonalAccessTokens(BaseModel):
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')
    name = CharField()
    revoked = BooleanField(null=True)
    expires_at = DateField(null=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    scopes = CharField()
    impersonation = BooleanField()
    token_digest = CharField(null=True, unique=True)
    expire_notification_delivered = BooleanField()
    last_used_at = DateTimeField(null=True)
    after_expiry_notification_delivered = BooleanField()

    class Meta:
        db_table = 'personal_access_tokens'
        indexes = (
            (('id', 'expires_at'), False),
            (('user', 'expires_at'), False),
        )

class PlanLimits(BaseModel):
    id = BigIntegerField(primary_key=True)
    plan = ForeignKeyField(db_column='plan_id', rel_model=Plans, to_field='id', unique=True)
    ci_active_pipelines = IntegerField()
    ci_pipeline_size = IntegerField()
    ci_active_jobs = IntegerField()
    project_hooks = IntegerField()
    group_hooks = IntegerField()
    ci_project_subscriptions = IntegerField()
    ci_pipeline_schedules = IntegerField()
    offset_pagination_limit = IntegerField()
    ci_instance_level_variables = IntegerField()
    storage_size_limit = IntegerField()
    ci_max_artifact_size_lsif = IntegerField()
    ci_max_artifact_size_archive = IntegerField()
    ci_max_artifact_size_metadata = IntegerField()
    ci_max_artifact_size_trace = IntegerField()
    ci_max_artifact_size_junit = IntegerField()
    ci_max_artifact_size_sast = IntegerField()
    ci_max_artifact_size_dependency_scanning = IntegerField()
    ci_max_artifact_size_container_scanning = IntegerField()
    ci_max_artifact_size_dast = IntegerField()
    ci_max_artifact_size_codequality = IntegerField()
    ci_max_artifact_size_license_management = IntegerField()
    ci_max_artifact_size_license_scanning = IntegerField()
    ci_max_artifact_size_performance = IntegerField()
    ci_max_artifact_size_metrics = IntegerField()
    ci_max_artifact_size_metrics_referee = IntegerField()
    ci_max_artifact_size_network_referee = IntegerField()
    ci_max_artifact_size_dotenv = IntegerField()
    ci_max_artifact_size_cobertura = IntegerField()
    ci_max_artifact_size_terraform = IntegerField()
    ci_max_artifact_size_accessibility = IntegerField()
    ci_max_artifact_size_cluster_applications = IntegerField()
    ci_max_artifact_size_secret_detection = IntegerField()
    ci_max_artifact_size_requirements = IntegerField()
    ci_max_artifact_size_coverage_fuzzing = IntegerField()
    ci_max_artifact_size_browser_performance = IntegerField()
    ci_max_artifact_size_load_performance = IntegerField()
    ci_needs_size_limit = IntegerField()
    conan_max_file_size = BigIntegerField()
    maven_max_file_size = BigIntegerField()
    npm_max_file_size = BigIntegerField()
    nuget_max_file_size = BigIntegerField()
    pypi_max_file_size = BigIntegerField()
    generic_packages_max_file_size = BigIntegerField()
    golang_max_file_size = BigIntegerField()
    debian_max_file_size = BigIntegerField()
    project_feature_flags = IntegerField()
    ci_max_artifact_size_api_fuzzing = IntegerField()
    ci_pipeline_deployments = IntegerField()
    pull_mirror_interval_seconds = IntegerField()
    daily_invites = IntegerField()
    rubygems_max_file_size = BigIntegerField()
    terraform_module_max_file_size = BigIntegerField()
    helm_max_file_size = BigIntegerField()
    ci_registered_group_runners = IntegerField()
    ci_registered_project_runners = IntegerField()
    web_hook_calls = IntegerField()
    ci_daily_pipeline_schedule_triggers = IntegerField()
    ci_max_artifact_size_running_container_scanning = IntegerField()
    ci_max_artifact_size_cluster_image_scanning = IntegerField()
    ci_jobs_trace_size_limit = IntegerField()
    pages_file_entries = IntegerField()
    dast_profile_schedules = IntegerField()
    external_audit_event_destinations = IntegerField()

    class Meta:
        db_table = 'plan_limits'

class PostgresAsyncIndexes(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    name = TextField(unique=True)
    definition = TextField()
    table_name = TextField()

    class Meta:
        db_table = 'postgres_async_indexes'

class PostgresReindexActions(BaseModel):
    id = BigIntegerField(primary_key=True)
    action_start = DateTimeField()
    action_end = DateTimeField(null=True)
    ondisk_size_bytes_start = BigIntegerField()
    ondisk_size_bytes_end = BigIntegerField(null=True)
    state = IntegerField()
    index_identifier = TextField(index=True)
    bloat_estimate_bytes_start = BigIntegerField(null=True)

    class Meta:
        db_table = 'postgres_reindex_actions'

class ProductAnalyticsEventsExperimental(BaseModel):
    id = BigIntegerField()
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    platform = CharField(null=True)
    etl_tstamp = DateTimeField(null=True)
    collector_tstamp = DateTimeField()
    dvce_created_tstamp = DateTimeField(null=True)
    event = CharField(null=True)
    event_id = CharField()
    txn = IntegerField(db_column='txn_id', null=True)
    name_tracker = CharField(null=True)
    v_tracker = CharField(null=True)
    v_collector = CharField()
    v_etl = CharField()
    user = CharField(db_column='user_id', null=True)
    user_ipaddress = CharField(null=True)
    user_fingerprint = CharField(null=True)
    domain_userid = CharField(null=True)
    domain_sessionidx = IntegerField(null=True)
    network_userid = CharField(null=True)
    geo_country = CharField(null=True)
    geo_region = CharField(null=True)
    geo_city = CharField(null=True)
    geo_zipcode = CharField(null=True)
    geo_latitude = FloatField(null=True)
    geo_longitude = FloatField(null=True)
    geo_region_name = CharField(null=True)
    ip_isp = CharField(null=True)
    ip_organization = CharField(null=True)
    ip_domain = CharField(null=True)
    ip_netspeed = CharField(null=True)
    page_url = TextField(null=True)
    page_title = CharField(null=True)
    page_referrer = TextField(null=True)
    page_urlscheme = CharField(null=True)
    page_urlhost = CharField(null=True)
    page_urlport = IntegerField(null=True)
    page_urlpath = CharField(null=True)
    page_urlquery = CharField(null=True)
    page_urlfragment = CharField(null=True)
    refr_urlscheme = CharField(null=True)
    refr_urlhost = CharField(null=True)
    refr_urlport = IntegerField(null=True)
    refr_urlpath = CharField(null=True)
    refr_urlquery = CharField(null=True)
    refr_urlfragment = CharField(null=True)
    refr_medium = CharField(null=True)
    refr_source = CharField(null=True)
    refr_term = CharField(null=True)
    mkt_medium = CharField(null=True)
    mkt_source = CharField(null=True)
    mkt_term = CharField(null=True)
    mkt_content = CharField(null=True)
    mkt_campaign = CharField(null=True)
    se_category = CharField(null=True)
    se_action = CharField(null=True)
    se_label = CharField(null=True)
    se_property = CharField(null=True)
    se_value = FloatField(null=True)
    tr_orderid = CharField(null=True)
    tr_affiliation = CharField(null=True)
    tr_total = DecimalField(null=True)
    tr_tax = DecimalField(null=True)
    tr_shipping = DecimalField(null=True)
    tr_city = CharField(null=True)
    tr_state = CharField(null=True)
    tr_country = CharField(null=True)
    ti_orderid = CharField(null=True)
    ti_sku = CharField(null=True)
    ti_name = CharField(null=True)
    ti_category = CharField(null=True)
    ti_price = DecimalField(null=True)
    ti_quantity = IntegerField(null=True)
    pp_xoffset_min = IntegerField(null=True)
    pp_xoffset_max = IntegerField(null=True)
    pp_yoffset_min = IntegerField(null=True)
    pp_yoffset_max = IntegerField(null=True)
    useragent = CharField(null=True)
    br_name = CharField(null=True)
    br_family = CharField(null=True)
    br_version = CharField(null=True)
    br_type = CharField(null=True)
    br_renderengine = CharField(null=True)
    br_lang = CharField(null=True)
    br_features_pdf = BooleanField(null=True)
    br_features_flash = BooleanField(null=True)
    br_features_java = BooleanField(null=True)
    br_features_director = BooleanField(null=True)
    br_features_quicktime = BooleanField(null=True)
    br_features_realplayer = BooleanField(null=True)
    br_features_windowsmedia = BooleanField(null=True)
    br_features_gears = BooleanField(null=True)
    br_features_silverlight = BooleanField(null=True)
    br_cookies = BooleanField(null=True)
    br_colordepth = CharField(null=True)
    br_viewwidth = IntegerField(null=True)
    br_viewheight = IntegerField(null=True)
    os_name = CharField(null=True)
    os_family = CharField(null=True)
    os_manufacturer = CharField(null=True)
    os_timezone = CharField(null=True)
    dvce_type = CharField(null=True)
    dvce_ismobile = BooleanField(null=True)
    dvce_screenwidth = IntegerField(null=True)
    dvce_screenheight = IntegerField(null=True)
    doc_charset = CharField(null=True)
    doc_width = IntegerField(null=True)
    doc_height = IntegerField(null=True)
    tr_currency = CharField(null=True)
    tr_total_base = DecimalField(null=True)
    tr_tax_base = DecimalField(null=True)
    tr_shipping_base = DecimalField(null=True)
    ti_currency = CharField(null=True)
    ti_price_base = DecimalField(null=True)
    base_currency = CharField(null=True)
    geo_timezone = CharField(null=True)
    mkt_clickid = CharField(null=True)
    mkt_network = CharField(null=True)
    etl_tags = CharField(null=True)
    dvce_sent_tstamp = DateTimeField(null=True)
    refr_domain_userid = CharField(null=True)
    refr_dvce_tstamp = DateTimeField(null=True)
    domain_sessionid = CharField(null=True)
    derived_tstamp = DateTimeField(null=True)
    event_vendor = CharField(null=True)
    event_name = CharField(null=True)
    event_format = CharField(null=True)
    event_version = CharField(null=True)
    event_fingerprint = CharField(null=True)
    true_tstamp = DateTimeField(null=True)

    class Meta:
        db_table = 'product_analytics_events_experimental'
        primary_key = CompositeKey('id', 'project')

class ProjectAccessTokens(BaseModel):
    personal_access_token = ForeignKeyField(db_column='personal_access_token_id', rel_model=PersonalAccessTokens, to_field='id')
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')

    class Meta:
        db_table = 'project_access_tokens'
        indexes = (
            (('personal_access_token', 'project'), True),
        )
        primary_key = CompositeKey('personal_access_token', 'project')

class ProjectAlertingSettings(BaseModel):
    project = ForeignKeyField(db_column='project_id', primary_key=True, rel_model=Projects, to_field='id')
    encrypted_token = CharField()
    encrypted_token_iv = CharField()

    class Meta:
        db_table = 'project_alerting_settings'

class ProjectAliases(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    name = CharField(unique=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'project_aliases'

class ProjectAuthorizations(BaseModel):
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    access_level = IntegerField()

    class Meta:
        db_table = 'project_authorizations'
        indexes = (
            (('user', 'project'), False),
            (('user', 'project', 'access_level'), True),
        )
        primary_key = CompositeKey('access_level', 'project', 'user')

class ProjectAutoDevops(BaseModel):
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id', unique=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    enabled = BooleanField(null=True)
    deploy_strategy = IntegerField()

    class Meta:
        db_table = 'project_auto_devops'

class ProjectCiCdSettings(BaseModel):
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id', unique=True)
    group_runners_enabled = BooleanField()
    merge_pipelines_enabled = BooleanField(null=True)
    default_git_depth = IntegerField(null=True)
    forward_deployment_enabled = BooleanField(null=True)
    merge_trains_enabled = BooleanField(null=True)
    auto_rollback_enabled = BooleanField()
    keep_latest_artifact = BooleanField()
    restrict_user_defined_variables = BooleanField()
    job_token_scope_enabled = BooleanField()

    class Meta:
        db_table = 'project_ci_cd_settings'

class ProjectCiFeatureUsages(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    feature = IntegerField()
    default_branch = BooleanField()

    class Meta:
        db_table = 'project_ci_feature_usages'
        indexes = (
            (('project', 'feature', 'default_branch'), True),
        )

class ProjectComplianceFrameworkSettings(BaseModel):
    project = ForeignKeyField(db_column='project_id', primary_key=True, rel_model=Projects, to_field='id')
    framework = ForeignKeyField(db_column='framework_id', null=True, rel_model=ComplianceManagementFrameworks, to_field='id')

    class Meta:
        db_table = 'project_compliance_framework_settings'

class ProjectCustomAttributes(BaseModel):
    created_at = DateTimeField()
    updated_at = DateTimeField()
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    key = CharField()
    value = CharField()

    class Meta:
        db_table = 'project_custom_attributes'
        indexes = (
            (('key', 'value'), False),
            (('project', 'key'), True),
        )

class ProjectDailyStatistics(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    fetch_count = IntegerField()
    date = DateField(null=True)

    class Meta:
        db_table = 'project_daily_statistics'
        indexes = (
            (('project', 'date'), True),
        )

class ProjectDeployTokens(BaseModel):
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    deploy_token = ForeignKeyField(db_column='deploy_token_id', rel_model=DeployTokens, to_field='id')
    created_at = DateTimeField()

    class Meta:
        db_table = 'project_deploy_tokens'
        indexes = (
            (('project', 'deploy_token'), True),
        )

class ProjectErrorTrackingSettings(BaseModel):
    project = ForeignKeyField(db_column='project_id', primary_key=True, rel_model=Projects, to_field='id')
    enabled = BooleanField()
    api_url = CharField(null=True)
    encrypted_token = CharField(null=True)
    encrypted_token_iv = CharField(null=True)
    project_name = CharField(null=True)
    organization_name = CharField(null=True)
    integrated = BooleanField()

    class Meta:
        db_table = 'project_error_tracking_settings'

class ProjectExportJobs(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    status = IntegerField(index=True)
    jid = CharField(unique=True)

    class Meta:
        db_table = 'project_export_jobs'
        indexes = (
            (('jid', 'project'), False),
            (('project', 'status'), False),
        )

class ProjectFeatureUsages(BaseModel):
    project = ForeignKeyField(db_column='project_id', primary_key=True, rel_model=Projects, to_field='id')
    jira_dvcs_cloud_last_sync_at = DateTimeField(null=True)
    jira_dvcs_server_last_sync_at = DateTimeField(null=True)

    class Meta:
        db_table = 'project_feature_usages'
        indexes = (
            (('project', 'jira_dvcs_cloud_last_sync_at'), False),
            (('project', 'jira_dvcs_server_last_sync_at'), False),
        )

class ProjectFeatures(BaseModel):
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    merge_requests_access_level = IntegerField(null=True)
    issues_access_level = IntegerField(null=True)
    wiki_access_level = IntegerField(null=True)
    snippets_access_level = IntegerField()
    builds_access_level = IntegerField(null=True)
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    repository_access_level = IntegerField()
    pages_access_level = IntegerField()
    forking_access_level = IntegerField(null=True)
    metrics_dashboard_access_level = IntegerField(null=True)
    requirements_access_level = IntegerField()
    operations_access_level = IntegerField()
    analytics_access_level = IntegerField()
    security_and_compliance_access_level = IntegerField()
    container_registry_access_level = IntegerField()

    class Meta:
        db_table = 'project_features'
        indexes = (
            (('project', 'container_registry_access_level'), True),
        )

class ProjectGroupLinks(BaseModel):
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    group = IntegerField(db_column='group_id', index=True)
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    group_access = IntegerField()
    expires_at = DateField(null=True)

    class Meta:
        db_table = 'project_group_links'

class ProjectImportData(BaseModel):
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    data = TextField(null=True)
    encrypted_credentials = TextField(null=True)
    encrypted_credentials_iv = CharField(null=True)
    encrypted_credentials_salt = CharField(null=True)

    class Meta:
        db_table = 'project_import_data'

class ProjectIncidentManagementSettings(BaseModel):
    project = ForeignKeyField(db_column='project_id', primary_key=True, rel_model=Projects, to_field='id')
    create_issue = BooleanField()
    send_email = BooleanField()
    issue_template_key = TextField(null=True)
    pagerduty_active = BooleanField()
    encrypted_pagerduty_token = BlobField(null=True)
    encrypted_pagerduty_token_iv = BlobField(null=True)
    auto_close_incident = BooleanField()
    sla_timer = BooleanField(null=True)
    sla_timer_minutes = IntegerField(null=True)

    class Meta:
        db_table = 'project_incident_management_settings'

class ProjectMetricsSettings(BaseModel):
    project = ForeignKeyField(db_column='project_id', primary_key=True, rel_model=Projects, to_field='id')
    external_dashboard_url = CharField(null=True)
    dashboard_timezone = IntegerField()

    class Meta:
        db_table = 'project_metrics_settings'

class ProjectMirrorData(BaseModel):
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id', unique=True)
    retry_count = IntegerField()
    last_update_started_at = DateTimeField(null=True)
    last_update_scheduled_at = DateTimeField(null=True)
    next_execution_timestamp = DateTimeField(null=True)
    status = CharField(index=True, null=True)
    jid = CharField(null=True)
    last_error = TextField(null=True)
    last_update_at = DateTimeField(null=True)
    last_successful_update_at = DateTimeField(index=True, null=True)
    correlation_id_value = CharField(null=True)

    class Meta:
        db_table = 'project_mirror_data'
        indexes = (
            (('retry_count', 'last_update_at'), False),
            (('retry_count', 'next_execution_timestamp'), False),
        )

class ProjectPagesMetadata(BaseModel):
    project = ForeignKeyField(db_column='project_id', primary_key=True, rel_model=Projects, to_field='id')
    deployed = BooleanField()
    artifacts_archive = ForeignKeyField(db_column='artifacts_archive_id', null=True, rel_model=CiJobArtifacts, to_field='id')
    pages_deployment = ForeignKeyField(db_column='pages_deployment_id', null=True, rel_model=PagesDeployments, to_field='id')

    class Meta:
        db_table = 'project_pages_metadata'

class ProjectRepositories(BaseModel):
    id = BigIntegerField(primary_key=True)
    shard = ForeignKeyField(db_column='shard_id', rel_model=Shards, to_field='id')
    disk_path = CharField(unique=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id', unique=True)

    class Meta:
        db_table = 'project_repositories'
        indexes = (
            (('shard', 'project'), False),
        )

class ProjectRepositoryStates(BaseModel):
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    repository_verification_checksum = BlobField(null=True)
    wiki_verification_checksum = BlobField(null=True)
    last_repository_verification_failure = CharField(index=True, null=True)
    last_wiki_verification_failure = CharField(index=True, null=True)
    repository_retry_at = DateTimeField(null=True)
    wiki_retry_at = DateTimeField(null=True)
    repository_retry_count = IntegerField(null=True)
    wiki_retry_count = IntegerField(null=True)
    last_repository_verification_ran_at = DateTimeField(null=True)
    last_wiki_verification_ran_at = DateTimeField(null=True)

    class Meta:
        db_table = 'project_repository_states'
        indexes = (
            (('project', 'last_repository_verification_ran_at'), False),
            (('project', 'last_wiki_verification_ran_at'), False),
        )

class ProjectRepositoryStorageMoves(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    state = IntegerField()
    source_storage_name = TextField()
    destination_storage_name = TextField()

    class Meta:
        db_table = 'project_repository_storage_moves'

class ProjectSecuritySettings(BaseModel):
    project = ForeignKeyField(db_column='project_id', primary_key=True, rel_model=Projects, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    auto_fix_container_scanning = BooleanField()
    auto_fix_dast = BooleanField()
    auto_fix_dependency_scanning = BooleanField()
    auto_fix_sast = BooleanField()

    class Meta:
        db_table = 'project_security_settings'

class ProjectSettings(BaseModel):
    project = ForeignKeyField(db_column='project_id', primary_key=True, rel_model=Projects, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    push_rule = ForeignKeyField(db_column='push_rule_id', null=True, rel_model=PushRules, to_field='id', unique=True)
    show_default_award_emojis = BooleanField(null=True)
    allow_merge_on_skipped_pipeline = BooleanField(null=True)
    squash_option = IntegerField(null=True)
    has_confluence = BooleanField()
    has_vulnerabilities = BooleanField()
    prevent_merge_without_jira_issue = BooleanField()
    cve_id_request_enabled = BooleanField()
    mr_default_target_self = BooleanField()
    previous_default_branch = TextField(null=True)
    warn_about_potentially_unwanted_characters = BooleanField()

    class Meta:
        db_table = 'project_settings'

class ProjectStatistics(BaseModel):
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id', unique=True)
    namespace = IntegerField(db_column='namespace_id', index=True)
    commit_count = BigIntegerField()
    storage_size = BigIntegerField()
    repository_size = BigIntegerField()
    lfs_objects_size = BigIntegerField()
    build_artifacts_size = BigIntegerField()
    shared_runners_seconds = BigIntegerField()
    shared_runners_seconds_last_reset = DateTimeField(null=True)
    packages_size = BigIntegerField()
    wiki_size = BigIntegerField(null=True)
    snippets_size = BigIntegerField(null=True)
    pipeline_artifacts_size = BigIntegerField()
    uploads_size = BigIntegerField()

    class Meta:
        db_table = 'project_statistics'
        indexes = (
            (('project', 'packages_size'), False),
            (('project', 'repository_size'), False),
            (('project', 'storage_size'), False),
            (('project', 'wiki_size'), False),
        )

class Topics(BaseModel):
    id = BigIntegerField(primary_key=True)
    name = TextField(index=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    avatar = TextField(null=True)
    description = TextField(null=True)
    total_projects_count = BigIntegerField()

    class Meta:
        db_table = 'topics'
        indexes = (
            (('id', 'total_projects_count'), False),
        )

class ProjectTopics(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    topic = ForeignKeyField(db_column='topic_id', rel_model=Topics, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'project_topics'
        indexes = (
            (('project', 'topic'), True),
        )

class ProjectTracingSettings(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id', unique=True)
    external_url = CharField()

    class Meta:
        db_table = 'project_tracing_settings'

class ProtectedBranchMergeAccessLevels(BaseModel):
    protected_branch = ForeignKeyField(db_column='protected_branch_id', rel_model=ProtectedBranches, to_field='id')
    access_level = IntegerField(null=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    user = ForeignKeyField(db_column='user_id', null=True, rel_model=Users, to_field='id')
    group = ForeignKeyField(db_column='group_id', null=True, rel_model=Namespaces, to_field='id')

    class Meta:
        db_table = 'protected_branch_merge_access_levels'

class ProtectedBranchPushAccessLevels(BaseModel):
    protected_branch = ForeignKeyField(db_column='protected_branch_id', rel_model=ProtectedBranches, to_field='id')
    access_level = IntegerField(null=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    user = ForeignKeyField(db_column='user_id', null=True, rel_model=Users, to_field='id')
    group = ForeignKeyField(db_column='group_id', null=True, rel_model=Namespaces, to_field='id')
    deploy_key = ForeignKeyField(db_column='deploy_key_id', null=True, rel_model=Keys, to_field='id')

    class Meta:
        db_table = 'protected_branch_push_access_levels'

class ProtectedBranchUnprotectAccessLevels(BaseModel):
    protected_branch = ForeignKeyField(db_column='protected_branch_id', rel_model=ProtectedBranches, to_field='id')
    access_level = IntegerField(null=True)
    user = ForeignKeyField(db_column='user_id', null=True, rel_model=Users, to_field='id')
    group = ForeignKeyField(db_column='group_id', null=True, rel_model=Namespaces, to_field='id')

    class Meta:
        db_table = 'protected_branch_unprotect_access_levels'

class ProtectedEnvironments(BaseModel):
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    name = CharField()
    group = ForeignKeyField(db_column='group_id', null=True, rel_model=Namespaces, to_field='id')

    class Meta:
        db_table = 'protected_environments'
        indexes = (
            (('name', 'group'), True),
            (('project', 'name'), True),
        )

class ProtectedEnvironmentDeployAccessLevels(BaseModel):
    created_at = DateTimeField()
    updated_at = DateTimeField()
    access_level = IntegerField(null=True)
    protected_environment = ForeignKeyField(db_column='protected_environment_id', rel_model=ProtectedEnvironments, to_field='id')
    user = ForeignKeyField(db_column='user_id', null=True, rel_model=Users, to_field='id')
    group = ForeignKeyField(db_column='group_id', null=True, rel_model=Namespaces, to_field='id')

    class Meta:
        db_table = 'protected_environment_deploy_access_levels'

class ProtectedTags(BaseModel):
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    name = CharField()
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'protected_tags'
        indexes = (
            (('project', 'name'), True),
        )

class ProtectedTagCreateAccessLevels(BaseModel):
    protected_tag = ForeignKeyField(db_column='protected_tag_id', rel_model=ProtectedTags, to_field='id')
    access_level = IntegerField(null=True)
    user = ForeignKeyField(db_column='user_id', null=True, rel_model=Users, to_field='id')
    group = ForeignKeyField(db_column='group_id', null=True, rel_model=Namespaces, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'protected_tag_create_access_levels'

class PushEventPayloads(BaseModel):
    commit_count = BigIntegerField()
    action = IntegerField()
    ref_type = IntegerField()
    commit_from = BlobField(null=True)
    commit_to = BlobField(null=True)
    ref = TextField(null=True)
    commit_title = CharField(null=True)
    ref_count = IntegerField(null=True)
    event = ForeignKeyField(db_column='event_id', primary_key=True, rel_model=Events, to_field='id')

    class Meta:
        db_table = 'push_event_payloads'

class RawUsageData(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    recorded_at = DateTimeField(unique=True)
    sent_at = DateTimeField(null=True)
    payload = JSONField()
    version_usage_data_id_value = BigIntegerField(null=True)

    class Meta:
        db_table = 'raw_usage_data'

class RedirectRoutes(BaseModel):
    source = IntegerField(db_column='source_id')
    source_type = CharField()
    path = CharField(unique=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'redirect_routes'
        indexes = (
            (('source', 'source_type'), False),
        )

class ReleaseLinks(BaseModel):
    id = BigIntegerField(primary_key=True)
    release = ForeignKeyField(db_column='release_id', rel_model=Releases, to_field='id')
    url = CharField()
    name = CharField()
    created_at = DateTimeField()
    updated_at = DateTimeField()
    filepath = CharField(null=True)
    link_type = IntegerField(null=True)

    class Meta:
        db_table = 'release_links'
        indexes = (
            (('release', 'name'), True),
            (('release', 'url'), True),
        )

class RemoteMirrors(BaseModel):
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    url = CharField(null=True)
    enabled = BooleanField(null=True)
    update_status = CharField(null=True)
    last_update_at = DateTimeField(null=True)
    last_successful_update_at = DateTimeField(index=True, null=True)
    last_error = CharField(null=True)
    encrypted_credentials = TextField(null=True)
    encrypted_credentials_iv = CharField(null=True)
    encrypted_credentials_salt = CharField(null=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    last_update_started_at = DateTimeField(null=True)
    only_protected_branches = BooleanField()
    remote_name = CharField(null=True)
    error_notification_sent = BooleanField(null=True)
    keep_divergent_refs = BooleanField(null=True)

    class Meta:
        db_table = 'remote_mirrors'

class RepositoryLanguages(BaseModel):
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    programming_language = IntegerField(db_column='programming_language_id')
    share = FloatField()

    class Meta:
        db_table = 'repository_languages'
        indexes = (
            (('project', 'programming_language'), True),
        )
        primary_key = CompositeKey('programming_language', 'project')

class RequiredCodeOwnersSections(BaseModel):
    id = BigIntegerField(primary_key=True)
    protected_branch = ForeignKeyField(db_column='protected_branch_id', rel_model=ProtectedBranches, to_field='id')
    name = TextField()

    class Meta:
        db_table = 'required_code_owners_sections'

class Requirements(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField(index=True)
    updated_at = DateTimeField(index=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    author = ForeignKeyField(db_column='author_id', null=True, rel_model=Users, to_field='id')
    iid = IntegerField()
    cached_markdown_version = IntegerField(null=True)
    state = IntegerField(index=True)
    title = CharField(index=True)
    title_html = TextField(null=True)
    description = TextField(null=True)
    description_html = TextField(null=True)
    issue = ForeignKeyField(db_column='issue_id', null=True, rel_model=Issues, to_field='id', unique=True)

    class Meta:
        db_table = 'requirements'
        indexes = (
            (('iid', 'project'), True),
        )

class RequirementsManagementTestReports(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    requirement = ForeignKeyField(db_column='requirement_id', null=True, rel_model=Requirements, to_field='id')
    author = ForeignKeyField(db_column='author_id', null=True, rel_model=Users, to_field='id')
    state = IntegerField()
    build = ForeignKeyField(db_column='build_id', null=True, rel_model=CiBuilds, to_field='id')
    issue = ForeignKeyField(db_column='issue_id', null=True, rel_model=Issues, to_field='id')

    class Meta:
        db_table = 'requirements_management_test_reports'

class ResourceIterationEvents(BaseModel):
    id = BigIntegerField(primary_key=True)
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')
    issue = ForeignKeyField(db_column='issue_id', null=True, rel_model=Issues, to_field='id')
    merge_request = ForeignKeyField(db_column='merge_request_id', null=True, rel_model=MergeRequests, to_field='id')
    iteration = ForeignKeyField(db_column='iteration_id', null=True, rel_model=Sprints, to_field='id')
    created_at = DateTimeField()
    action = IntegerField()

    class Meta:
        db_table = 'resource_iteration_events'

class ResourceLabelEvents(BaseModel):
    id = BigIntegerField(primary_key=True)
    action = IntegerField()
    issue = ForeignKeyField(db_column='issue_id', null=True, rel_model=Issues, to_field='id')
    merge_request = ForeignKeyField(db_column='merge_request_id', null=True, rel_model=MergeRequests, to_field='id')
    epic = ForeignKeyField(db_column='epic_id', null=True, rel_model=Epics, to_field='id')
    label = ForeignKeyField(db_column='label_id', null=True, rel_model=Labels, to_field='id')
    user = ForeignKeyField(db_column='user_id', null=True, rel_model=Users, to_field='id')
    created_at = DateTimeField()
    cached_markdown_version = IntegerField(null=True)
    reference = TextField(null=True)
    reference_html = TextField(null=True)

    class Meta:
        db_table = 'resource_label_events'
        indexes = (
            (('action', 'issue', 'label'), False),
            (('action', 'label'), False),
            (('action', 'merge_request', 'label'), False),
        )

class ResourceMilestoneEvents(BaseModel):
    id = BigIntegerField(primary_key=True)
    user = ForeignKeyField(db_column='user_id', null=True, rel_model=Users, to_field='id')
    issue = ForeignKeyField(db_column='issue_id', null=True, rel_model=Issues, to_field='id')
    merge_request = ForeignKeyField(db_column='merge_request_id', null=True, rel_model=MergeRequests, to_field='id')
    milestone = ForeignKeyField(db_column='milestone_id', null=True, rel_model=Milestones, to_field='id')
    action = IntegerField()
    state = IntegerField()
    created_at = DateTimeField(index=True)

    class Meta:
        db_table = 'resource_milestone_events'

class ResourceStateEvents(BaseModel):
    id = BigIntegerField(primary_key=True)
    user = ForeignKeyField(db_column='user_id', null=True, rel_model=Users, to_field='id')
    issue = ForeignKeyField(db_column='issue_id', null=True, rel_model=Issues, to_field='id')
    merge_request = ForeignKeyField(db_column='merge_request_id', null=True, rel_model=MergeRequests, to_field='id')
    created_at = DateTimeField()
    state = IntegerField()
    epic = ForeignKeyField(db_column='epic_id', null=True, rel_model=Epics, to_field='id')
    source_commit = TextField(null=True)
    close_after_error_tracking_resolve = BooleanField()
    close_auto_resolve_prometheus_alert = BooleanField()
    source_merge_request = ForeignKeyField(db_column='source_merge_request_id', null=True, rel_model=MergeRequests, related_name='merge_requests_source_merge_request_set', to_field='id')

    class Meta:
        db_table = 'resource_state_events'
        indexes = (
            (('issue', 'created_at'), False),
        )

class ResourceWeightEvents(BaseModel):
    id = BigIntegerField(primary_key=True)
    user = ForeignKeyField(db_column='user_id', null=True, rel_model=Users, to_field='id')
    issue = ForeignKeyField(db_column='issue_id', rel_model=Issues, to_field='id')
    weight = IntegerField(null=True)
    created_at = DateTimeField()

    class Meta:
        db_table = 'resource_weight_events'
        indexes = (
            (('issue', 'created_at'), False),
            (('issue', 'weight'), False),
        )

class Routes(BaseModel):
    source = IntegerField(db_column='source_id')
    source_type = CharField()
    path = CharField(index=True)
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    name = CharField(index=True, null=True)

    class Meta:
        db_table = 'routes'
        indexes = (
            (('source_type', 'source'), True),
        )

class SamlGroupLinks(BaseModel):
    id = BigIntegerField(primary_key=True)
    access_level = IntegerField()
    group = ForeignKeyField(db_column='group_id', rel_model=Namespaces, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    saml_group_name = TextField()

    class Meta:
        db_table = 'saml_group_links'
        indexes = (
            (('group', 'saml_group_name'), True),
        )

class SchemaMigrations(BaseModel):
    version = CharField(primary_key=True)
    finished_at = DateTimeField(null=True)

    class Meta:
        db_table = 'schema_migrations'

class ScimIdentities(BaseModel):
    id = BigIntegerField(primary_key=True)
    group = ForeignKeyField(db_column='group_id', rel_model=Namespaces, to_field='id')
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    active = BooleanField(null=True)
    extern_uid = CharField()

    class Meta:
        db_table = 'scim_identities'
        indexes = (
            (('group', 'user'), True),
        )

class ScimOauthAccessTokens(BaseModel):
    created_at = DateTimeField()
    updated_at = DateTimeField()
    group = ForeignKeyField(db_column='group_id', rel_model=Namespaces, to_field='id')
    token_encrypted = CharField()

    class Meta:
        db_table = 'scim_oauth_access_tokens'
        indexes = (
            (('group', 'token_encrypted'), True),
        )

class VulnerabilityScanners(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    external = CharField(db_column='external_id')
    name = CharField()
    vendor = TextField()

    class Meta:
        db_table = 'vulnerability_scanners'
        indexes = (
            (('project', 'external'), True),
        )

class SecurityScans(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField(index=True)
    updated_at = DateTimeField()
    build = ForeignKeyField(db_column='build_id', rel_model=CiBuilds, to_field='id')
    scan_type = IntegerField(index=True)
    info = JSONField()
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    pipeline = BigIntegerField(db_column='pipeline_id', index=True, null=True)
    latest = BooleanField()
    status = IntegerField()

    class Meta:
        db_table = 'security_scans'
        indexes = (
            (('build', 'scan_type'), True),
        )

class SecurityFindings(BaseModel):
    id = BigIntegerField(primary_key=True)
    scan = ForeignKeyField(db_column='scan_id', rel_model=SecurityScans, to_field='id')
    scanner = ForeignKeyField(db_column='scanner_id', rel_model=VulnerabilityScanners, to_field='id')
    severity = IntegerField(index=True)
    confidence = IntegerField(index=True)
    project_fingerprint = TextField(index=True, null=True)
    deduplicated = BooleanField()
    position = IntegerField(null=True)
    uuid = TextField(null=True)
    overridden_uuid = TextField(null=True)

    class Meta:
        db_table = 'security_findings'
        indexes = (
            (('deduplicated', 'scan'), False),
            (('scan', 'position'), True),
            (('uuid', 'scan'), True),
        )

class SecurityOrchestrationPolicyConfigurations(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id', unique=True)
    security_policy_management_project = ForeignKeyField(db_column='security_policy_management_project_id', rel_model=Projects, related_name='projects_security_policy_management_project_set', to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    configured_at = DateTimeField(null=True)

    class Meta:
        db_table = 'security_orchestration_policy_configurations'
        indexes = (
            (('project', 'security_policy_management_project'), False),
        )

class SecurityOrchestrationPolicyRuleSchedules(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    next_run_at = DateTimeField(null=True)
    security_orchestration_policy_configuration = ForeignKeyField(db_column='security_orchestration_policy_configuration_id', rel_model=SecurityOrchestrationPolicyConfigurations, to_field='id')
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')
    policy_index = IntegerField()
    cron = TextField()
    rule_index = IntegerField()

    class Meta:
        db_table = 'security_orchestration_policy_rule_schedules'

class SentNotifications(BaseModel):
    project = IntegerField(db_column='project_id', null=True)
    noteable = IntegerField(db_column='noteable_id', index=True, null=True)
    noteable_type = CharField(null=True)
    recipient = IntegerField(db_column='recipient_id', null=True)
    commit = CharField(db_column='commit_id', null=True)
    reply_key = CharField(unique=True)
    line_code = CharField(null=True)
    note_type = CharField(null=True)
    position = TextField(null=True)
    in_reply_to_discussion = CharField(db_column='in_reply_to_discussion_id', null=True)

    class Meta:
        db_table = 'sent_notifications'

class SentryIssues(BaseModel):
    id = BigIntegerField(primary_key=True)
    issue = ForeignKeyField(db_column='issue_id', rel_model=Issues, to_field='id', unique=True)
    sentry_issue_identifier = BigIntegerField(index=True)

    class Meta:
        db_table = 'sentry_issues'

class ServerlessDomainCluster(BaseModel):
    uuid = CharField(primary_key=True)
    pages_domain = ForeignKeyField(db_column='pages_domain_id', rel_model=PagesDomains, to_field='id')
    clusters_applications_knative = ForeignKeyField(db_column='clusters_applications_knative_id', rel_model=ClustersApplicationsKnative, to_field='id', unique=True)
    creator = ForeignKeyField(db_column='creator_id', null=True, rel_model=Users, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    encrypted_key = TextField(null=True)
    encrypted_key_iv = CharField(null=True)
    certificate = TextField(null=True)

    class Meta:
        db_table = 'serverless_domain_cluster'

class ServiceDeskSettings(BaseModel):
    project = ForeignKeyField(db_column='project_id', primary_key=True, rel_model=Projects, related_name='projects_project_set', to_field='id')
    issue_template_key = CharField(null=True)
    outgoing_name = CharField(null=True)
    project_key = CharField(null=True)
    file_template_project = ForeignKeyField(db_column='file_template_project_id', null=True, rel_model=Projects, to_field='id')

    class Meta:
        db_table = 'service_desk_settings'

class SlackIntegrations(BaseModel):
    service = ForeignKeyField(db_column='service_id', rel_model=Integrations, to_field='id')
    team = CharField(db_column='team_id')
    team_name = CharField()
    alias = CharField()
    user = CharField(db_column='user_id')
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'slack_integrations'
        indexes = (
            (('team', 'alias'), True),
        )

class SmartcardIdentities(BaseModel):
    id = BigIntegerField(primary_key=True)
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')
    subject = CharField()
    issuer = CharField()

    class Meta:
        db_table = 'smartcard_identities'
        indexes = (
            (('subject', 'issuer'), True),
        )

class Snippets(BaseModel):
    title = CharField(index=True, null=True)
    content = TextField(index=True, null=True)
    author = IntegerField(db_column='author_id', index=True)
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    created_at = DateTimeField(index=True, null=True)
    updated_at = DateTimeField(index=True, null=True)
    file_name = CharField(index=True, null=True)
    type = CharField(null=True)
    visibility_level = IntegerField()
    title_html = TextField(null=True)
    content_html = TextField(null=True)
    cached_markdown_version = IntegerField(null=True)
    description = TextField(index=True, null=True)
    description_html = TextField(null=True)
    encrypted_secret_token = CharField(null=True)
    encrypted_secret_token_iv = CharField(null=True)
    secret = BooleanField()
    repository_read_only = BooleanField()

    class Meta:
        db_table = 'snippets'
        indexes = (
            (('id', 'created_at'), False),
            (('id', 'project'), False),
            (('id', 'type'), False),
            (('project', 'visibility_level'), False),
            (('visibility_level', 'secret'), False),
        )

class SnippetRepositories(BaseModel):
    snippet = ForeignKeyField(db_column='snippet_id', primary_key=True, rel_model=Snippets, to_field='id')
    shard = ForeignKeyField(db_column='shard_id', rel_model=Shards, to_field='id')
    disk_path = CharField(unique=True)
    verification_retry_count = IntegerField(null=True)
    verification_retry_at = DateTimeField(index=True, null=True)
    verified_at = DateTimeField(index=True, null=True)
    verification_checksum = BlobField(null=True)
    verification_failure = TextField(null=True)
    verification_state = IntegerField(index=True)
    verification_started_at = DateTimeField(null=True)

    class Meta:
        db_table = 'snippet_repositories'

class SnippetRepositoryStorageMoves(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    snippet = ForeignKeyField(db_column='snippet_id', rel_model=Snippets, to_field='id')
    state = IntegerField()
    source_storage_name = TextField()
    destination_storage_name = TextField()

    class Meta:
        db_table = 'snippet_repository_storage_moves'

class SnippetStatistics(BaseModel):
    snippet = ForeignKeyField(db_column='snippet_id', primary_key=True, rel_model=Snippets, to_field='id')
    repository_size = BigIntegerField()
    file_count = BigIntegerField()
    commit_count = BigIntegerField()

    class Meta:
        db_table = 'snippet_statistics'

class SnippetUserMentions(BaseModel):
    id = BigIntegerField(primary_key=True)
    snippet = ForeignKeyField(db_column='snippet_id', rel_model=Snippets, to_field='id', unique=True)
    note = ForeignKeyField(db_column='note_id', null=True, rel_model=Notes, to_field='id', unique=True)
    mentioned_users_ids = UnknownField(null=True)  # ARRAY
    mentioned_projects_ids = UnknownField(null=True)  # ARRAY
    mentioned_groups_ids = UnknownField(null=True)  # ARRAY

    class Meta:
        db_table = 'snippet_user_mentions'
        indexes = (
            (('snippet', 'note'), True),
        )

class SoftwareLicenses(BaseModel):
    name = CharField(unique=True)
    spdx_identifier = CharField(index=True, null=True)

    class Meta:
        db_table = 'software_licenses'

class SoftwareLicensePolicies(BaseModel):
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    software_license = ForeignKeyField(db_column='software_license_id', rel_model=SoftwareLicenses, to_field='id')
    classification = IntegerField()
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'software_license_policies'
        indexes = (
            (('project', 'software_license'), True),
        )

class SpamLogs(BaseModel):
    user = IntegerField(db_column='user_id', index=True, null=True)
    source_ip = CharField(null=True)
    user_agent = CharField(null=True)
    via_api = BooleanField(null=True)
    noteable_type = CharField(null=True)
    title = CharField(null=True)
    description = TextField(null=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    submitted_as_ham = BooleanField()
    recaptcha_verified = BooleanField()

    class Meta:
        db_table = 'spam_logs'

class StatusCheckResponses(BaseModel):
    id = BigIntegerField(primary_key=True)
    merge_request = ForeignKeyField(db_column='merge_request_id', rel_model=MergeRequests, to_field='id')
    external_approval_rule = BigIntegerField(db_column='external_approval_rule_id', index=True, null=True)
    sha = BlobField()
    external_status_check = ForeignKeyField(db_column='external_status_check_id', rel_model=ExternalStatusChecks, to_field='id')

    class Meta:
        db_table = 'status_check_responses'

class StatusPagePublishedIncidents(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    issue = ForeignKeyField(db_column='issue_id', rel_model=Issues, to_field='id', unique=True)

    class Meta:
        db_table = 'status_page_published_incidents'

class StatusPageSettings(BaseModel):
    project = ForeignKeyField(db_column='project_id', primary_key=True, rel_model=Projects, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    enabled = BooleanField()
    aws_s3_bucket_name = CharField()
    aws_region = CharField()
    aws_access_key = CharField()
    encrypted_aws_secret_key = CharField()
    encrypted_aws_secret_key_iv = CharField()
    status_page_url = TextField(null=True)

    class Meta:
        db_table = 'status_page_settings'

class Subscriptions(BaseModel):
    user = IntegerField(db_column='user_id', null=True)
    subscribable = IntegerField(db_column='subscribable_id', null=True)
    subscribable_type = CharField(null=True)
    subscribed = BooleanField(null=True)
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')

    class Meta:
        db_table = 'subscriptions'
        indexes = (
            (('user', 'subscribable', 'subscribable_type', 'project'), True),
        )

class Suggestions(BaseModel):
    id = BigIntegerField(primary_key=True)
    note = ForeignKeyField(db_column='note_id', rel_model=Notes, to_field='id')
    relative_order = IntegerField()
    applied = BooleanField()
    commit = CharField(db_column='commit_id', null=True)
    from_content = TextField()
    to_content = TextField()
    lines_above = IntegerField()
    lines_below = IntegerField()
    outdated = BooleanField()

    class Meta:
        db_table = 'suggestions'
        indexes = (
            (('note', 'relative_order'), True),
        )

class SystemNoteMetadata(BaseModel):
    note = ForeignKeyField(db_column='note_id', rel_model=Notes, to_field='id', unique=True)
    commit_count = IntegerField(null=True)
    action = CharField(null=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    description_version = ForeignKeyField(db_column='description_version_id', null=True, rel_model=DescriptionVersions, to_field='id', unique=True)

    class Meta:
        db_table = 'system_note_metadata'

class Taggings(BaseModel):
    tag = IntegerField(db_column='tag_id', index=True, null=True)
    taggable_type = CharField(null=True)
    tagger = IntegerField(db_column='tagger_id', null=True)
    tagger_type = CharField(null=True)
    context = CharField(null=True)
    created_at = DateTimeField(null=True)
    id = BigIntegerField(primary_key=True)
    taggable = BigIntegerField(db_column='taggable_id', null=True)

    class Meta:
        db_table = 'taggings'
        indexes = (
            (('taggable', 'tag', 'taggable_type', 'tagger', 'tagger_type', 'context'), True),
            (('taggable_type', 'context', 'taggable'), False),
        )

class Tags(BaseModel):
    name = CharField(index=True, null=True)
    taggings_count = IntegerField(null=True)

    class Meta:
        db_table = 'tags'

class TermAgreements(BaseModel):
    term = ForeignKeyField(db_column='term_id', rel_model=ApplicationSettingTerms, to_field='id')
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')
    accepted = BooleanField()
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'term_agreements'
        indexes = (
            (('term', 'user'), True),
        )

class TerraformStates(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    file_store = IntegerField(index=True, null=True)
    file = CharField(null=True)
    lock_xid = CharField(null=True)
    locked_at = DateTimeField(null=True)
    locked_by_user = ForeignKeyField(db_column='locked_by_user_id', null=True, rel_model=Users, to_field='id')
    uuid = CharField(unique=True)
    name = CharField()
    versioning_enabled = BooleanField()

    class Meta:
        db_table = 'terraform_states'
        indexes = (
            (('project', 'name'), True),
        )

class TerraformStateVersions(BaseModel):
    id = BigIntegerField(primary_key=True)
    terraform_state = ForeignKeyField(db_column='terraform_state_id', rel_model=TerraformStates, to_field='id')
    created_by_user = ForeignKeyField(db_column='created_by_user_id', null=True, rel_model=Users, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    version = IntegerField()
    file_store = IntegerField()
    file = TextField()
    verification_retry_count = IntegerField(null=True)
    verification_retry_at = DateTimeField(index=True, null=True)
    verified_at = DateTimeField(index=True, null=True)
    verification_checksum = BlobField(null=True)
    verification_failure = TextField(null=True)
    ci_build = BigIntegerField(db_column='ci_build_id', index=True, null=True)
    verification_started_at = DateTimeField(null=True)
    verification_state = IntegerField(index=True)

    class Meta:
        db_table = 'terraform_state_versions'
        indexes = (
            (('version', 'terraform_state'), True),
        )

class Timelogs(BaseModel):
    time_spent = IntegerField()
    user = IntegerField(db_column='user_id', index=True, null=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    issue = ForeignKeyField(db_column='issue_id', null=True, rel_model=Issues, to_field='id')
    merge_request = ForeignKeyField(db_column='merge_request_id', null=True, rel_model=MergeRequests, to_field='id')
    spent_at = DateTimeField(index=True, null=True)
    note = ForeignKeyField(db_column='note_id', null=True, rel_model=Notes, to_field='id')
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    summary = TextField(null=True)

    class Meta:
        db_table = 'timelogs'
        indexes = (
            (('spent_at', 'project'), False),
        )

class Todos(BaseModel):
    user = ForeignKeyField(db_column='user_id', rel_model=Users, related_name='users_user_set', to_field='id')
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    target = IntegerField(db_column='target_id', null=True)
    target_type = CharField()
    author = ForeignKeyField(db_column='author_id', rel_model=Users, to_field='id')
    action = IntegerField()
    state = CharField()
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    note = ForeignKeyField(db_column='note_id', null=True, rel_model=Notes, to_field='id')
    commit = CharField(db_column='commit_id', index=True, null=True)
    group = ForeignKeyField(db_column='group_id', null=True, rel_model=Namespaces, to_field='id')
    resolved_by_action = IntegerField(null=True)

    class Meta:
        db_table = 'todos'
        indexes = (
            (('author', 'created_at'), False),
            (('id', 'user'), False),
            (('id', 'user'), False),
            (('target', 'target_type'), False),
        )

class TokenWithIvs(BaseModel):
    id = BigIntegerField(primary_key=True)
    hashed_token = BlobField(unique=True)
    hashed_plaintext_token = BlobField(unique=True)
    iv = BlobField()

    class Meta:
        db_table = 'token_with_ivs'

class TrendingProjects(BaseModel):
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id', unique=True)

    class Meta:
        db_table = 'trending_projects'

class U2FRegistrations(BaseModel):
    certificate = TextField(null=True)
    key_handle = CharField(index=True, null=True)
    public_key = CharField(null=True)
    counter = IntegerField(null=True)
    user = ForeignKeyField(db_column='user_id', null=True, rel_model=Users, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    name = CharField(null=True)

    class Meta:
        db_table = 'u2f_registrations'

class UpcomingReconciliations(BaseModel):
    id = BigIntegerField(primary_key=True)
    namespace = ForeignKeyField(db_column='namespace_id', null=True, rel_model=Namespaces, to_field='id', unique=True)
    next_reconciliation_date = DateField()
    display_alert_from = DateField()
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'upcoming_reconciliations'

class Uploads(BaseModel):
    size = BigIntegerField()
    path = CharField()
    checksum = CharField(index=True, null=True)
    model = IntegerField(db_column='model_id', null=True)
    model_type = CharField(null=True)
    uploader = CharField()
    created_at = DateTimeField()
    store = IntegerField(index=True, null=True)
    mount_point = CharField(null=True)
    secret = CharField(null=True)

    class Meta:
        db_table = 'uploads'
        indexes = (
            (('model', 'model_type'), False),
            (('path', 'uploader'), False),
        )

class UserAgentDetails(BaseModel):
    user_agent = CharField()
    ip_address = CharField()
    subject = IntegerField(db_column='subject_id')
    subject_type = CharField()
    submitted = BooleanField()
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'user_agent_details'
        indexes = (
            (('subject', 'subject_type'), False),
        )

class UserCallouts(BaseModel):
    feature_name = IntegerField()
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')
    dismissed_at = DateTimeField(null=True)

    class Meta:
        db_table = 'user_callouts'
        indexes = (
            (('feature_name', 'user'), True),
        )

class UserCanonicalEmails(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id', unique=True)
    canonical_email = CharField(index=True)

    class Meta:
        db_table = 'user_canonical_emails'
        indexes = (
            (('user', 'canonical_email'), True),
        )

class UserCreditCardValidations(BaseModel):
    user = ForeignKeyField(db_column='user_id', primary_key=True, rel_model=Users, to_field='id')
    credit_card_validated_at = DateTimeField()
    expiration_date = DateField(null=True)
    last_digits = IntegerField(null=True)
    holder_name = TextField(null=True)

    class Meta:
        db_table = 'user_credit_card_validations'
        indexes = (
            (('credit_card_validated_at', 'expiration_date', 'last_digits', 'holder_name'), False),
        )

class UserCustomAttributes(BaseModel):
    created_at = DateTimeField()
    updated_at = DateTimeField()
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')
    key = CharField()
    value = CharField()

    class Meta:
        db_table = 'user_custom_attributes'
        indexes = (
            (('key', 'value'), False),
            (('user', 'key'), True),
        )

class UserDetails(BaseModel):
    user = ForeignKeyField(db_column='user_id', primary_key=True, rel_model=Users, to_field='id')
    job_title = CharField()
    bio = CharField()
    webauthn_xid = TextField(null=True)
    other_role = TextField(null=True)
    provisioned_by_group = ForeignKeyField(db_column='provisioned_by_group_id', null=True, rel_model=Namespaces, to_field='id')
    pronouns = TextField(null=True)
    pronunciation = TextField(null=True)
    registration_objective = IntegerField(null=True)
    phone = TextField(null=True, unique=True)

    class Meta:
        db_table = 'user_details'

class UserFollowUsers(BaseModel):
    follower = ForeignKeyField(db_column='follower_id', rel_model=Users, related_name='users_follower_set', to_field='id')
    followee = ForeignKeyField(db_column='followee_id', rel_model=Users, to_field='id')

    class Meta:
        db_table = 'user_follow_users'
        indexes = (
            (('follower', 'followee'), True),
        )
        primary_key = CompositeKey('followee', 'follower')

class UserGroupCallouts(BaseModel):
    id = BigIntegerField(primary_key=True)
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')
    group = ForeignKeyField(db_column='group_id', rel_model=Namespaces, to_field='id')
    feature_name = IntegerField()
    dismissed_at = DateTimeField(null=True)

    class Meta:
        db_table = 'user_group_callouts'
        indexes = (
            (('user', 'group', 'feature_name'), True),
        )

class UserHighestRoles(BaseModel):
    user = ForeignKeyField(db_column='user_id', primary_key=True, rel_model=Users, to_field='id')
    updated_at = DateTimeField()
    highest_access_level = IntegerField(null=True)

    class Meta:
        db_table = 'user_highest_roles'
        indexes = (
            (('user', 'highest_access_level'), False),
        )

class UserInteractedProjects(BaseModel):
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')

    class Meta:
        db_table = 'user_interacted_projects'
        indexes = (
            (('user', 'project'), True),
        )
        primary_key = CompositeKey('project', 'user')

class UserPermissionExportUploads(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')
    file_store = IntegerField(null=True)
    status = IntegerField()
    file = TextField(null=True)

    class Meta:
        db_table = 'user_permission_export_uploads'
        indexes = (
            (('user', 'status'), False),
        )

class UserPreferences(BaseModel):
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id', unique=True)
    issue_notes_filter = IntegerField()
    merge_request_notes_filter = IntegerField()
    created_at = DateTimeField()
    updated_at = DateTimeField()
    epics_sort = CharField(null=True)
    roadmap_epics_state = IntegerField(null=True)
    epic_notes_filter = IntegerField()
    issues_sort = CharField(null=True)
    merge_requests_sort = CharField(null=True)
    roadmaps_sort = CharField(null=True)
    first_day_of_week = IntegerField(null=True)
    timezone = CharField(null=True)
    time_display_relative = BooleanField(null=True)
    time_format_in_24h = BooleanField(null=True)
    projects_sort = CharField(null=True)
    show_whitespace_in_diffs = BooleanField()
    sourcegraph_enabled = BooleanField(null=True)
    setup_for_company = BooleanField(null=True)
    render_whitespace_in_code = BooleanField(null=True)
    tab_width = IntegerField(null=True)
    experience_level = IntegerField(null=True)
    view_diffs_file_by_file = BooleanField()
    gitpod_enabled = BooleanField(index=True)
    markdown_surround_selection = BooleanField()

    class Meta:
        db_table = 'user_preferences'

class UserStatuses(BaseModel):
    user = ForeignKeyField(db_column='user_id', primary_key=True, rel_model=Users, to_field='id')
    cached_markdown_version = IntegerField(null=True)
    emoji = CharField()
    message = CharField(null=True)
    message_html = CharField(null=True)
    availability = IntegerField()
    clear_status_at = DateTimeField(index=True, null=True)

    class Meta:
        db_table = 'user_statuses'

class UserSyncedAttributesMetadata(BaseModel):
    name_synced = BooleanField(null=True)
    email_synced = BooleanField(null=True)
    location_synced = BooleanField(null=True)
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id', unique=True)
    provider = CharField(null=True)

    class Meta:
        db_table = 'user_synced_attributes_metadata'

class UsersOpsDashboardProjects(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')

    class Meta:
        db_table = 'users_ops_dashboard_projects'
        indexes = (
            (('user', 'project'), True),
        )

class UsersSecurityDashboardProjects(BaseModel):
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')

    class Meta:
        db_table = 'users_security_dashboard_projects'
        indexes = (
            (('user', 'project'), True),
        )
        primary_key = CompositeKey('project', 'user')

class UsersStarProjects(BaseModel):
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    user = IntegerField(db_column='user_id')
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'users_star_projects'
        indexes = (
            (('project', 'user'), True),
        )

class UsersStatistics(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    without_groups_and_projects = IntegerField()
    with_highest_role_guest = IntegerField()
    with_highest_role_reporter = IntegerField()
    with_highest_role_developer = IntegerField()
    with_highest_role_maintainer = IntegerField()
    with_highest_role_owner = IntegerField()
    bots = IntegerField()
    blocked = IntegerField()

    class Meta:
        db_table = 'users_statistics'

class VerificationCodes(BaseModel):
    created_at = DateTimeField()
    visitor_id_code = TextField()
    code = TextField()
    phone = TextField()

    class Meta:
        db_table = 'verification_codes'
        primary_key = CompositeKey('code', 'created_at', 'phone', 'visitor_id_code')

class Vulnerabilities(BaseModel):
    id = BigIntegerField(primary_key=True)
    milestone = ForeignKeyField(db_column='milestone_id', null=True, rel_model=Milestones, related_name='milestones_milestone_set', to_field='id')
    epic = ForeignKeyField(db_column='epic_id', null=True, rel_model=Epics, to_field='id')
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    author = ForeignKeyField(db_column='author_id', rel_model=Users, to_field='id')
    updated_by = ForeignKeyField(db_column='updated_by_id', null=True, rel_model=Users, related_name='users_updated_by_set', to_field='id')
    last_edited_by = ForeignKeyField(db_column='last_edited_by_id', null=True, rel_model=Users, related_name='users_last_edited_by_set', to_field='id')
    start_date = DateField(null=True)
    due_date = DateField(null=True)
    last_edited_at = DateTimeField(null=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    title = CharField()
    title_html = TextField(null=True)
    description = TextField(null=True)
    description_html = TextField(null=True)
    start_date_sourcing_milestone = ForeignKeyField(db_column='start_date_sourcing_milestone_id', null=True, rel_model=Milestones, related_name='milestones_start_date_sourcing_milestone_set', to_field='id')
    due_date_sourcing_milestone = ForeignKeyField(db_column='due_date_sourcing_milestone_id', null=True, rel_model=Milestones, to_field='id')
    state = IntegerField()
    severity = IntegerField()
    severity_overridden = BooleanField(null=True)
    confidence = IntegerField()
    confidence_overridden = BooleanField(null=True)
    resolved_by = ForeignKeyField(db_column='resolved_by_id', null=True, rel_model=Users, related_name='users_resolved_by_set', to_field='id')
    resolved_at = DateTimeField(null=True)
    report_type = IntegerField()
    cached_markdown_version = IntegerField(null=True)
    confirmed_by = ForeignKeyField(db_column='confirmed_by_id', null=True, rel_model=Users, related_name='users_confirmed_by_set', to_field='id')
    confirmed_at = DateTimeField(null=True)
    dismissed_at = DateTimeField(null=True)
    dismissed_by = ForeignKeyField(db_column='dismissed_by_id', null=True, rel_model=Users, related_name='users_dismissed_by_set', to_field='id')
    resolved_on_default_branch = BooleanField()
    present_on_default_branch = BooleanField()
    detected_at = DateTimeField(null=True)

    class Meta:
        db_table = 'vulnerabilities'
        indexes = (
            (('project', 'created_at'), False),
            (('project', 'state', 'severity'), False),
        )

class VulnerabilityExports(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    started_at = DateTimeField(null=True)
    finished_at = DateTimeField(null=True)
    status = CharField()
    file = CharField(null=True)
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    author = ForeignKeyField(db_column='author_id', rel_model=Users, to_field='id')
    file_store = IntegerField(index=True, null=True)
    format = IntegerField()
    group = ForeignKeyField(db_column='group_id', null=True, rel_model=Namespaces, to_field='id')

    class Meta:
        db_table = 'vulnerability_exports'

class VulnerabilityExternalIssueLinks(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    author = ForeignKeyField(db_column='author_id', rel_model=Users, to_field='id')
    vulnerability = ForeignKeyField(db_column='vulnerability_id', rel_model=Vulnerabilities, to_field='id')
    link_type = IntegerField()
    external_type = IntegerField()
    external_project_key = TextField()
    external_issue_key = TextField()

    class Meta:
        db_table = 'vulnerability_external_issue_links'
        indexes = (
            (('link_type', 'vulnerability'), True),
            (('vulnerability', 'external_type', 'external_project_key', 'external_issue_key'), True),
        )

class VulnerabilityFeedback(BaseModel):
    created_at = DateTimeField()
    updated_at = DateTimeField()
    feedback_type = IntegerField()
    category = IntegerField()
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    author = ForeignKeyField(db_column='author_id', rel_model=Users, to_field='id')
    pipeline = ForeignKeyField(db_column='pipeline_id', null=True, rel_model=CiPipelines, to_field='id')
    issue = ForeignKeyField(db_column='issue_id', null=True, rel_model=Issues, to_field='id')
    project_fingerprint = CharField()
    merge_request = ForeignKeyField(db_column='merge_request_id', null=True, rel_model=MergeRequests, to_field='id')
    comment_author = ForeignKeyField(db_column='comment_author_id', null=True, rel_model=Users, related_name='users_comment_author_set', to_field='id')
    comment = TextField(null=True)
    comment_timestamp = DateTimeField(null=True)
    finding_uuid = TextField(null=True)
    dismissal_reason = IntegerField(null=True)

    class Meta:
        db_table = 'vulnerability_feedback'
        indexes = (
            (('project_fingerprint', 'feedback_type', 'category', 'project'), True),
        )

class VulnerabilityIdentifiers(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    fingerprint = BlobField()
    external_type = CharField()
    external = CharField(db_column='external_id')
    name = CharField()
    url = TextField(null=True)

    class Meta:
        db_table = 'vulnerability_identifiers'
        indexes = (
            (('project', 'fingerprint'), True),
        )

class VulnerabilityOccurrences(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    severity = IntegerField()
    confidence = IntegerField()
    report_type = IntegerField()
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    scanner = ForeignKeyField(db_column='scanner_id', rel_model=VulnerabilityScanners, to_field='id')
    primary_identifier = ForeignKeyField(db_column='primary_identifier_id', rel_model=VulnerabilityIdentifiers, to_field='id')
    project_fingerprint = BlobField(index=True)
    location_fingerprint = BlobField()
    uuid = CharField(unique=True)
    name = CharField()
    metadata_version = CharField()
    raw_metadata = TextField()
    vulnerability = ForeignKeyField(db_column='vulnerability_id', null=True, rel_model=Vulnerabilities, to_field='id')
    details = JSONField()
    description = TextField(null=True)
    message = TextField(null=True)
    solution = TextField(null=True)
    cve = TextField(null=True)
    location = JSONField(null=True)
    detection_method = IntegerField()

    class Meta:
        db_table = 'vulnerability_occurrences'
        indexes = (
            (('primary_identifier', 'location_fingerprint', 'id', 'report_type', 'project'), False),
            (('project', 'location_fingerprint', 'primary_identifier', 'scanner'), True),
            (('report_type', 'project'), False),
            (('report_type', 'project', 'project_fingerprint'), False),
        )

class VulnerabilityFindingEvidences(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    vulnerability_occurrence = ForeignKeyField(db_column='vulnerability_occurrence_id', rel_model=VulnerabilityOccurrences, to_field='id')
    summary = TextField(null=True)
    data = JSONField()

    class Meta:
        db_table = 'vulnerability_finding_evidences'

class VulnerabilityFindingEvidenceAssets(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    vulnerability_finding_evidence = ForeignKeyField(db_column='vulnerability_finding_evidence_id', rel_model=VulnerabilityFindingEvidences, to_field='id')
    type = TextField(null=True)
    name = TextField(null=True)
    url = TextField(null=True)

    class Meta:
        db_table = 'vulnerability_finding_evidence_assets'

class VulnerabilityFindingEvidenceSupportingMessages(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    vulnerability_finding_evidence = ForeignKeyField(db_column='vulnerability_finding_evidence_id', rel_model=VulnerabilityFindingEvidences, to_field='id')
    name = TextField(null=True)

    class Meta:
        db_table = 'vulnerability_finding_evidence_supporting_messages'

class VulnerabilityFindingEvidenceResponses(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    vulnerability_finding_evidence = ForeignKeyField(db_column='vulnerability_finding_evidence_id', null=True, rel_model=VulnerabilityFindingEvidences, to_field='id')
    status_code = IntegerField(null=True)
    reason_phrase = TextField(null=True)
    body = TextField(null=True)
    vulnerability_finding_evidence_supporting_message = ForeignKeyField(db_column='vulnerability_finding_evidence_supporting_message_id', null=True, rel_model=VulnerabilityFindingEvidenceSupportingMessages, to_field='id')

    class Meta:
        db_table = 'vulnerability_finding_evidence_responses'

class VulnerabilityFindingEvidenceRequests(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    vulnerability_finding_evidence = ForeignKeyField(db_column='vulnerability_finding_evidence_id', null=True, rel_model=VulnerabilityFindingEvidences, to_field='id')
    method = TextField(null=True)
    url = TextField(null=True)
    body = TextField(null=True)
    vulnerability_finding_evidence_supporting_message = ForeignKeyField(db_column='vulnerability_finding_evidence_supporting_message_id', null=True, rel_model=VulnerabilityFindingEvidenceSupportingMessages, to_field='id')

    class Meta:
        db_table = 'vulnerability_finding_evidence_requests'

class VulnerabilityFindingEvidenceHeaders(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    vulnerability_finding_evidence_request = ForeignKeyField(db_column='vulnerability_finding_evidence_request_id', null=True, rel_model=VulnerabilityFindingEvidenceRequests, to_field='id')
    vulnerability_finding_evidence_response = ForeignKeyField(db_column='vulnerability_finding_evidence_response_id', null=True, rel_model=VulnerabilityFindingEvidenceResponses, to_field='id')
    name = TextField()
    value = TextField()

    class Meta:
        db_table = 'vulnerability_finding_evidence_headers'

class VulnerabilityFindingEvidenceSources(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    vulnerability_finding_evidence = ForeignKeyField(db_column='vulnerability_finding_evidence_id', rel_model=VulnerabilityFindingEvidences, to_field='id')
    name = TextField(null=True)
    url = TextField(null=True)

    class Meta:
        db_table = 'vulnerability_finding_evidence_sources'

class VulnerabilityFindingLinks(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    vulnerability_occurrence = ForeignKeyField(db_column='vulnerability_occurrence_id', rel_model=VulnerabilityOccurrences, to_field='id')
    name = TextField(null=True)
    url = TextField()

    class Meta:
        db_table = 'vulnerability_finding_links'

class VulnerabilityFindingSignatures(BaseModel):
    id = BigIntegerField(primary_key=True)
    finding = ForeignKeyField(db_column='finding_id', rel_model=VulnerabilityOccurrences, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    algorithm_type = IntegerField()
    signature_sha = BlobField()

    class Meta:
        db_table = 'vulnerability_finding_signatures'
        indexes = (
            (('finding', 'algorithm_type', 'signature_sha'), True),
            (('signature_sha', 'finding'), True),
        )

class VulnerabilityRemediations(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    file_store = IntegerField(null=True)
    summary = TextField()
    file = TextField()
    checksum = BlobField()
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')

    class Meta:
        db_table = 'vulnerability_remediations'
        indexes = (
            (('checksum', 'project'), True),
        )

class VulnerabilityFindingsRemediations(BaseModel):
    id = BigIntegerField(primary_key=True)
    vulnerability_occurrence = ForeignKeyField(db_column='vulnerability_occurrence_id', null=True, rel_model=VulnerabilityOccurrences, to_field='id')
    vulnerability_remediation = ForeignKeyField(db_column='vulnerability_remediation_id', null=True, rel_model=VulnerabilityRemediations, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'vulnerability_findings_remediations'
        indexes = (
            (('vulnerability_occurrence', 'vulnerability_remediation'), True),
        )

class VulnerabilityFlags(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    vulnerability_occurrence = ForeignKeyField(db_column='vulnerability_occurrence_id', rel_model=VulnerabilityOccurrences, to_field='id')
    flag_type = IntegerField()
    origin = TextField()
    description = TextField()

    class Meta:
        db_table = 'vulnerability_flags'
        indexes = (
            (('vulnerability_occurrence', 'flag_type', 'origin'), True),
        )

class VulnerabilityHistoricalStatistics(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    total = IntegerField()
    critical = IntegerField()
    high = IntegerField()
    medium = IntegerField()
    low = IntegerField()
    unknown = IntegerField()
    info = IntegerField()
    date = DateField()
    letter_grade = IntegerField()

    class Meta:
        db_table = 'vulnerability_historical_statistics'
        indexes = (
            (('id', 'date'), False),
            (('project', 'date'), True),
        )

class VulnerabilityIssueLinks(BaseModel):
    id = BigIntegerField(primary_key=True)
    vulnerability = ForeignKeyField(db_column='vulnerability_id', rel_model=Vulnerabilities, to_field='id')
    issue = ForeignKeyField(db_column='issue_id', rel_model=Issues, to_field='id')
    link_type = IntegerField()
    created_at = DateTimeField()
    updated_at = DateTimeField()

    class Meta:
        db_table = 'vulnerability_issue_links'
        indexes = (
            (('vulnerability', 'issue'), True),
            (('vulnerability', 'link_type'), True),
        )

class VulnerabilityOccurrenceIdentifiers(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    occurrence = ForeignKeyField(db_column='occurrence_id', rel_model=VulnerabilityOccurrences, to_field='id')
    identifier = ForeignKeyField(db_column='identifier_id', rel_model=VulnerabilityIdentifiers, to_field='id')

    class Meta:
        db_table = 'vulnerability_occurrence_identifiers'
        indexes = (
            (('occurrence', 'identifier'), True),
        )

class VulnerabilityOccurrencePipelines(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    occurrence = ForeignKeyField(db_column='occurrence_id', rel_model=VulnerabilityOccurrences, to_field='id')
    pipeline = ForeignKeyField(db_column='pipeline_id', rel_model=CiPipelines, to_field='id')

    class Meta:
        db_table = 'vulnerability_occurrence_pipelines'
        indexes = (
            (('occurrence', 'pipeline'), True),
        )

class VulnerabilityStatistics(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id', unique=True)
    total = IntegerField()
    critical = IntegerField()
    high = IntegerField()
    medium = IntegerField()
    low = IntegerField()
    unknown = IntegerField()
    info = IntegerField()
    letter_grade = IntegerField(index=True)
    latest_pipeline = ForeignKeyField(db_column='latest_pipeline_id', null=True, rel_model=CiPipelines, to_field='id')

    class Meta:
        db_table = 'vulnerability_statistics'

class VulnerabilityUserMentions(BaseModel):
    id = BigIntegerField(primary_key=True)
    vulnerability = ForeignKeyField(db_column='vulnerability_id', rel_model=Vulnerabilities, to_field='id', unique=True)
    note = ForeignKeyField(db_column='note_id', null=True, rel_model=Notes, to_field='id', unique=True)
    mentioned_users_ids = UnknownField(null=True)  # ARRAY
    mentioned_projects_ids = UnknownField(null=True)  # ARRAY
    mentioned_groups_ids = UnknownField(null=True)  # ARRAY

    class Meta:
        db_table = 'vulnerability_user_mentions'
        indexes = (
            (('vulnerability', 'note'), True),
        )

class WebHooks(BaseModel):
    project = ForeignKeyField(db_column='project_id', null=True, rel_model=Projects, to_field='id')
    created_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    type = CharField(index=True, null=True)
    service = ForeignKeyField(db_column='service_id', null=True, rel_model=Integrations, to_field='id')
    push_events = BooleanField()
    issues_events = BooleanField()
    merge_requests_events = BooleanField()
    tag_push_events = BooleanField(null=True)
    group = ForeignKeyField(db_column='group_id', null=True, rel_model=Namespaces, to_field='id')
    note_events = BooleanField()
    enable_ssl_verification = BooleanField(null=True)
    wiki_page_events = BooleanField()
    pipeline_events = BooleanField()
    confidential_issues_events = BooleanField()
    repository_update_events = BooleanField()
    job_events = BooleanField()
    confidential_note_events = BooleanField(null=True)
    push_events_branch_filter = TextField(null=True)
    encrypted_token = CharField(null=True)
    encrypted_token_iv = CharField(null=True)
    encrypted_url = CharField(null=True)
    encrypted_url_iv = CharField(null=True)
    deployment_events = BooleanField()
    releases_events = BooleanField()
    feature_flag_events = BooleanField()
    member_events = BooleanField()
    subgroup_events = BooleanField()
    recent_failures = IntegerField()
    backoff_count = IntegerField()
    disabled_until = DateTimeField(null=True)

    class Meta:
        db_table = 'web_hooks'
        indexes = (
            (('project', 'recent_failures'), False),
        )

class WebHookLogs(BaseModel):
    id = BigIntegerField()
    web_hook = ForeignKeyField(db_column='web_hook_id', rel_model=WebHooks, related_name='web_hooks_web_hook_set', to_field='id')
    trigger = CharField(null=True)
    url = CharField(null=True)
    request_headers = TextField(null=True)
    request_data = TextField(null=True)
    response_headers = TextField(null=True)
    response_body = TextField(null=True)
    response_status = CharField(null=True)
    execution_duration = FloatField(null=True)
    internal_error_message = CharField(null=True)
    updated_at = DateTimeField()
    created_at = DateTimeField()

    class Meta:
        db_table = 'web_hook_logs'
        primary_key = CompositeKey('created_at', 'id')

class WebauthnRegistrations(BaseModel):
    id = BigIntegerField(primary_key=True)
    user = ForeignKeyField(db_column='user_id', rel_model=Users, to_field='id')
    counter = BigIntegerField()
    created_at = DateTimeField()
    updated_at = DateTimeField()
    credential_xid = TextField(unique=True)
    name = TextField()
    public_key = TextField()
    u2f_registration = ForeignKeyField(db_column='u2f_registration_id', null=True, rel_model=U2FRegistrations, to_field='id')

    class Meta:
        db_table = 'webauthn_registrations'

class WikiPageMeta(BaseModel):
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    title = CharField()

    class Meta:
        db_table = 'wiki_page_meta'

class WikiPageSlugs(BaseModel):
    canonical = BooleanField()
    wiki_page_meta = ForeignKeyField(db_column='wiki_page_meta_id', rel_model=WikiPageMeta, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    slug = CharField()

    class Meta:
        db_table = 'wiki_page_slugs'
        indexes = (
            (('wiki_page_meta', 'slug'), True),
        )

class X509Issuers(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    subject_key_identifier = CharField(index=True)
    subject = CharField()
    crl_url = CharField()

    class Meta:
        db_table = 'x509_issuers'

class X509Certificates(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    subject_key_identifier = CharField(index=True)
    subject = CharField()
    email = CharField()
    serial_number = BlobField()
    certificate_status = IntegerField()
    x509_issuer = ForeignKeyField(db_column='x509_issuer_id', rel_model=X509Issuers, to_field='id')

    class Meta:
        db_table = 'x509_certificates'

class X509CommitSignatures(BaseModel):
    id = BigIntegerField(primary_key=True)
    created_at = DateTimeField()
    updated_at = DateTimeField()
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    x509_certificate = ForeignKeyField(db_column='x509_certificate_id', rel_model=X509Certificates, to_field='id')
    commit_sha = BlobField(index=True)
    verification_status = IntegerField()

    class Meta:
        db_table = 'x509_commit_signatures'

class ZentaoTrackerData(BaseModel):
    id = BigIntegerField(primary_key=True)
    integration = ForeignKeyField(db_column='integration_id', rel_model=Integrations, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    encrypted_url = BlobField(null=True)
    encrypted_url_iv = BlobField(null=True)
    encrypted_api_url = BlobField(null=True)
    encrypted_api_url_iv = BlobField(null=True)
    encrypted_zentao_product_xid = BlobField(null=True)
    encrypted_zentao_product_xid_iv = BlobField(null=True)
    encrypted_api_token = BlobField(null=True)
    encrypted_api_token_iv = BlobField(null=True)

    class Meta:
        db_table = 'zentao_tracker_data'

class ZoomMeetings(BaseModel):
    id = BigIntegerField(primary_key=True)
    project = ForeignKeyField(db_column='project_id', rel_model=Projects, to_field='id')
    issue = ForeignKeyField(db_column='issue_id', rel_model=Issues, to_field='id')
    created_at = DateTimeField()
    updated_at = DateTimeField()
    issue_status = IntegerField(index=True)
    url = CharField(null=True)

    class Meta:
        db_table = 'zoom_meetings'
        indexes = (
            (('issue', 'issue_status'), True),
        )

